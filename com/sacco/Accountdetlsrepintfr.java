/*
 * mstatements.java
 *
 * Created on January 6, 2003, 12:45 PM
 */

package com.sacco;

/**
 *
 * @author  root
 */
public class Accountdetlsrepintfr extends javax.swing.JInternalFrame {
    
    /** Creates new form mstatements */
    public Accountdetlsrepintfr() {
        initComponents();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        java.awt.GridBagConstraints gridBagConstraints;

        pconn1 = new org.netbeans.lib.sql.pool.PooledConnectionSource();
        try {
            rset1 = new org.netbeans.lib.sql.NBCachedRowSet();
        } catch (java.sql.SQLException e1) {
            e1.printStackTrace();
        }
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jSeparator1 = new javax.swing.JSeparator();
        try {
            java.lang.Class.forName("org.postgresql.Driver");
        }catch(java.lang.ClassNotFoundException cl){}
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jTextField3 = new javax.swing.JTextField();
        jTextPane1 = new javax.swing.JTextPane();

        pconn1.setDatabase("jdbc:postgresql://localhost:5432/sako");
        pconn1.setDriver("org.postgresql.Driver");
        pconn1.setPassword("025d966ff95dcd39b5e66c18903baf55ed818e39e18e267c10415c675969", true);
        pconn1.setUsername("postgres");
        rset1.setCommand("select code,description,debit,credit from cash_book order by code");
        rset1.setConnectionSource(pconn1);
        rset1.setPassword("02ee5d08ec6a3a088a8af2d391f66665f4842d0c010614ebe8e7ef5a98747257a788af98ab0d7ce8", true);

        getContentPane().setLayout(new java.awt.GridBagLayout());

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Account Details");
        setVerifyInputWhenFocusTarget(false);
        setVisible(true);
        setEnabled(false);
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "1", "2", "3", "4", "5", ""
            }
        ));
        jTable1.setGridColor(new java.awt.Color(255, 255, 255));
        jTable1.setMaximumSize(new java.awt.Dimension(1, 1));
        jTable1.setShowHorizontalLines(false);
        jTable1.setShowVerticalLines(false);
        jTable1.setTableHeader(jTable1.getTableHeader());
        jScrollPane1.setViewportView(jTable1);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 10.0;
        getContentPane().add(jScrollPane1, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(jSeparator1, gridBagConstraints);

        jButton1.setText("Preview");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(jButton1, gridBagConstraints);

        jButton2.setMnemonic('c');
        jButton2.setText("Close");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.weightx = 1.0;
        getContentPane().add(jButton2, gridBagConstraints);

        jLabel2.setText("From Date");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        getContentPane().add(jLabel2, gridBagConstraints);

        jTextField2.setColumns(6);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 30);
        getContentPane().add(jTextField2, gridBagConstraints);

        jLabel3.setText("To Date");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        getContentPane().add(jLabel3, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 20);
        getContentPane().add(jTextField3, gridBagConstraints);

        jTextPane1.setPreferredSize(new java.awt.Dimension(80, 60));
        getContentPane().add(jTextPane1, new java.awt.GridBagConstraints());

        setBounds(0, 0, 900, 700);
    }//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        setVisible(false);
        // Add your handling code here:
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
 /*
        
       java.util.Vector vector1 = new java.util.Vector(5,5);
       
       java.util.Vector vector2 = new java.util.Vector(5,5);
       
       java.util.Vector vector3 = new java.util.Vector(5,5);
       
       java.util.Vector vector4 = new java.util.Vector(5,5);
       
       java.util.Vector vector5 = new java.util.Vector(5,5);

       java.util.Vector vector6 = new java.util.Vector(1);
       
       java.util.Vector vector7 = new java.util.Vector(1);
       
       
       
        
       int rowcount = 0; 
        
        javax.swing.text.Document txtdoc = jTextPane1.getDocument();
   //jTable1.asetGridColor(this.ite);//      java.lang.String[] str = {"Mary", "Judy", "Maureen"};
     java.util.Calendar cal = java.util.Calendar.getInstance();
     java.util.Date date_now = cal.getTime();
     java.lang.String str_date = date_now.toString();
  // javax.swing.table.TableModel tblmod = new jTable1.getModel();
     
     
         try {
            java.sql.Connection conn = java.sql.DriverManager.getConnection("jdbc:postgresql://localhost:5432/sako","postgres","pilsiner");
            System.out.println("Connection to database established");
            java.sql.Statement stmt = conn.createStatement();
                java.sql.ResultSet rset = stmt.executeQuery("select company_name,address,town,tel1,tel2 from company_profile");
        
              while (rset.next())
        
           jTable1.setValueAt(rset.getObject(1).toString(),0,1);
           jTable1.setValueAt(rset.getObject(2).toString(),1,1);
           jTable1.setValueAt(rset.getObject(3).toString(),2,1); 
           jTable1.setValueAt(rset.getObject(4).toString(),2,2);
           jTable1.setValueAt(rset.getObject(5).toString(),2,3); 
              } catch (java.sql.SQLException sqe) {
              javax.swing.JOptionPane.showMessageDialog(this,sqe.getMessage(),"Error",javax.swing.JOptionPane.ERROR_MESSAGE);
            
           sqe.printStackTrace();
            System.out.println(sqe.getMessage());
        }  
     
     
           String code = "Code"; 
           String desc = "Description";
           String ref = "Reference No."; 
           String deb = "Debit";
           String credt = "Credit";
           
           
           jTable1.setValueAt(code,4,0); 
           jTable1.setValueAt(desc,4,1);
           jTable1.setValueAt(ref,4,2); 
           jTable1.setValueAt(deb,4,3);
           jTable1.setValueAt(credt,4,4); 
          
     
      try {
            java.sql.Connection conn = java.sql.DriverManager.getConnection("jdbc:postgresql://localhost:5432/sako","postgres","pilsiner");
            System.out.println("Connection to database established");
            java.sql.Statement stmt = conn.createStatement();

           // for (int i=3; i++) {
             // for (int i=3; i< stmt.getMaxRows(); i++) {
            
            
            
 
            
        java.sql.ResultSet rset = stmt.executeQuery("select code,description,transaction_no,debit,credit from cash_book ORDER BY code");
        //java.sql.ResultSet rset = stmt.executeQuery("select code from cash_book");
           //  String cod = rset.getString(1); 
     //   for (int i =3; i <cod.ghashCode() ; i++){
             
             while (rset.next()) {
        
                vector1.addElement(rset.getObject(1));
                vector2.addElement(rset.getObject(2));
                vector3.addElement(rset.getObject(3));
                vector4.addElement(rset.getObject(4));
                vector5.addElement(rset.getObject(5));

                 
           //      jTable1.setValueAt(rset.getString(1), i, 0);
                 
           //      jTable1.setValueAt(rset.getString(2), i, 1);
                 
                }
      //  vector1.
          for (int i = 0; i < vector1.capacity(); i++) {
            
          //  for (int j = 3; j < vector1.capacity() + 3; j++) { 
            
                jTable1.setValueAt(vector1.elementAt(i), i + 6, 0); 
                
                jTable1.setValueAt(vector2.elementAt(i), i + 6, 1);
                
                jTable1.setValueAt(vector3.elementAt(i), i + 6, 2); 
                
                jTable1.setValueAt(vector4.elementAt(i), i + 6, 3);
                                
                jTable1.setValueAt(vector5.elementAt(i), i + 6, 4); 
          //  }
                
            System.out.println(vector1.elementAt(i) +"\t+\t"+vector2.elementAt(i));
            
        }
        

                
                
        
       // Return all = rset.getS;
         
            } catch (java.sql.SQLException sqe) {
              javax.swing.JOptionPane.showMessageDialog(this,sqe.getMessage(),"Error",javax.swing.JOptionPane.ERROR_MESSAGE);
            
           sqe.printStackTrace();
            System.out.println(sqe.getMessage());
        }
            try {
            java.sql.Connection conn1 = java.sql.DriverManager.getConnection("jdbc:postgresql://localhost:5432/sako","postgres","pilsiner");
            System.out.println("Connection to database established");
            java.sql.Statement stmt1 = conn1.createStatement();
            
                  java.sql.ResultSet rset1 = stmt1.executeQuery("select sum(debit), sum(credit) from cash_book");
            
             while(rset1.next()) {
              
               vector6.addElement(rset1.getObject(1));
                
               System.out.println(vector6.elementAt(0));
               vector7.addElement(rset1.getObject(2));
               System.out.println(vector7.elementAt(0));
             
               jTable1.setValueAt(vector6.elementAt(0), 40, 3);
               
               jTable1.setValueAt(vector7.elementAt(0), 40, 4);
                
             }
                        } catch (java.sql.SQLException sqe) {
              javax.swing.JOptionPane.showMessageDialog(this,sqe.getMessage(),"Error",javax.swing.JOptionPane.ERROR_MESSAGE);
            
           sqe.printStackTrace();
            System.out.println(sqe.getMessage());
        }

            

    
         
      
         this.initStylesForTable(jTextPane1);
        */
         
          rset1.setCommand("select code,description,transaction_no,debit,credit from cash_book");
        rset1.setConnectionSource(pconn1);
    
        try {
            rset1.execute();
      
        jTable1.setModel(new org.netbeans.lib.sql.models.TableModel(rset1, new org.netbeans.lib.sql.models.TableModel.Column[] {
            new org.netbeans.lib.sql.models.TableModel.Column("code", "Code", false),
            new org.netbeans.lib.sql.models.TableModel.Column("description", "Description", false),
            new org.netbeans.lib.sql.models.TableModel.Column("transaction_no", "Transaction No.", false),
            new org.netbeans.lib.sql.models.TableModel.Column("debit", "Debit", false),
            new org.netbeans.lib.sql.models.TableModel.Column("credit", "Credit", false)
        }));    
        jScrollPane1.setViewportView(jTable1);
        }
        
          catch(java.sql.SQLException sqlex){
        System.out.println(sqlex.getMessage());
} 
      
     // this.initComponents(jTable1);
 
       //try {
         // } catch (java.sql.SQLException ex){}
   
         
         
         /* try{
           txtdoc.insertString(txtdoc.getLength(),"\n" + "",jTextPane1.getStyle("alignleft"));
           
   

        try {
            java.sql.Connection conn = java.sql.DriverManager.getConnection("jdbc:postgresql://localhost:5432/sako", "postgres", "pilsiner");
            java.sql.Statement stmt = conn.createStatement();
          
           
             java.sql.ResultSet rs = stmt.executeQuery("select company_name from company_profile");
            while (rs.next()){
 
                try { 
        txtdoc.insertString(txtdoc.getLength(),"\t" +rs.getString(1), jTextPane1.getStyle("alignleft"));
              } catch (javax.swing.text.BadLocationException ex){}
            }
        }catch (java.sql.SQLException sql){
          javax.swing.JOptionPane.showMessageDialog(this,"ERROR: "+ sql.getMessage(),"Error Message!",javax.swing.JOptionPane.ERROR_MESSAGE);
                } 
       
           
           txtdoc.insertString(txtdoc.getLength(),"\n" + "\t"+ "Address",jTextPane1.getStyle("alignleft"));
               try {
            java.sql.Connection conn = java.sql.DriverManager.getConnection("jdbc:postgresql://localhost:5432/sako", "postgres", "pilsiner");
            java.sql.Statement stmt = conn.createStatement();
            java.sql.ResultSet rs = stmt.executeQuery("select address from company_profile");
            while (rs.next()){
  
         try { 
            //txtdoc.insertString(txtdoc.getLength(),"\n"  + "\t" +rs.getString(1), jTextPane1.getStyle("alignleft"));
            txtdoc.insertString(txtdoc.getLength(), "\t" +rs.getString(1),jTextPane1.getStyle("alignleft"));
           
           } catch (javax.swing.text.BadLocationException ex){}
            }
        }catch (java.sql.SQLException sql){
          javax.swing.JOptionPane.showMessageDialog(this,"ERROR: "+ sql.getMessage(),"Error Message!",javax.swing.JOptionPane.ERROR_MESSAGE);
                }
           txtdoc.insertString(txtdoc.getLength(),"\n"+"\t"+ "Town",jTextPane1.getStyle("alignleft"));
                 try {
            java.sql.Connection conn = java.sql.DriverManager.getConnection("jdbc:postgresql://localhost:5432/sako", "postgres", "pilsiner");
            java.sql.Statement stmt = conn.createStatement();
            java.sql.ResultSet rs = stmt.executeQuery("select town from company_profile");
            while (rs.next()){
  
         try { 
            //txtdoc.insertString(txtdoc.getLength(),"\n"  + "\t" +rs.getString(1), jTextPane1.getStyle("alignleft"));
            txtdoc.insertString(txtdoc.getLength(), "\t" +rs.getString(1),jTextPane1.getStyle("alignleft"));
           
           } catch (javax.swing.text.BadLocationException ex){}
            }
        }catch (java.sql.SQLException sql){
          javax.swing.JOptionPane.showMessageDialog(this,"ERROR: "+ sql.getMessage(),"Error Message!",javax.swing.JOptionPane.ERROR_MESSAGE);
                }
        
           txtdoc.insertString(txtdoc.getLength(),"\n"+"\t"+ "Tel.no",jTextPane1.getStyle("alignleft"));
                 try {
            java.sql.Connection conn = java.sql.DriverManager.getConnection("jdbc:postgresql://localhost:5432/sako", "postgres", "pilsiner");
            java.sql.Statement stmt = conn.createStatement();
            java.sql.ResultSet rs = stmt.executeQuery("select tel1,tel2 from company_profile");
            while (rs.next()){
  
         try { 
           txtdoc.insertString(txtdoc.getLength(), "\t" +rs.getString(1), jTextPane1.getStyle("alignleft"));
            txtdoc.insertString(txtdoc.getLength(), "\t" +rs.getString(2),jTextPane1.getStyle("alignleft"));
           
           } catch (javax.swing.text.BadLocationException ex){}
            }
        }catch (java.sql.SQLException sql){
          javax.swing.JOptionPane.showMessageDialog(this,"ERROR: "+ sql.getMessage(),"Error Message!",javax.swing.JOptionPane.ERROR_MESSAGE);
                }
        
           txtdoc.insertString(txtdoc.getLength(),"\n"+"\t" + "Fax",jTextPane1.getStyle("alignleft"));
                 try {
            java.sql.Connection conn = java.sql.DriverManager.getConnection("jdbc:postgresql://localhost:5432/sako", "postgres", "pilsiner");
            java.sql.Statement stmt = conn.createStatement();
            java.sql.ResultSet rs = stmt.executeQuery("select fax_no from company_profile");
            while (rs.next()){
  
         try { 
            //txtdoc.insertString(txtdoc.getLength(),"\n"  + "\t" +rs.getString(1), jTextPane1.getStyle("alignleft"));
            txtdoc.insertString(txtdoc.getLength(), "\t" +rs.getString(1),jTextPane1.getStyle("alignleft"));
           
           } catch (javax.swing.text.BadLocationException ex){}
            }
        }catch (java.sql.SQLException sql){
          javax.swing.JOptionPane.showMessageDialog(this,"ERROR: "+ sql.getMessage(),"Error Message!",javax.swing.JOptionPane.ERROR_MESSAGE);
                }
        
           
           txtdoc.insertString(txtdoc.getLength(),"\n"+"\t" + "Email",jTextPane1.getStyle("alignleft"));
                 try {
            java.sql.Connection conn = java.sql.DriverManager.getConnection("jdbc:postgresql://localhost:5432/sako", "postgres", "pilsiner");
            java.sql.Statement stmt = conn.createStatement();
            java.sql.ResultSet rs = stmt.executeQuery("select email from company_profile");
            while (rs.next()){
  
         try { 
            //txtdoc.insertString(txtdoc.getLength(),"\n"  + "\t" +rs.getString(1), jTextPane1.getStyle("alignleft"));
            txtdoc.insertString(txtdoc.getLength(), "\t" +rs.getString(1),jTextPane1.getStyle("alignleft"));
           
           } catch (javax.swing.text.BadLocationException ex){}
            }
        }catch (java.sql.SQLException sql){
          javax.swing.JOptionPane.showMessageDialog(this,"ERROR: "+ sql.getMessage(),"Error Message!",javax.swing.JOptionPane.ERROR_MESSAGE);
                }
        
           txtdoc.insertString(txtdoc.getLength(),"\t"+"\t" + "Website",jTextPane1.getStyle("alignleft"));
        
        
       
           try {
            java.sql.Connection conn = java.sql.DriverManager.getConnection("jdbc:postgresql://localhost:5432/sako", "postgres", "pilsiner");
            java.sql.Statement stmt = conn.createStatement();
            java.sql.ResultSet rs = stmt.executeQuery("select website from company_profile");
            while (rs.next()){
  
         try { 
           // txtdoc.insertString(txtdoc.getLength(),"\n"  + "\t" +rs.getString(1), jTextPane1.getStyle("alignleft"));
            txtdoc.insertString(txtdoc.getLength(), "\t" +rs.getString(1),jTextPane1.getStyle("alignleft"));
           
           } catch (javax.swing.text.BadLocationException ex){}
            }
        }catch (java.sql.SQLException sql){
          javax.swing.JOptionPane.showMessageDialog(this,"ERROR: "+ sql.getMessage(),"Error Message!",javax.swing.JOptionPane.ERROR_MESSAGE);
                } 
         
    
          txtdoc.insertString(txtdoc.getLength(),"\n"+"\n" + "\t"+ "\t"+ "\t"+ "Account Details",jTextPane1.getStyle("alignleft"));
          //txtdoc.insertString(txtdoc.getLength(),  "\t"+ "\t"+ "\t", jTextPane1.getStyle("bold"));
        txtdoc.insertString(txtdoc.getLength(),  "\t" +"\t"+"\t"+"Printed on : "+str_date, jTextPane1.getStyle("bold"));
       
           } catch (javax.swing.text.BadLocationException ex){}
   
         
            
      try{
         txtdoc.insertString(txtdoc.getLength(),"\n" + "\t" + "________________________________________________________________________________________________________________________________________________________",jTextPane1.getStyle("bold"));
        
          //txtdoc.insertString(txtdoc.getLength(),"\n"+"\t"+"\t"+"\t"+"\t"+"\t",jTextPane1.getStyle("alignleft"));
          txtdoc.insertString(txtdoc.getLength(),"\n" + "\t" + "Date",jTextPane1.getStyle("aligncentre"));
          txtdoc.insertString(txtdoc.getLength(),"\t",jTextPane1.getStyle("bold"));
          txtdoc.insertString(txtdoc.getLength(), "Code",jTextPane1.getStyle("italics"));    
          txtdoc.insertString(txtdoc.getLength(),"\t",jTextPane1.getStyle("bold"));
          txtdoc.insertString(txtdoc.getLength(), "Description",jTextPane1.getStyle("italics"));    
          txtdoc.insertString(txtdoc.getLength(),"\t",jTextPane1.getStyle("bold"));
          txtdoc.insertString(txtdoc.getLength(),"\t",jTextPane1.getStyle("bold"));
          txtdoc.insertString(txtdoc.getLength(), "Reference_no",jTextPane1.getStyle("italics"));
          txtdoc.insertString(txtdoc.getLength(),"\t" + "Debit",jTextPane1.getStyle("italics"));    
          txtdoc.insertString(txtdoc.getLength(),"\t",jTextPane1.getStyle("bold"));
          txtdoc.insertString(txtdoc.getLength(), "Credit",jTextPane1.getStyle("italics"));    
       
         txtdoc.insertString(txtdoc.getLength(),"\n" + "\t" + "____________________________________________________________________________________________________________________________________________________________",jTextPane1.getStyle("bold"));
           } catch (javax.swing.text.BadLocationException ex){}
      
       
        try {
            java.sql.Connection conn = java.sql.DriverManager.getConnection("jdbc:postgresql://localhost:5432/sako", "postgres", "pilsiner");
            java.sql.Statement stmt = conn.createStatement();
           
           
             java.sql.ResultSet rs = stmt.executeQuery("select date,code,description,transaction_no,debit,credit from cash_book where date BETWEEN '"+jTextField2.getText()+"' AND '"+jTextField3.getText()+"' ORDER BY code");
            while (rs.next()){
 
        
                try { 
        txtdoc.insertString(txtdoc.getLength(),"\n"  + "\t"  +rs.getString(1), jTextPane1.getStyle("bold"));
        txtdoc.insertString(txtdoc.getLength(),"\t" + rs.getString(2),jTextPane1.getStyle("bold"));
        txtdoc.insertString(txtdoc.getLength(),"\t" + rs.getString(3),jTextPane1.getStyle("bold"));
        txtdoc.insertString(txtdoc.getLength(),"\t"+"\t" + rs.getString(4),jTextPane1.getStyle("normal"));
        txtdoc.insertString(txtdoc.getLength(),"\t"+"\t"+ rs.getString(5),jTextPane1.getStyle("bold"));
        txtdoc.insertString(txtdoc.getLength(),"\t" + rs.getString(6),jTextPane1.getStyle("bold"));
        //txtdoc.insertString(txtdoc.getLength(),"\t" + rs.getString(4),jTextPane1.getStyle("normal"));
            } catch (javax.swing.text.BadLocationException ex){}
            }
        }catch (java.sql.SQLException sql){
        System.out.println(sql.getMessage());
        }
        /* try {
            java.sql.Connection conn = java.sql.DriverManager.getConnection("jdbc:postgresql://localhost:5432/sako", "postgres", "pilsiner");
            java.sql.Statement stmt = conn.createStatement();
            //java.sql.ResultSet rs = stmt.executeQuery("select * from branches");
           
             java.sql.ResultSet rs = stmt.executeQuery("select sum(Debit)-sum(credit) from cash_book where date BETWEEN '"+jTextField2.getText()+"' AND '"+jTextField3.getText()+"'");
            while (rs.next()){
            try {
             // txtdoc.insertString(  txtdoc.getLength(),"\n" +"\t"+"---------------------------------------------------------------------------------------------------------------------------------", jTextPane1.getStyle("bold"));
             //txtdoc.insertString(  txtdoc.getLength(),"\n"+"\t"+"Total KShs.", jTextPane1.getStyle("bold"));
             txtdoc.insertString(  txtdoc.getLength(),"\n"+"\t"+"\t"+"\t"+"\t"+"\t"+rs.getString(1), jTextPane1.getStyle("bold"));
            // txtdoc.insertString(  txtdoc.getLength(),"\t"+rs.getString(2), jTextPane1.getStyle("bold"));
           //  txtdoc.insertString(  txtdoc.getLength(),"\n"+"\t"+ "---------------------------------------------------------------------------------------------------------------------------------", jTextPane1.getStyle("bold"));

            } catch (javax.swing.text.BadLocationException ex){}
            }
        }catch (java.sql.SQLException sql){}
     *
      
     
        try {
            java.sql.Connection conn = java.sql.DriverManager.getConnection("jdbc:postgresql://localhost:5432/sako", "postgres", "pilsiner");
            java.sql.Statement stmt = conn.createStatement();
            //java.sql.ResultSet rs = stmt.executeQuery("select * from branches");
           java.sql.ResultSet rs = stmt.executeQuery("select sum(Debit),sum(credit) from cash_book where date BETWEEN '"+jTextField2.getText()+"' AND '"+jTextField3.getText()+"'");
       
            // java.sql.ResultSet rs = stmt.executeQuery("select sum(Debit),sum(credit)+(sum(Debit)-sum(credit)) from cash_book where date BETWEEN '"+jTextField2.getText()+"' AND '"+jTextField3.getText()+"'");
            while (rs.next()){
            try {
              txtdoc.insertString(  txtdoc.getLength(),"\n" +"\t"+"---------------------------------------------------------------------------------------------------------------------------------", jTextPane1.getStyle("bold"));
             txtdoc.insertString(  txtdoc.getLength(),"\n"+"\t"+"Total KShs.", jTextPane1.getStyle("aligncentre"));
             txtdoc.insertString(  txtdoc.getLength(),"\t"+"\t"+"\t"+"\t"+"\t"+"\t"+rs.getString(1), jTextPane1.getStyle("bold"));
             txtdoc.insertString(  txtdoc.getLength(),"\t"+rs.getString(2), jTextPane1.getStyle("bold"));
             txtdoc.insertString(  txtdoc.getLength(),"\n"+"\t"+ "---------------------------------------------------------------------------------------------------------------------------------", jTextPane1.getStyle("bold"));

            } catch (javax.swing.text.BadLocationException ex){
            System.out.println(ex.getMessage());
            }
            }
        }catch (java.sql.SQLException sql){}

     */
      // Add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed
    protected void initStylesForTable(javax.swing.JTextPane textPane) {
              javax.swing.text.Style def = javax.swing.text.StyleContext.getDefaultStyleContext().
                                                                   getStyle(javax.swing.text.StyleContext.DEFAULT_STYLE);
      //  javax.swing.text.Style def = javax.swing.text.StyleConstants.getDefaultStyleContext().
                                                                  // getStyle(javax.swing.text.StyleContext.DEFAULT_STYLE);
       javax.swing.text.Style regular = textPane.addStyle("regular", def);
        javax.swing.text.StyleConstants.setFontFamily(def, "SansSerif");
        
        
        javax.swing.text.Style s = textPane.addStyle("italic", regular);
        javax.swing.text.StyleConstants.setItalic(s, true);

        s = textPane.addStyle("bold", regular);
        javax.swing.text.StyleConstants.setBold(s, true);
        javax.swing.text.StyleConstants.setFontSize(s, 8);
        
        s = textPane.addStyle("alignctr", regular);
        javax.swing.text.StyleConstants.setAlignment(s, javax.swing.text.StyleConstants.ALIGN_CENTER);
        
        s = textPane.addStyle("alignleft", regular);
        javax.swing.text.StyleConstants.setAlignment(s, javax.swing.text.StyleConstants.ALIGN_LEFT);
        
        s = textPane.addStyle("alignright", regular);
        javax.swing.text.StyleConstants.setAlignment(s, javax.swing.text.StyleConstants.ALIGN_RIGHT);
        
        s = textPane.addStyle("justified", regular);
        javax.swing.text.StyleConstants.setAlignment(s, javax.swing.text.StyleConstants.ALIGN_JUSTIFIED);
        
         s = textPane.addStyle("normal", regular);
        javax.swing.text.StyleConstants.setFontSize(s, 8);
        
        s = textPane.addStyle("large", regular);
        javax.swing.text.StyleConstants.setFontSize(s, 10);
        
        s = textPane.addStyle("small", regular);
        javax.swing.text.StyleConstants.setFontSize(s, 7);
        
        
        s = textPane.addStyle("underline", regular);
        javax.swing.text.StyleConstants.setUnderline(s, true);
        
        s = textPane.addStyle("centred", regular);
        javax.swing.text.StyleConstants.setAlignment(s, javax.swing.text.StyleConstants.ALIGN_CENTER);
  
         }
    
    public void OneClass(String ListClassName){             
     int i, NoOfColumns;
     String Code,Description,Transaction_no,debit,credit;
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextPane jTextPane1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JButton jButton1;
    private org.netbeans.lib.sql.NBCachedRowSet rset1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTextField jTextField2;
    private org.netbeans.lib.sql.pool.PooledConnectionSource pconn1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
  public class TableModel extends javax.swing.table.AbstractTableModel {   
     



                    
                    public java.lang.Object[][] data =  this.getRsetData("cash_book", new java.lang.String[]{"code", "description","bank","bank_branch","debit", "credit"});
      
                    java.lang.String[] columnNames = new java.lang.String[]{"code","Description","Bank","Bank Branch","debit","credit"};
            
        //    }
            
            public java.lang.Object[][] getDataModel() {
                
             //   data = setDataModel();
                
                return data;
                
            }
             
             public int getRowCount() {
                
              return data.length;
                
            }
             
            public int getColumnCount() {
                
              return columnNames.length;
                
            }
            
            public java.lang.Object getValueAt(int row, int column) {
                
              return data[row][column];
               
            }
            
            public java.lang.String getColumnName(int column) {
                
             return columnNames[column];
                
            }
            
            public void setValueAt(java.lang.Object value, int row , int column) {
                
                data[row][column] = value;
                
                fireTableChanged(new javax.swing.event.TableModelEvent(this, row, row, column));
                
            }
            
            public boolean isCellEditable(int row , int column){ return true ;}
            
            public java.lang.Class getColumnClass(int c) {
                
                return getValueAt(0, c).getClass();

            }                
       
       
       public java.lang.Object[][] getRsetData(java.lang.String tableName, java.lang.String[] columnNames) {
                
               int m = 0;
                
                int noColumns = 0;
                
                int noRows = 0;
                
                java.lang.Object[][] tableMatrix = null;
                
                java.util.Vector tableRows = new java.util.Vector(0,1);
                
               java.util.Vector tableMatrixColVector = new java.util.Vector(0, 1);
                
                java.util.Vector tableValues = new java.util.Vector(0,1);
                
                java.lang.String strColNames = columnNames[0];
                
                for (int k = 1; k < columnNames.length; k++) {
                    
                    strColNames = strColNames+", "+columnNames[k];
                    
                }
 
                try {
                             
                    java.sql.Connection conn = java.sql.DriverManager.getConnection("jdbc:postgresql://localhost:5432/sako","postgres","pilsiner");
            
                    System.out.println("Connection to database established");
            
                    java.sql.Statement stmt = conn.createStatement();
                
                    java.sql.ResultSet rset = stmt.executeQuery("select "+strColNames+" from "+tableName);
                    
//                    java.sql.ResultSet rset1 = stmt.executeQuery("select "+strColNames+" from "+tableName);
                    
                    noColumns = rset.getMetaData().getColumnCount();
             
                    while (rset.next()) {
                     
                     for (int z = 1; z < rset.getMetaData().getColumnCount(); z++) {
                        
                             tableValues.add(rset.getObject(z + 1));
                     
                            }
                          
                            tableRows.add(tableValues);
                     
                    
                    }
                    
                    noRows = tableRows.capacity();
                    
                    noColumns = rset.getMetaData().getColumnCount();
                    
 //                  for(int j = 0; j < rset.getMetaData().getColumnCount(); j++) {
                   
 //                       tableValues.add(j, null);
//                         tableValues.insertElementAt(j, 1);                                      
//                    }
                    
                    tableMatrix = new java.lang.Object[noRows][noColumns];
                    
                   // m = 0;
                     java.sql.ResultSet rset1 = stmt.executeQuery("select "+strColNames+" from "+tableName);
                    
                    while (rset1.next()) {
                        
                        for (int i = 0; i < rset.getMetaData().getColumnCount(); i++) {
                                        
                                        System.out.print(rset1.getObject(i+1).toString() + "\t"+"\t");
                            
                                        tableMatrix[m][i] = rset1.getObject(i+1);
                                        
                                        System.out.print(m+"  ");
                                    }
                         
                                    System.out.println();
                               //  tableRows.addElement(tableValues);
                                m++;
                            
                                 
                     // tableValues.elements();
                                                                 
                        }

            } catch (java.sql.SQLException sqe) {
                
               //  javax.swing.JOptionPane.showMessageDialog(this,sqe.getMessage(),"Error",javax.swing.JOptionPane.ERROR_MESSAGE);
            
           sqe.printStackTrace();
          
           System.out.println(sqe.getMessage());
      
            }
        /*       int nofColumns = tableValues.capacity();
                
               int noOfTableRows = tableRows.capacity();
               
               System.out.println(nofColumns);

               System.out.println(noOfTableRows);
               
               tableMatrix = new java.lang.Object[noOfTableRows][nofColumns];
                              
                 for (int i = 0; i < noOfTableRows; i++) {

                 tableMatrixColVector = (java.util.Vector)tableRows.get(i);
                    
                    for (int j = 0; j < tableMatrixColVector.capacity(); j++) {

                   tableMatrix[i][j] = tableMatrixColVector.get(j);

                   System.out.print(tableMatrix[i][j].toString()+"\t"+"\t");
                    
                    }
                 
                     System.out.println();                 
                     
                }
         */
                
              //  tableMatrix
             /*   
               for (int x = 0; x < tableMatrix.length; x++) {
                   
                   tableMatrix[x] = new java.lang.Object[noColumns];
                   
                   System.out.println(tableMatrix.length);
                   
                   System.out.println(noColumns +"  "+ noRows);
                   
                   System.out.println(tableMatrix[x].length);
                   
                   System.out.println(m);                   
                   
                   for (int y = 0; y < tableMatrix[x].length; y++) {
               
                       System.out.print(tableMatrix[x][y].toString()+"\t"+"\t");
                       
                   }
                   
               }*/
               
               return tableMatrix;                
                
       }
       
       /** Setter for property dataModel.
        * @param dataModel New value of property dataModel.
        */
       public void setDataModel(java.lang.Object[][] dataModel) {}       
       
   }  

    
    
    
}
