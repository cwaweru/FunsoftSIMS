package com.afrisoftech.sacco;

import java.awt.Color;
import java.io.FileOutputStream;
import java.io.IOException;
import com.lowagie.text.*;
import com.lowagie.text.pdf.PdfWriter;

/*
 * Reporter.java
 *
 * Created on November 17, 2002, 6:34 PM
 */

/**
 *
 * @author  root
 */
public class Reporter extends javax.swing.JFrame implements java.awt.print.Printable {
    private static java.awt.Font fnt = new java.awt.Font("Helvetica",java.awt.Font.PLAIN,8);
    private java.awt.Paint pnt = new java.awt.GradientPaint(100f, 100f, java.awt.Color.black,136f,100f,java.awt.Color.black,true);

    java.util.Hashtable actions;
    protected UndoAction undoAction;
    protected RedoAction redoAction;
    protected javax.swing.undo.UndoManager undo = new javax.swing.undo.UndoManager();
    java.lang.String newline = "\n";
    java.lang.String tab = "\t";
    javax.swing.text.StyledDocument txtDocument;
    java.net.URL pageUrl;
    
    java.lang.String[] initStyles = {"regular", "italic", "bold", "small", "large", "underline", "centred"};
    
    javax.swing.ImageIcon imgIcon;
    /** Creates new form Reporter */
    public Reporter() {
        
        imgIcon = new javax.swing.ImageIcon(getClass().getResource("/check.gif"));
        
        this.setIconImage(imgIcon.getImage());
        
        initComponents();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        pooledConnectionSource2 = new org.netbeans.lib.sql.pool.PooledConnectionSource();
        try {
            nBCachedRowSet1 = new org.netbeans.lib.sql.NBCachedRowSet();
        } catch (java.sql.SQLException e1) {
            e1.printStackTrace();
        }
        jScrollPane1 = new javax.swing.JScrollPane();
        jPanel1 = new javax.swing.JPanel();
        jPanel1.setSize(1000,800);
        txtPane = new javax.swing.JTextPane();
        //final int MAX_CHARACTERS = 300;
        txtPane.setSize(900,1200);
        jToolBar1 = new javax.swing.JToolBar();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        jLabel1 = new CaretListenerLabel("jLabel1");
        jMenuBar1 = new javax.swing.JMenuBar();
        filemn = new javax.swing.JMenu();
        create = new javax.swing.JMenuItem();
        open = new javax.swing.JMenuItem();
        jSeparator4 = new javax.swing.JSeparator();
        savemnit = new javax.swing.JMenuItem();
        saveasmnit = new javax.swing.JMenuItem();
        jSeparator3 = new javax.swing.JSeparator();
        pgsetupmnit = new javax.swing.JMenuItem();
        previewmnit = new javax.swing.JMenuItem();
        print = new javax.swing.JMenuItem();
        jSeparator5 = new javax.swing.JSeparator();
        close = new javax.swing.JMenuItem();
        exit = new javax.swing.JMenuItem();
        editMenu = createEditMenu();
        styleMenu = createStyleMenu();
        editmn = new javax.swing.JMenu();
        undomnit = new javax.swing.JMenuItem();
        redomnit = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JSeparator();
        cutmnit = new javax.swing.JMenuItem();
        copymnit = new javax.swing.JMenuItem();
        pastemnit = new javax.swing.JMenuItem();
        delmnit = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JSeparator();
        findmnit = new javax.swing.JMenuItem();
        replacemnit = new javax.swing.JMenuItem();
        toolsmn = new javax.swing.JMenu();
        acctdetmnit = new javax.swing.JMenuItem();
        transactionslsmnitmnit = new javax.swing.JMenuItem();
        helpmn = new javax.swing.JMenu();

        pooledConnectionSource2.setDatabase("jdbc:postgresql://localhost:5432/sako");
        pooledConnectionSource2.setDriver("org.postgresql.Driver");
        pooledConnectionSource2.setPassword("02cbb339c0e6a7cf12858a7d55643683c385492dfebe6c30e2f43337e501af7f0cdc22", true);
        pooledConnectionSource2.setUsername("postgres");
        nBCachedRowSet1.setCommand("select code,description from cash_book");
        nBCachedRowSet1.setConnectionSource(pooledConnectionSource2);
        nBCachedRowSet1.setPassword("025b3615386d48bccb46220c06e3f1d1bb2de89d1cd2e373f2ee2bf3", true);

        setTitle("Styled Document Reporter");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                exitForm(evt);
            }
        });

        jScrollPane1.setPreferredSize(new java.awt.Dimension(500, 80));
        jPanel1.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 5, 50));

        jPanel1.setBackground(new java.awt.Color(204, 204, 204));
        jPanel1.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0)));
        jPanel1.setMaximumSize(new java.awt.Dimension(900, 1000));
        jPanel1.setMinimumSize(new java.awt.Dimension(900, 1000));
        jPanel1.setPreferredSize(new java.awt.Dimension(900, 1000));
        txtPane.setBackground(new java.awt.Color(255, 255, 255));
        txtPane.setBorder(new javax.swing.border.BevelBorder(javax.swing.border.BevelBorder.RAISED, java.awt.Color.darkGray, java.awt.Color.lightGray, java.awt.Color.black, java.awt.Color.gray));
        txtPane.setToolTipText("");
        txtPane.setCaretColor(new java.awt.Color(0, 51, 255));
        txtPane.setContentType(txtPane.getContentType());
        txtPane.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        txtPane.setMargin(new java.awt.Insets(100, 100, 100, 100));
        txtPane.setMaximumSize(new java.awt.Dimension(612, 792));
        txtPane.setName("txtPane");
        txtPane.setPreferredSize(new java.awt.Dimension(612, 792));
        txtPane.setStyledDocument(txtPane.getStyledDocument());

        javax.swing.text.StyledDocument txtDocument = txtPane.getStyledDocument();
        addKeymapBindings();
        //txtDocument = txtPane;
        //initDocument();
        //try {
            //    txtPane.setPage("tools.rtf");
            //}catch(java.io.IOException io){}
        txtDocument.addUndoableEditListener(new MyUndoableEditListener());
        //txtPane.addCaretListener(caretListenerLabel);
        txtDocument.addDocumentListener(new MyDocumentListener());
        txtPane.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                txtPaneComponentShown(evt);
            }
        });

        txtPane.addContainerListener(new java.awt.event.ContainerAdapter() {
            public void componentAdded(java.awt.event.ContainerEvent evt) {
                txtPaneComponentAdded(evt);
            }
        });

        txtPane.addHyperlinkListener(new javax.swing.event.HyperlinkListener() {
            public void hyperlinkUpdate(javax.swing.event.HyperlinkEvent evt) {
                txtPaneHyperlinkUpdate(evt);
            }
        });

        jPanel1.add(txtPane);

        jScrollPane1.setViewportView(jPanel1);

        getContentPane().add(jScrollPane1, java.awt.BorderLayout.CENTER);

        jToolBar1.setBorder(new javax.swing.border.EtchedBorder(java.awt.Color.lightGray, java.awt.Color.black));
        jButton1.setIcon(new javax.swing.ImageIcon("/root/themes/icons/TreeOpen.gif"));
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jToolBar1.add(jButton1);

        jButton2.setIcon(new javax.swing.ImageIcon("/root/themes/icons/Window.gif"));
        jToolBar1.add(jButton2);

        jButton3.setIcon(new javax.swing.ImageIcon("/root/themes/icons/Default.gif"));
        jToolBar1.add(jButton3);

        jButton4.setIcon(new javax.swing.ImageIcon("/root/themes/icons/TreeClosed.gif"));
        jToolBar1.add(jButton4);

        jButton5.setFont(new java.awt.Font("Serif", 1, 18));
        jButton5.setText("  B ");
        jButton5.setToolTipText("Bold");
        jButton5.setBorder(null);
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jToolBar1.add(jButton5);

        jButton6.setFont(new java.awt.Font("Serif", 3, 18));
        jButton6.setText("  I ");
        jButton6.setToolTipText("Italics");
        jButton6.setBorder(null);
        jToolBar1.add(jButton6);

        jButton7.setFont(new java.awt.Font("Serif", 1, 18));
        jButton7.setText("  U ");
        jButton7.setToolTipText("Underline");
        jButton7.setBorder(null);
        jToolBar1.add(jButton7);

        getContentPane().add(jToolBar1, java.awt.BorderLayout.NORTH);

        jLabel1.setBorder(new javax.swing.border.TitledBorder("Caret Label"));
        getContentPane().add(jLabel1, java.awt.BorderLayout.SOUTH);

        jMenuBar1.setBorder(new javax.swing.border.TitledBorder(null, "Styled Document Reporter", javax.swing.border.TitledBorder.RIGHT, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("SansSerif", 2, 8)));
        filemn.setMnemonic('F');
        filemn.setText("File");
        create.setMnemonic('e');
        create.setText("New");
        create.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createActionPerformed(evt);
            }
        });

        filemn.add(create);
        open.setMnemonic('p');
        open.setText("Open");
        open.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openActionPerformed(evt);
            }
        });

        filemn.add(open);
        filemn.add(jSeparator4);
        savemnit.setText("Save");
        savemnit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                savemnitActionPerformed(evt);
            }
        });

        filemn.add(savemnit);
        saveasmnit.setText("Save As..");
        saveasmnit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveasmnitActionPerformed(evt);
            }
        });

        filemn.add(saveasmnit);
        filemn.add(jSeparator3);
        pgsetupmnit.setText("Page Setup");
        filemn.add(pgsetupmnit);
        previewmnit.setText("Preview");
        filemn.add(previewmnit);
        print.setMnemonic('r');
        print.setText("Print");
        print.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                printActionPerformed(evt);
            }
        });

        filemn.add(print);
        filemn.add(jSeparator5);
        close.setMnemonic('l');
        close.setText("Close");
        filemn.add(close);
        exit.setMnemonic('x');
        exit.setText("Exit");
        exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitActionPerformed(evt);
            }
        });

        filemn.add(exit);
        jMenuBar1.add(filemn);
        editMenu.setText("Edit");
        jMenuBar1.add(editMenu);
        styleMenu.setText("Style");
        jMenuBar1.add(styleMenu);
        editmn.setText("View");
        undomnit.setText("Undo");
        undomnit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                undomnitActionPerformed(evt);
            }
        });

        editmn.add(undomnit);
        redomnit.setText("Redo");
        editmn.add(redomnit);
        editmn.add(jSeparator1);
        cutmnit.setText("Cut");
        editmn.add(cutmnit);
        copymnit.setText("Copy");
        editmn.add(copymnit);
        pastemnit.setText("Paste");
        editmn.add(pastemnit);
        delmnit.setText("Delete");
        editmn.add(delmnit);
        editmn.add(jSeparator2);
        findmnit.setText("Find");
        editmn.add(findmnit);
        replacemnit.setText("Replace");
        editmn.add(replacemnit);
        jMenuBar1.add(editmn);
        toolsmn.setText("Tools");
        acctdetmnit.setText("Account Details");
        acctdetmnit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                acctdetmnitActionPerformed(evt);
            }
        });

        toolsmn.add(acctdetmnit);
        transactionslsmnitmnit.setText("Blue");
        transactionslsmnitmnit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                transactionslsmnitmnitActionPerformed(evt);
            }
        });

        toolsmn.add(transactionslsmnitmnit);
        jMenuBar1.add(toolsmn);
        helpmn.setText("Help");
        jMenuBar1.add(helpmn);
        setJMenuBar(jMenuBar1);

        pack();
        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setSize(new java.awt.Dimension(942, 600));
        setLocation((screenSize.width-942)/2,(screenSize.height-600)/2);
    }//GEN-END:initComponents

    private void txtPaneHyperlinkUpdate(javax.swing.event.HyperlinkEvent evt) {//GEN-FIRST:event_txtPaneHyperlinkUpdate
    
        if (evt.getEventType().equals(javax.swing.event.HyperlinkEvent.EventType.ACTIVATED)) {

        try {
            
        txtPane.setPage(evt.getURL());
        
        
        txtPane.setEditable(false);
       
        } catch(java.io.IOException IOExec) {
            
            javax.swing.JOptionPane.showMessageDialog(this, evt.getDescription()+" cannot be found");
            
        }
        
        }
        // Add your handling code here:
    }//GEN-LAST:event_txtPaneHyperlinkUpdate

    private void txtPaneComponentAdded(java.awt.event.ContainerEvent evt) {//GEN-FIRST:event_txtPaneComponentAdded
//this.jButton1.setVisible(true);        // Add your handling code here:
    }//GEN-LAST:event_txtPaneComponentAdded

    private void transactionslsmnitmnitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_transactionslsmnitmnitActionPerformed
       // jTable1setForeground(new java.awt.Color(51, 51, 255));  // Add your handling code here:
    }//GEN-LAST:event_transactionslsmnitmnitActionPerformed

    private void acctdetmnitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_acctdetmnitActionPerformed
       
        int resOpt = javax.swing.JOptionPane.showConfirmDialog(this, "Confirm and go on", "Confirm action", javax.swing.JOptionPane.YES_NO_OPTION);
        
        if (resOpt == javax.swing.JOptionPane.NO_OPTION) {
            
            javax.swing.JOptionPane.showMessageDialog(this, "You have cancelled operation");
            
        }
            
            else {
       
      //  accountdetpnl acc = new accountdetpnl();
        
      //  java.lang.Object[][] dataModel = acc;      
      //  acc.setSize(this.getContentPane().getSize());
        
      //  jScrollPane1.setViewportView(acc); 
        
       // acc.setVisible(true);
            }
        
        
        
   /*     java.awt.GridBagConstraints gridBagConstraints;
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        
       */
        
       // this.getContentPane().add(acc,, javax.swing.JLayeredPane.POPUP_LAYER);
        //txtPane.add("test", acc);
        
        /*  javax.swing.JInternalFrame comp = new accountdetlsrepintfr();
         txtPane.getadd(comp, javax.swing.JLayeredPane.DEFAULT_LAYER);
           try {
        comp.setSelected(true);
        } catch(java.beans.PropertyVetoException pvt){} */   // Add your handling code here:
    }//GEN-LAST:event_acctdetmnitActionPerformed
    
    private void printActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_printActionPerformed
     java.awt.print.PrinterJob job = java.awt.print.PrinterJob.getPrinterJob();
        job.setPrintable(Reporter.this);
     
  //   javax.swing.JFrame same1 = new same();
     if (job.printDialog()) {
         try  { 
//                jEditorPane1.setForeground(java.awt.Color.red);                
                job.print();
                System.out.println("Good We can now print");
 //               same1.show();
                
         } catch (java.lang.Exception e){
                    System.out.println("We still can't print");
         }
     }        // Add your handling code here:
    }//GEN-LAST:event_printActionPerformed

    private void createActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createActionPerformed
     javax.swing.text.Document textDocument = txtPane.getDocument();
      
   
     txtPane.setEditable(true);
     java.lang.String[] str = {"Mary", "Judy", "Maureen"};
     java.util.Calendar cal = java.util.Calendar.getInstance();
     java.util.Date date_now = cal.getTime();
     java.lang.String str_date = date_now.toString();
     
  
                    
        this.initStylesForTextPane(txtPane);
        try {
        textDocument.insertString(textDocument.getLength(), newline + "Governors' Camp", txtPane.getStyle("bold"));
        textDocument.insertString(textDocument.getLength(), newline + "Share Refunds", txtPane.getStyle("bold"));
        textDocument.insertString(textDocument.getLength(), tab+tab+tab, txtPane.getStyle("bold"));
        textDocument.insertString(textDocument.getLength(), tab + "Printed on : "+str_date, txtPane.getStyle("bold"));
        textDocument.insertString(textDocument.getLength(), newline, txtPane.getStyle("bold"));
        textDocument.insertString(textDocument.getLength(), newline + "Gl_Code", txtPane.getStyle("bold"));        
        textDocument.insertString(textDocument.getLength(), tab, txtPane.getStyle("bold"));
        textDocument.insertString(textDocument.getLength(), "Activity Code",txtPane.getStyle("bold"));
        textDocument.insertString(textDocument.getLength(), tab, txtPane.getStyle("bold"));        
        textDocument.insertString(textDocument.getLength(), " Description", txtPane.getStyle("bold"));
        textDocument.insertString(textDocument.getLength(), tab+tab, txtPane.getStyle("bold"));        
        textDocument.insertString(textDocument.getLength(), "Debit.", txtPane.getStyle("bold"));
        textDocument.insertString(textDocument.getLength(), tab, txtPane.getStyle("bold"));        
        textDocument.insertString(textDocument.getLength(), "Credit", txtPane.getStyle("bold"));
        textDocument.insertString(textDocument.getLength(), newline, txtPane.getStyle("bold"));        
       // textDocument.insertString(textDocument.getLength(), "Amount (KSh)"+newline, txtPane.getStyle("bold"));
                textDocument.insertString(textDocument.getLength(), "--------------------------------------------------------------------------------------------------------------------", txtPane.getStyle("bold"));
        
        } catch (javax.swing.text.BadLocationException ex){}
 
        
        
        try {
        java.lang.Class.forName("org.postgresql.Driver");
        }catch(java.lang.ClassNotFoundException cl){}
        try {
            java.sql.Connection conn = java.sql.DriverManager.getConnection("jdbc:postgresql://localhost:5432/sako", "postgres", "pilsiner");
            java.sql.Statement stmt = conn.createStatement();
            //java.sql.ResultSet rs = stmt.executeQuery("select * from branches");
         // java.sql.ResultSet rs = stmt.executeQuery("select company_name,address,town,tel1,tel2 from company_profile");
        
             java.sql.ResultSet rs = stmt.executeQuery("select gl_code,code,description,debit,credit from cash_book");
        
            // int i = 0;
             
             
             while (rs.next()){
   try {
          
        textDocument.insertString(textDocument.getLength(), newline + rs.getString(1), txtPane.getStyle("normal"));
        textDocument.insertString(textDocument.getLength(),  tab, txtPane.getStyle("normal"));
      //  textDocument.getText(textDocument.getLength(), tab, txtPane.getStyle("normal"));        
        textDocument.insertString(textDocument.getLength(), rs.getString(2),txtPane.getStyle("normal"));
        textDocument.insertString(textDocument.getLength(), tab, txtPane.getStyle("normal"));
        textDocument.insertString(textDocument.getLength(), rs.getString(3), txtPane.getStyle("normal"));
        textDocument.insertString(textDocument.getLength(),  tab+tab, txtPane.getStyle("normal"));        
        textDocument.insertString(textDocument.getLength(), rs.getString(4), txtPane.getStyle("normal"));
        textDocument.insertString(textDocument.getLength(), tab, txtPane.getStyle("normal"));        
        textDocument.insertString(textDocument.getLength(), rs.getString(5), txtPane.getStyle("normal"));
        textDocument.insertString(textDocument.getLength(), newline, txtPane.getStyle("normal"));        
     //   textDocument.insertString(textDocument.getLength(), rs.getString(6)+newline, txtPane.getStyle("normal"));
//        textDocument.
                
        } catch (javax.swing.text.BadLocationException ex){}
            }
              
        }catch (java.sql.SQLException sql){
        System.out.println(sql.getMessage()); 
        }
        
               try {
        java.lang.Class.forName("org.postgresql.Driver");
         }catch(java.lang.ClassNotFoundException cl){}
        try {
            java.sql.Connection conn = java.sql.DriverManager.getConnection("jdbc:postgresql://localhost:5432/sako", "postgres", "pilsiner");
            java.sql.Statement stmt = conn.createStatement();
            //java.sql.ResultSet rs = stmt.executeQuery("select * from branches");
           
             java.sql.ResultSet rs = stmt.executeQuery("select sum(credit),sum(debit) from cash_book");
            while (rs.next()){
            try {
               textDocument.insertString(textDocument.getLength(), "------------------------------------------------------------------------------------------------------------------", txtPane.getStyle("bold"));
               textDocument.insertString(textDocument.getLength(),newline+tab+tab+tab+tab+tab+ rs.getString(1)+newline, txtPane.getStyle("bold"));
               textDocument.insertString(textDocument.getLength(),tab+ rs.getString(1)+newline, txtPane.getStyle("bold"));
               textDocument.insertString(textDocument.getLength(), "---------------------------------------------------------------------------------------------------------------------", txtPane.getStyle("bold"));

            } catch (javax.swing.text.BadLocationException ex){}
            }
        }catch (java.sql.SQLException sql){}

      
        // Add your handling code here:
    }//GEN-LAST:event_createActionPerformed

    private void txtPaneComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_txtPaneComponentShown
    javax.swing.text.Document textDocument = txtPane.getDocument();
 
    
    this.initStylesForTextPane(txtPane);
    
    
        try {
        textDocument.insertString(0, "This is my sister", txtPane.getStyle("bold")); 
        } catch (javax.swing.text.BadLocationException ex){}// Add your handling code here:
    }//GEN-LAST:event_txtPaneComponentShown

    private void saveasmnitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveasmnitActionPerformed
/*        javax.swing.JFileChooser fileChooser = new javax.swing.JFileChooser();
//        javax.swing.filechooser.FileFilter fileFilter = new javax.swing.filechooser.FileFilter("sql","txt","All");
//        fileChooser.setFileFilter(fileFilter);
        int retvalue = fileChooser.showDialog(this, "Save As.."); */
                javax.swing.JFileChooser fileChooser = new javax.swing.JFileChooser();
        int retvalue = fileChooser.showSaveDialog(Reporter.this);
           java.lang.String urlString = null;
 //      java.io.BufferedWriter bwriter = new java.io.BufferedWriter();
   if (retvalue == javax.swing.JFileChooser.APPROVE_OPTION){
   //    fileChooser.setSelectedFile(file
 /*     try {
        java.net.URL url = txtPane.getPage();
     //   txtPane.Write(writer);
        
      } catch(java.net.MalformedURLException mal){}

        java.io.File filetmp = new java.io.File(url);*/
      java.io.File fileselect = fileChooser.getSelectedFile();
      
      
      try {
          java.io.FileOutputStream fileout = new java.io.FileOutputStream(fileselect);
         
          try {
              java.io.ObjectOutputStream outstream = new java.io.ObjectOutputStream(fileout);
          
                try {
                    outstream.writeObject(txtPane.getDocument().getText(0, txtDocument.getLength()));
                } catch(javax.swing.text.BadLocationException be) {
                    System.out.println(be.getMessage());
                }
                
          } catch(java.io.IOException io) {
              System.out.println("We cannot get the file written to.");
              System.out.println(io.getMessage());
          }
        //  while ((c = outstream.outstream.write(c);
          
   //       while (c
    //      txtPane.write(new java.io.FileOutputStream(fileselect));
      } catch(java.io.FileNotFoundException fnf){
          System.out.println("Can't find the requested file!");
      }
      
      
   //   urlString = "file:///root/"+fileselect;
    //  fileChooser.setSelectedFile(fileselect);
   }
/*   try {
    pageUrl = new java.net.URL(urlString);
  //  fileChooser.setSelectedFile(file
        try {
            
         
 //        txtPane.setMargin(insets);   
  //       txtPane.setPage(pageUrl);
 //        txtPane.setPage(pageUrl);
//         txtDocument = txtPane.getStyledDocument();
//         txtDocument.addUndoableEditListener(new MyUndoableEditListener());
        //txtPane.addCaretListener(caretListenerLabel);
//         txtDocument.addDocumentListener(new MyDocumentListener());

      //   initDocument();
        //txtPane.setDocument(txtPane.setPage(pageUrl));
        //txtDocument = (javax.swing.text.StyledDocument)txtPane.getDocument();
    } catch(java.io.IOException ioex){
        System.out.println("This page cannot be fetched");
        ioex.printStackTrace();
        }
   }catch (java.net.MalformedURLException mal){
       System.out.println("The page cannot be found");
       mal.printStackTrace();
   }
   }*/// Add your handling code here:// Add your handling code here:
    }//GEN-LAST:event_saveasmnitActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        javax.swing.JFileChooser fileChooser = new javax.swing.JFileChooser();
        int retvalue = fileChooser.showOpenDialog(this);      // Add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    private void savemnitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_savemnitActionPerformed
        javax.swing.JFileChooser fileChooser = new javax.swing.JFileChooser();
        int retvalue = fileChooser.showSaveDialog(Reporter.this);
           java.lang.String urlString = null;
 //      java.io.BufferedWriter bwriter = new java.io.BufferedWriter();
   if (retvalue == javax.swing.JFileChooser.APPROVE_OPTION){
   //    fileChooser.setSelectedFile(file
 /*     try {
        java.net.URL url = txtPane.getPage();
     //   txtPane.Write(writer);
        
      } catch(java.net.MalformedURLException mal){}

        java.io.File filetmp = new java.io.File(url);*/
      java.io.File fileselect = fileChooser.getSelectedFile();
      
      
      try {
          java.io.FileOutputStream fileout = new java.io.FileOutputStream(fileselect);
         
          try {
              java.io.ObjectOutputStream outstream = new java.io.ObjectOutputStream(fileout);
          
                try {
                    outstream.writeObject(txtPane.getDocument().getText(0, txtDocument.getLength()));
                } catch(javax.swing.text.BadLocationException be) {
                    System.out.println(be.getMessage());
                }
                
          } catch(java.io.IOException io) {
              System.out.println("We cannot get the file written to.");
              System.out.println(io.getMessage());
          }
        //  while ((c = outstream.outstream.write(c);
          
   //       while (c
    //      txtPane.write(new java.io.FileOutputStream(fileselect));
      } catch(java.io.FileNotFoundException fnf){
          System.out.println("Can't find the requested file!");
      }
      
      
   //   urlString = "file:///root/"+fileselect;
    //  fileChooser.setSelectedFile(fileselect);
   }
/*   try {
    pageUrl = new java.net.URL(urlString);
  //  fileChooser.setSelectedFile(file
        try {
            
         
 //        txtPane.setMargin(insets);   
  //       txtPane.setPage(pageUrl);
 //        txtPane.setPage(pageUrl);
//         txtDocument = txtPane.getStyledDocument();
//         txtDocument.addUndoableEditListener(new MyUndoableEditListener());
        //txtPane.addCaretListener(caretListenerLabel);
//         txtDocument.addDocumentListener(new MyDocumentListener());

      //   initDocument();
        //txtPane.setDocument(txtPane.setPage(pageUrl));
        //txtDocument = (javax.swing.text.StyledDocument)txtPane.getDocument();
    } catch(java.io.IOException ioex){
        System.out.println("This page cannot be fetched");
        ioex.printStackTrace();
        }
   }catch (java.net.MalformedURLException mal){
       System.out.println("The page cannot be found");
       mal.printStackTrace();
   }
   }*/// Add your handling code here:
    }//GEN-LAST:event_savemnitActionPerformed

    private void openActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openActionPerformed

        
        javax.swing.JFileChooser fileChooser = new javax.swing.JFileChooser();
   javax.swing.filechooser.FileFilter fileFilter = fileChooser.getFileFilter();
   
   
   int retvalue = fileChooser.showOpenDialog(this);
  // java.lang.String urlString = "file:///windows/setupxlg.txt";
   java.awt.Insets insets = new java.awt.Insets(100,100,100,100);
   java.lang.String urlString = null;
   if (retvalue == javax.swing.JFileChooser.APPROVE_OPTION){
       java.io.File fileselect = fileChooser.getSelectedFile();
       urlString = "file://"+fileselect.getPath();
   
   try {
    pageUrl = new java.net.URL(urlString);
        try {
         
   
  //       txtPane.setPage(pageUrl);
         txtPane.setPage(pageUrl);       
         txtPane.setMargin(insets);
                 txtPane.setEditable(false);
         
         txtDocument = txtPane.getStyledDocument();
         txtDocument.addUndoableEditListener(new MyUndoableEditListener());
        //txtPane.addCaretListener(caretListenerLabel);
         txtDocument.addDocumentListener(new MyDocumentListener());

      //   initDocument();
        //txtPane.setDocument(txtPane.setPage(pageUrl));
        //txtDocument = (javax.swing.text.StyledDocument)txtPane.getDocument();
    } catch(java.io.IOException ioex){
        System.out.println("This page cannot be fetched");
        ioex.printStackTrace();
        }
   }catch (java.net.MalformedURLException mal){
       System.out.println("The page cannot be found");
       mal.printStackTrace();
   }
       
    
     
   }
   
   
   
   // Add your handling code here:
    }//GEN-LAST:event_openActionPerformed

    private void undomnitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_undomnitActionPerformed

        
        
        
        /*  javax.swing.JTable tablex = new javax.swing.JTable();
    txtDocument.insertString(txtDocument.getLength(), "This is the initial string"); */// Add your handling code here:
    }//GEN-LAST:event_undomnitActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
    javax.swing.text.Document doc = txtPane.getDocument();
    String oldChar = txtPane.getSelectedText();
    
    boldText(oldChar, txtPane);
    // Add your handling code here:
    }//GEN-LAST:event_jButton5ActionPerformed

    private void exitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitActionPerformed
    System.exit(0);        // Add your handling code here:
    }//GEN-LAST:event_exitActionPerformed
    
    /** Exit the Application */
    private void exitForm(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_exitForm
        System.exit(0);
    }//GEN-LAST:event_exitForm
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        
        new Reporter().show();
    }
    
    protected void initStylesForTextPane(javax.swing.JTextPane textPane) {
        javax.swing.text.Style def = javax.swing.text.StyleContext.getDefaultStyleContext().
                                                                   getStyle(javax.swing.text.StyleContext.DEFAULT_STYLE);
        javax.swing.text.Style regular = textPane.addStyle("regular", def);
     //   javax.swing.text.StyleConstants.setFontFamily(def, "SansSerif");
        javax.swing.text.StyleConstants.setFontFamily(def, "Monospace");
        
        
        javax.swing.text.Style s = textPane.addStyle("italic", regular);
        javax.swing.text.StyleConstants.setItalic(s, true);

        s = textPane.addStyle("bold", regular);
        javax.swing.text.StyleConstants.setBold(s, true);
        javax.swing.text.StyleConstants.setFontSize(s, 8);
        
        s = textPane.addStyle("alignctr", regular);
        javax.swing.text.StyleConstants.setAlignment(s, javax.swing.text.StyleConstants.ALIGN_CENTER);
        
        s = textPane.addStyle("alignleft", regular);
        javax.swing.text.StyleConstants.setAlignment(s, javax.swing.text.StyleConstants.ALIGN_LEFT);
        
        s = textPane.addStyle("alignright", regular);
        javax.swing.text.StyleConstants.setAlignment(s, javax.swing.text.StyleConstants.ALIGN_RIGHT);
        
        s = textPane.addStyle("justified", regular);
        javax.swing.text.StyleConstants.setAlignment(s, javax.swing.text.StyleConstants.ALIGN_JUSTIFIED);
        
             
        
        
         s = textPane.addStyle("normal", regular);
        javax.swing.text.StyleConstants.setFontSize(s, 10);
        
        s = textPane.addStyle("large", regular);
        javax.swing.text.StyleConstants.setFontSize(s, 10);
        
        s = textPane.addStyle("small", regular);
        javax.swing.text.StyleConstants.setFontSize(s, 7);
        
        
        s = textPane.addStyle("underline", regular);
        javax.swing.text.StyleConstants.setUnderline(s, true);
        
        s = textPane.addStyle("centred", regular);
        javax.swing.text.StyleConstants.setAlignment(s, javax.swing.text.StyleConstants.ALIGN_CENTER);
        
        
    }    
        private void createActionTable(javax.swing.text.JTextComponent textComponent) {
        actions = new java.util.Hashtable();
        javax.swing.Action[] actionsArray = textComponent.getActions();
        for (int i = 0; i < actionsArray.length; i++) {
            javax.swing.Action a = actionsArray[i];
            actions.put(a.getValue(javax.swing.Action.NAME), a);
        }
    }
 
    public void boldText(java.lang.String oldChar, javax.swing.JTextPane textPane) {
       initStylesForTextPane(textPane);
        javax.swing.text.Document doc = textPane.getDocument();
       try  {
          doc.insertString(doc.getLength(), oldChar, textPane.getStyle(initStyles[5]));
          java.lang.String newChar = doc.getText(0, doc.getLength());
          System.out.println(newChar);
       } catch (javax.swing.text.BadLocationException blexp){}
        
       //replaceSelection();
        
    }
    protected javax.swing.JMenu  createEditMenu(){
        createActionTable(txtPane);
        javax.swing.JMenu menu = new javax.swing.JMenu();
        menu.setText("Edit");
        
        undoAction = new UndoAction();
        menu.add(undoAction);
       
        
        redoAction = new RedoAction();
        menu.add(redoAction);
        
        
        menu.addSeparator();
        
        
        menu.add(getActionByName(javax.swing.text.DefaultEditorKit.cutAction));
        menu.add(getActionByName(javax.swing.text.DefaultEditorKit.copyAction));
        menu.add(getActionByName(javax.swing.text.DefaultEditorKit.pasteAction));
        
        menu.addSeparator();
        
        menu.add(getActionByName(javax.swing.text.DefaultEditorKit.selectAllAction));
        return menu;
    }   


    private javax.swing.Action getActionByName(java.lang.String name) {
        return (javax.swing.Action)(actions.get(name));
    }
    
    
    public class UndoAction extends javax.swing.AbstractAction {
  //      createActionTable(txtPane);        
        public UndoAction(){
            super("Undo");
            setEnabled(false);
        }
        
        public void actionPerformed(java.awt.event.ActionEvent actionEvent) {
            try {
                undo.undo();
            } catch (javax.swing.undo.CannotUndoException ex){
                System.out.println("Unable to undo : "+ ex);
                ex.printStackTrace();
            }
            updateUndoState();
            redoAction.updateRedoState();
        }
        protected void updateUndoState(){
            if (undo.canUndo()){
                setEnabled(true);
                putValue(javax.swing.Action.NAME, undo.getUndoPresentationName());
            }else {
                setEnabled(false);
                putValue(javax.swing.Action.NAME, "Undo");
            }
        }
        
    }
    
    public class RedoAction extends javax.swing.AbstractAction {
//        createActionTable(txtPane);        
        public RedoAction(){
            super("Redo");
            setEnabled(false);
        }
       
        public void actionPerformed(java.awt.event.ActionEvent actionEvent) {
            try {
                undo.redo();
            } catch (javax.swing.undo.CannotRedoException ex){
                System.out.println("Unable to Redo : "+ ex);
                ex.printStackTrace();
            }
            updateRedoState();
            undoAction.updateUndoState();
        }
        protected void updateRedoState(){
            if (undo.canRedo()){
                setEnabled(true);
                putValue(javax.swing.Action.NAME, undo.getRedoPresentationName());
            }else {
                setEnabled(false);
                putValue(javax.swing.Action.NAME, "Redo");
            }
        }
        
    }
      //Create the style menu.
    protected javax.swing.JMenu createStyleMenu() {
        javax.swing.JMenu menu = new javax.swing.JMenu("Style");

        javax.swing.Action action = new javax.swing.text.StyledEditorKit.BoldAction();
        action.putValue(javax.swing.Action.NAME, "Bold");
        menu.add(action);

        action = new javax.swing.text.StyledEditorKit.ItalicAction();
        action.putValue(javax.swing.Action.NAME, "Italic");
        menu.add(action);

        action = new javax.swing.text.StyledEditorKit.UnderlineAction();
        action.putValue(javax.swing.Action.NAME, "Underline");
        menu.add(action);

        menu.addSeparator();
        
        menu.add(new javax.swing.text.StyledEditorKit.FontSizeAction("8", 8));
//        menu.add(new javax.swing.text.StyledEditorKit.FontSizeAction("9", 9));
        menu.add(new javax.swing.text.StyledEditorKit.FontSizeAction("10", 10));
//        menu.add(new javax.swing.text.StyledEditorKit.FontSizeAction("11", 11));
        menu.add(new javax.swing.text.StyledEditorKit.FontSizeAction("12", 12));
//        menu.add(new javax.swing.text.StyledEditorKit.FontSizeAction("13", 13));
        menu.add(new javax.swing.text.StyledEditorKit.FontSizeAction("14", 14));
//        menu.add(new javax.swing.text.StyledEditorKit.FontSizeAction("", 17));
        menu.add(new javax.swing.text.StyledEditorKit.FontSizeAction("16", 16));
        menu.add(new javax.swing.text.StyledEditorKit.FontSizeAction("18", 18));
        
        
        
        menu.addSeparator();

        menu.add(new javax.swing.text.StyledEditorKit.FontFamilyAction("Serif",
                                                      "Serif"));
        menu.add(new javax.swing.text.StyledEditorKit.FontFamilyAction("SansSerif",
                                                      "SansSerif"));

        menu.addSeparator();

        menu.add(new javax.swing.text.StyledEditorKit.ForegroundAction("Red",
                                                      java.awt.Color.red));
        menu.add(new javax.swing.text.StyledEditorKit.ForegroundAction("Green",
                                                      java.awt.Color.green));
        menu.add(new javax.swing.text.StyledEditorKit.ForegroundAction("Blue",
                                                      java.awt.Color.blue));
        menu.add(new javax.swing.text.StyledEditorKit.ForegroundAction("Black",
                                                      java.awt.Color.black));

        return menu;
    }
    //This listens for and reports caret movements.
    protected class CaretListenerLabel extends javax.swing.JLabel implements javax.swing.event.CaretListener {
        public CaretListenerLabel (java.lang.String label) {
            super("");
        }

        public void caretUpdate(javax.swing.event.CaretEvent e) {
            //Get the location in the text.
            int dot = e.getDot();
            int mark = e.getMark();
            if (dot == mark) {  // no selection 
                try {
                    java.awt.Rectangle caretCoords = txtPane.modelToView(dot);
                    //Convert it to view coordinates.
                    setText("caret: text position: " + dot
                            + ", view location = ["
                            + caretCoords.x + ", "
                            + caretCoords.y + "]"
                            + newline);
                } catch (javax.swing.text.BadLocationException ble) {
                    setText("caret: text position: " + dot + newline);
                }
            } else if (dot < mark) {
                setText("selection from: " + dot
                        + " to " + mark + newline);
            } else {
                setText("selection from: " + mark
                        + " to " + dot + newline);
            }
        }
        
 /*       public void caretUpdate(javax.swing.event.CaretEvent caretEvent) {
        }
*/  ///      
    }

    //This one listens for edits that can be undone.
    protected class MyUndoableEditListener
                    implements javax.swing.event.UndoableEditListener {
        public void undoableEditHappened(javax.swing.event.UndoableEditEvent e) {
            //Remember the edit and update the menus.
            undo.addEdit(e.getEdit());
            undoAction.updateUndoState();
            redoAction.updateRedoState();
        }
    }

    //And this one listens for any changes to the document.
    protected class MyDocumentListener
                    implements javax.swing.event.DocumentListener {
        public void insertUpdate(javax.swing.event.DocumentEvent e) {
            displayEditInfo(e);
        }
        public void removeUpdate(javax.swing.event.DocumentEvent e) {
            displayEditInfo(e);
        }
        public void changedUpdate(javax.swing.event.DocumentEvent e) {
            displayEditInfo(e);
            
        }
        private void displayEditInfo(javax.swing.event.DocumentEvent e) {
            javax.swing.text.Document doc = (javax.swing.text.Document)e.getDocument();
            int changeLength = e.getLength();
      /*    changeLog.append(e.getType().toString() + ": " +
                changeLength + " character" +
                ((changeLength == 1) ? ". " : "s. ") +
                " Text length = " + doc.getLength() + "." + newline);
        */}
        
    }
    //Add a couple of emacs key bindings to the key map for navigation.
    protected void addKeymapBindings() {
        //Add a new key map to the keymap hierarchy.
        javax.swing.text.Keymap keymap = txtPane.addKeymap("MyEmacsBindings",
                                           txtPane.getKeymap());

        //Ctrl-b to go backward one character
        javax.swing.Action action = getActionByName(javax.swing.text.DefaultEditorKit.backwardAction);
        javax.swing.KeyStroke key = javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_B, java.awt.Event.CTRL_MASK);
        keymap.addActionForKeyStroke(key, action);

        //Ctrl-f to go forward one character
        action = getActionByName(javax.swing.text.DefaultEditorKit.forwardAction);
        key = javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F, java.awt.Event.CTRL_MASK);
        keymap.addActionForKeyStroke(key, action);

       //Ctrl-p to go up one line
        action = getActionByName(javax.swing.text.DefaultEditorKit.upAction);
        key = javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_P, java.awt.Event.CTRL_MASK);
        keymap.addActionForKeyStroke(key, action);

        //Ctrl-n to go down one line
        action = getActionByName(javax.swing.text.DefaultEditorKit.downAction);
        key = javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.Event.CTRL_MASK);
        keymap.addActionForKeyStroke(key, action);

        txtPane.setKeymap(keymap);
    }

  //  protected void initDocument() {
  //      txtPane.setDocument(txtPane.getStyledDocument());
  /*      java.lang.String initString[] = {""};
        try {
            txtDocument.insertString(txtDocument.getLength(), initString[0] + newline);
        } catch (javax.swing.text.BadLocationException ble){}
        
    *///}
 /*   public java.io.BufferedInputStream write(java.io.Writer writer){
        java.io.BufferedInputStream binputstream = (java.io.BufferedInputStream);
        return binputstream;   
    }*/
      public int print(java.awt.Graphics g, java.awt.print.PageFormat pf, int pageIndex) throws java.awt.print.PrinterException {
         java.awt.Graphics2D g2d = (java.awt.Graphics2D) g;       
       // java.awt.Graphics gr = jEditorPane1.getGraphics();
       // g = gr;
        javax.swing.text.Document printdoc = txtPane.getDocument();

        int fontHeight = g2d.getFontMetrics().getHeight();
        int fontDesent = g2d.getFontMetrics().getDescent();
        double pageHeight = pf.getImageableHeight();
        double pageWidth = pf.getImageableWidth();
        double scale = 1;
        int totalNumPages = (int)java.lang.Math.ceil(txtPane.getSize().getHeight() / pageHeight);
        
        
        
        if (pageIndex >= totalNumPages ) return java.awt.print.Printable.NO_SUCH_PAGE;

        g2d.setPaint(pnt);
        g2d.setFont(fnt);
        g2d.translate(pf.getImageableX(), pf.getImageableY());
        g2d.drawString("Page: "+(pageIndex + 1)+" of "+totalNumPages, (int)pageWidth/2-35, (int)(pageHeight+fontHeight-fontDesent));
        g2d.translate(0d,0d);
        g2d.translate(0d,-pageIndex*pageHeight);
        g2d.setClip(0,(int)pageHeight*pageIndex,(int)pageWidth,(int)pageHeight);
        //g2d.scale(scale,scale);
        //g2d.create(1,1,500,400);
        //g2d.draw3DRect(3,3,300,200,true);
        txtPane.paint(g2d);
        return java.awt.print.Printable.PAGE_EXISTS;
        
        
    }    
  


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private org.netbeans.lib.sql.pool.PooledConnectionSource pooledConnectionSource2;
    private javax.swing.JMenu toolsmn;
    private javax.swing.JMenuItem create;
    private javax.swing.JButton jButton7;
    private javax.swing.JMenuItem saveasmnit;
    private javax.swing.JButton jButton6;
    private javax.swing.JSeparator jSeparator5;
    private javax.swing.JButton jButton5;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JButton jButton4;
    private javax.swing.JTextPane txtPane;
    private javax.swing.JMenuItem close;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JButton jButton3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JButton jButton2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JButton jButton1;
    private javax.swing.JMenuItem transactionslsmnitmnit;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JMenuItem pgsetupmnit;
    private javax.swing.JMenuItem undomnit;
    private javax.swing.JMenu styleMenu;
    private javax.swing.JMenuItem print;
    private javax.swing.JMenuItem acctdetmnit;
    private javax.swing.JMenu editmn;
    private javax.swing.JMenu helpmn;
    private javax.swing.JMenuItem pastemnit;
    private javax.swing.JMenuItem exit;
    private javax.swing.JMenu filemn;
    private javax.swing.JMenuItem delmnit;
    private javax.swing.JMenuItem previewmnit;
    private org.netbeans.lib.sql.NBCachedRowSet nBCachedRowSet1;
    private javax.swing.JMenuItem cutmnit;
    private javax.swing.JMenuItem redomnit;
    private javax.swing.JMenuItem open;
    private javax.swing.JMenu editMenu;
    private javax.swing.JMenuItem savemnit;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem findmnit;
    private javax.swing.JMenuItem copymnit;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JMenuItem replacemnit;
    // End of variables declaration//GEN-END:variables

    static {
    }    
    
}
