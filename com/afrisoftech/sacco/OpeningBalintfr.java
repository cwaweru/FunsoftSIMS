/*
 * loanpymntintfr.java
 *
 * Created on August 13, 2002, 1:09 PM
 */

package com.afrisoftech.sacco;

/**
 *
 * @author  root
 */
public class OpeningBalintfr extends javax.swing.JInternalFrame {
     
    private  javax.swing.JComboBox cmbox1;
     private  javax.swing.JComboBox cmbox;
    /** Creates new form loanpymntintfr */
       java.sql.Connection connectDB = null;
        javax.swing.JSpinner beginDateSpinner = null;
    
      javax.swing.JSpinner endDateSpinner = null;
  
    org.netbeans.lib.sql.pool.PooledConnectionSource pConnDB = null;
  
    
    public OpeningBalintfr(java.sql.Connection connDb, org.netbeans.lib.sql.pool.PooledConnectionSource pconnDB) {
        
        connectDB = connDb;
        
        pConnDB = pconnDB;
        
        initComponents();
    }   
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        java.awt.GridBagConstraints gridBagConstraints;

        try {
            crset1 = new org.netbeans.lib.sql.NBCachedRowSet();
        } catch (java.sql.SQLException e1) {
            e1.printStackTrace();
        }
        try {
            crset2 = new org.netbeans.lib.sql.NBCachedRowSet();
        } catch (java.sql.SQLException e1) {
            e1.printStackTrace();
        }
        try {
            crset3 = new org.netbeans.lib.sql.NBCachedRowSet();
        } catch (java.sql.SQLException e1) {
            e1.printStackTrace();
        }
        try {
            crset4 = new org.netbeans.lib.sql.NBCachedRowSet();
        } catch (java.sql.SQLException e1) {
            e1.printStackTrace();
        }
        try {
            crset5 = new org.netbeans.lib.sql.NBCachedRowSet();
        } catch (java.sql.SQLException e1) {
            e1.printStackTrace();
        }
        try {
            crset6 = new org.netbeans.lib.sql.NBCachedRowSet();
        } catch (java.sql.SQLException e1) {
            e1.printStackTrace();
        }
        try {
            crset21 = new org.netbeans.lib.sql.NBCachedRowSet();
        } catch (java.sql.SQLException e1) {
            e1.printStackTrace();
        }
        buttonGroup1 = new javax.swing.ButtonGroup();
        try {
            crset7 = new org.netbeans.lib.sql.NBCachedRowSet();
        } catch (java.sql.SQLException e1) {
            e1.printStackTrace();
        }
        try {
            crset8 = new org.netbeans.lib.sql.NBCachedRowSet();
        } catch (java.sql.SQLException e1) {
            e1.printStackTrace();
        }
        try  {
            java.lang.Class.forName("org.postgresql.Driver");
            System.out.println("Found driver");
        } catch(java.lang.ClassNotFoundException cnf){
            System.out.println("driver not found");
        }
        jButton1 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jTextField10 = new javax.swing.JTextField();
        jCheckBox3 = new javax.swing.JCheckBox();
        jCheckBox2 = new javax.swing.JCheckBox();
        jCheckBox1 = new javax.swing.JCheckBox();
        jCheckBox4 = new javax.swing.JCheckBox();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jTable12 = new javax.swing.JTable();
        jTable11 = new javax.swing.JTable();
        jTable13 = new javax.swing.JTable();
        jButton5 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();

        crset1.setConnectionSource(pConnDB);
        crset2.setCommand("SELECT table_name FROM table_acc order by table_name");
        crset2.setConnectionSource(pConnDB);
        crset3.setCommand("");
        crset3.setConnectionSource(pConnDB);
        crset4.setCommand("");
        crset4.setConnectionSource(pConnDB);
        crset5.setCommand("");
        crset5.setConnectionSource(pConnDB);
        crset6.setCommand("");
        crset6.setConnectionSource(pConnDB);
        crset21.setCommand("select bank_acc_no from bank_branches");
        crset21.setConnectionSource(pConnDB);
        crset7.setCommand("");
        crset7.setConnectionSource(pConnDB);
        crset8.setConnectionSource(pConnDB);

        getContentPane().setLayout(new java.awt.GridBagLayout());

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Opening Balance");
        setDefaultCloseOperation(javax.swing.WindowConstants.HIDE_ON_CLOSE);
        setVisible(true);
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameActivated(evt);
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
        });

        jButton1.setMnemonic('P');
        jButton1.setText("Post Entries to GL");
        jButton1.setToolTipText("Click here to enter data");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton1MouseClicked(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 13;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(jButton1, gridBagConstraints);

        jButton3.setMnemonic('l');
        jButton3.setText("Clear");
        jButton3.setToolTipText("Click here to clear fields");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton3MouseClicked(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 13;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(jButton3, gridBagConstraints);

        jButton4.setMnemonic('C');
        jButton4.setText("Close");
        jButton4.setToolTipText("Click here to close ");
        jButton4.setSelected(true);
        jButton4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton4MouseClicked(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 13;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(jButton4, gridBagConstraints);

        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 12;
        gridBagConstraints.gridwidth = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(jLabel7, gridBagConstraints);

        jPanel1.setLayout(new java.awt.GridBagLayout());

        jPanel1.setBorder(new javax.swing.border.TitledBorder(" Tick  type of GL Account here"));
        jPanel4.setLayout(new java.awt.GridBagLayout());

        /*  try {
            java.text.DateFormat dateFormat = java.text.DateFormat.getDateInstance(java.text.DateFormat.MEDIUM);
            java.util.Date dateInstance = java.util.Calendar.getInstance().getTime();
            //        java.lang.String dateString2Parse = null;
            //        dateString2Parse = String.valueOf(dateInstance.getDate())+"-"+String.valueOf(dateInstance.getMonth()+1)+"-200"+String.valueOf(dateInstance.getYear()-100);

            java.util.Date formattedDate = dateFormat.parse(dateInstance.toLocaleString());
            System.out.println(dateFormat.format(formattedDate));
            javax.swing.SpinnerDateModel beginDate = new javax.swing.SpinnerDateModel(formattedDate, null, null,java.util.Calendar.DAY_OF_MONTH);
            //   javax.swing.SpinnerDateModel endDate = new javax.swing.SpinnerDateModel(formattedDate, null, null,java.util.Calendar.DAY_OF_MONTH);

            beginDateSpinner = new javax.swing.JSpinner(beginDate);
            //     endDateSpinner = new javax.swing.JSpinner(endDate);

            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 2;
            gridBagConstraints.gridy = 0;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 20);
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            jPanel4.add(beginDateSpinner, gridBagConstraints);

        } catch(java.text.ParseException parseExec) {

            javax.swing.JOptionPane.showMessageDialog(new javax.swing.JFrame(), parseExec.getMessage());

        }
        */
        jPanel4.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jTextField10.setFocusable(false);
        jTextField10.setMinimumSize(new java.awt.Dimension(0, 0));
        jTextField10.setPreferredSize(new java.awt.Dimension(0, 0));
        jTextField10.setEnabled(false);
        jTextField10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField10ActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 1;
        jPanel4.add(jTextField10, gridBagConstraints);

        jCheckBox3.setText("Other GL Accounts");
        buttonGroup1.add(jCheckBox3);
        jCheckBox3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox3ActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel4.add(jCheckBox3, gridBagConstraints);

        jCheckBox2.setText("Loans");
        buttonGroup1.add(jCheckBox2);
        jCheckBox2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox2ActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel4.add(jCheckBox2, gridBagConstraints);

        jCheckBox1.setText("Shares");
        buttonGroup1.add(jCheckBox1);
        jCheckBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox1ActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel4.add(jCheckBox1, gridBagConstraints);

        jCheckBox4.setText("Cashbook");
        buttonGroup1.add(jCheckBox4);
        jCheckBox4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox4ActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel4.add(jCheckBox4, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        jPanel1.add(jPanel4, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 6;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        getContentPane().add(jPanel1, gridBagConstraints);

        jPanel2.setLayout(new java.awt.GridBagLayout());

        jPanel2.setBorder(new javax.swing.border.TitledBorder("Select Accounts here"));
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Account", "Member No.", "Debit", "Credit", "Member Name", "Loan Acc. No.", "Monthly Interest", "Monthly Installments", "Gl Code"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                true, true, true, true, false, true, true, true, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        jTable1.setDragEnabled(true);
        jTable1.setShowHorizontalLines(false);
        jTable1.setSurrendersFocusOnKeystroke(true);
        jTable1.setDebugGraphicsOptions(javax.swing.DebugGraphics.NONE_OPTION);

        /*   cmbox.setModel(new org.netbeans.lib.sql.models.ComboBoxModel (crset3, "activity_code", null, null, null));
        //javax.swing.table.TableColumn s = this.jTable1.getColumnModel().getColumn(0);
        javax.swing.table.TableColumn s = this.jTable1.getColumn("GL Code");
        s.setCellEditor(new javax.swing.DefaultCellEditor(cmbox));
        cmbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmboxActionPerformed(evt);
            }
        });
        */
        jTable1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTable1KeyReleased(evt);
            }
        });

        jScrollPane1.setViewportView(jTable1);

        jTable12.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Account", "Debit", "Credit", "Gl Code"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                true, true, true, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable12.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        jTable12.setDragEnabled(true);
        jTable12.setShowHorizontalLines(false);
        jTable12.setSurrendersFocusOnKeystroke(true);
        jTable12.setDebugGraphicsOptions(javax.swing.DebugGraphics.NONE_OPTION);

        /*   cmbox.setModel(new org.netbeans.lib.sql.models.ComboBoxModel (crset3, "activity_code", null, null, null));
        //javax.swing.table.TableColumn s = this.jTable1.getColumnModel().getColumn(0);
        javax.swing.table.TableColumn s = this.jTable1.getColumn("GL Code");
        s.setCellEditor(new javax.swing.DefaultCellEditor(cmbox));
        cmbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmboxActionPerformed(evt);
            }
        });
        */
        jScrollPane1.setViewportView(jTable12);

        jTable11.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Account", "Member No.", "Debit", "Credit", "Member Name", "Gl Code"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                true, true, true, true, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable11.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        jTable11.setDragEnabled(true);
        jTable11.setShowHorizontalLines(false);
        jTable11.setSurrendersFocusOnKeystroke(true);
        jTable11.setDebugGraphicsOptions(javax.swing.DebugGraphics.NONE_OPTION);

        /*   cmbox.setModel(new org.netbeans.lib.sql.models.ComboBoxModel (crset3, "activity_code", null, null, null));
        //javax.swing.table.TableColumn s = this.jTable1.getColumnModel().getColumn(0);
        javax.swing.table.TableColumn s = this.jTable1.getColumn("GL Code");
        s.setCellEditor(new javax.swing.DefaultCellEditor(cmbox));
        cmbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmboxActionPerformed(evt);
            }
        });
        */
        jScrollPane1.setViewportView(jTable11);

        jTable13.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Bank Account", "Debit", "Credit", "Gl Code"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                true, true, true, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable13.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        jTable13.setDragEnabled(true);
        jTable13.setShowHorizontalLines(false);
        jTable13.setSurrendersFocusOnKeystroke(true);
        jTable13.setDebugGraphicsOptions(javax.swing.DebugGraphics.NONE_OPTION);

        /*   cmbox.setModel(new org.netbeans.lib.sql.models.ComboBoxModel (crset3, "activity_code", null, null, null));
        //javax.swing.table.TableColumn s = this.jTable1.getColumnModel().getColumn(0);
        javax.swing.table.TableColumn s = this.jTable1.getColumn("GL Code");
        s.setCellEditor(new javax.swing.DefaultCellEditor(cmbox));
        cmbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmboxActionPerformed(evt);
            }
        });
        */
        jScrollPane1.setViewportView(jTable13);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 6;
        gridBagConstraints.gridheight = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(15, 30, 10, 30);
        jPanel2.add(jScrollPane1, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 6;
        gridBagConstraints.gridheight = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 10.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        getContentPane().add(jPanel2, gridBagConstraints);

        jButton5.setMnemonic('r');
        jButton5.setText("Remove Row");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 13;
        gridBagConstraints.weightx = 1.0;
        getContentPane().add(jButton5, gridBagConstraints);

        jLabel1.setText("Year");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(jLabel1, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(jTextField1, gridBagConstraints);

        setBounds(0, 0, 895, 518);
    }//GEN-END:initComponents

    private void jCheckBox4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox4ActionPerformed
      this.invalidate();   
        this.jTable13.setVisible(true);
         jTable13.grabFocus();
            this.jScrollPane1.setViewportView(jTable13);
            this.validate();
             cmbox1 = new javax.swing.JComboBox();
    
             try {
            
           // crset2.setCommand("select item_description from order_details where order_no = '"+jComboBox1.getSelectedItem()+"'");
            crset5.setConnectionSource(pConnDB);
            //crset2.execute("select distinct drug_prescribed from general_patient_diagnosis where patient_no = '"+jComboBox1.getSelectedItem()+"'");
            crset5.execute("SELECT bank_account_name from bank_branches");
     
            cmbox1.setModel(new org.netbeans.lib.sql.models.ComboBoxModel(crset5, "bank_account_name", null, null,null));
           
            javax.swing.table.TableColumn seditor = this.jTable13.getColumn("Bank Account");
            
            seditor.setCellEditor(new javax.swing.DefaultCellEditor(cmbox1));
            
            cmbox1.addActionListener(new java.awt.event.ActionListener() {
                
           public void actionPerformed(java.awt.event.ActionEvent evt) {
                
                cmbox1ActionPerformed(evt);
            }
        });
        crset3.close();
        } catch(java.sql.SQLException sqlExecp) {
            
            javax.swing.JOptionPane.showMessageDialog(this, sqlExecp.getMessage());
            
        }  // Add your handling code here:
    }//GEN-LAST:event_jCheckBox4ActionPerformed

    private void jCheckBox3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox3ActionPerformed
        this.invalidate();   
        this.jTable12.setVisible(true);
         // this.jTable11.set.hide();
          //  this.jTable1.hide();
        // Add your handling code here:
            jTable12.grabFocus();
            this.jScrollPane1.setViewportView(jTable12);
            this.validate();
             cmbox1 = new javax.swing.JComboBox();
    
             try {
            
           // crset2.setCommand("select item_description from order_details where order_no = '"+jComboBox1.getSelectedItem()+"'");
            crset4.setConnectionSource(pConnDB);
            //crset2.execute("select distinct drug_prescribed from general_patient_diagnosis where patient_no = '"+jComboBox1.getSelectedItem()+"'");
            crset4.execute("SELECT activity from opening_acc_view");
     
            cmbox1.setModel(new org.netbeans.lib.sql.models.ComboBoxModel(crset4, "activity", null, null,null));
           
            javax.swing.table.TableColumn seditor = this.jTable12.getColumn("Account");
            
            seditor.setCellEditor(new javax.swing.DefaultCellEditor(cmbox1));
            
            cmbox1.addActionListener(new java.awt.event.ActionListener() {
                
           public void actionPerformed(java.awt.event.ActionEvent evt) {
                
                cmbox1ActionPerformed(evt);
            }
        });
        crset3.close();
        } catch(java.sql.SQLException sqlExecp) {
            
            javax.swing.JOptionPane.showMessageDialog(this, sqlExecp.getMessage());
            
        }
    }//GEN-LAST:event_jCheckBox3ActionPerformed

    private void jCheckBox2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox2ActionPerformed
        this.invalidate();   
        //this.jTable11.hide();
           // this.jTable12.hide();
        this.jTable1.grabFocus();
            this.jTable1.setVisible(true);
            this.jScrollPane1.setViewportView(jTable1);
            this.validate();
             cmbox1 = new javax.swing.JComboBox();
     cmbox = new javax.swing.JComboBox();
            try {
            
             crset1.setConnectionSource(pConnDB);
            crset1.execute("select activity from loans_view");
            cmbox1.setModel(new org.netbeans.lib.sql.models.ComboBoxModel(crset1, "activity", null, null,null));
           
            javax.swing.table.TableColumn seditor = this.jTable1.getColumn("Account");
            
            seditor.setCellEditor(new javax.swing.DefaultCellEditor(cmbox1));
            
            cmbox1.addActionListener(new java.awt.event.ActionListener() {
                
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                
                cmbox1ActionPerformed(evt);
            }
        });
      //crset1.close();
 } catch(java.sql.SQLException sqlExec) {
            
            javax.swing.JOptionPane.showMessageDialog(this, sqlExec.getMessage());
            
        } 
     
      try {
            
           // crset2.setCommand("select item_description from order_details where order_no = '"+jComboBox1.getSelectedItem()+"'");
            crset8.setConnectionSource(pConnDB);
            //crset2.execute("select distinct drug_prescribed from general_patient_diagnosis where patient_no = '"+jComboBox1.getSelectedItem()+"'");
            crset8.execute("select lpad(m_number,9,0) as m_number from member ORDER BY m_number");// where "+table+" = '"+jComboBox1.getSelectedItem()+"'");
     
            cmbox.setModel(new org.netbeans.lib.sql.models.ComboBoxModel(crset8, "m_number", null, null,null));
           
            javax.swing.table.TableColumn seditor = this.jTable1.getColumn("Member No.");
            
            seditor.setCellEditor(new javax.swing.DefaultCellEditor(cmbox));
            
            cmbox.addActionListener(new java.awt.event.ActionListener() {
                
           public void actionPerformed(java.awt.event.ActionEvent evt) {
                
                cmboxActionPerformed(evt);
            }
        });
        crset5.close();
        } catch(java.sql.SQLException sqlExecp) {
            
            javax.swing.JOptionPane.showMessageDialog(this, sqlExecp.getMessage());
            
        }
        // Add your handling code here:
    }//GEN-LAST:event_jCheckBox2ActionPerformed

    private void jCheckBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox1ActionPerformed
        this.invalidate();
        //this.jTable1.hide();
        //this.jTable12.hide();
        jTable11.grabFocus();
        this.jTable11.setVisible(true);
        this.jScrollPane1.setViewportView(jTable11);
        this.validate();
          cmbox1 = new javax.swing.JComboBox();
           cmbox = new javax.swing.JComboBox();
        try {
            
           // crset2.setCommand("select item_description from order_details where order_no = '"+jComboBox1.getSelectedItem()+"'");
            crset6.setConnectionSource(pConnDB);
            //crset2.execute("select distinct drug_prescribed from general_patient_diagnosis where patient_no = '"+jComboBox1.getSelectedItem()+"'");
            crset6.execute("select activity from shares_view");// where "+table+" = '"+jComboBox1.getSelectedItem()+"'");
     
            cmbox1.setModel(new org.netbeans.lib.sql.models.ComboBoxModel(crset6, "activity", null, null,null));
           
            javax.swing.table.TableColumn seditor = this.jTable11.getColumn("Account");
            
            seditor.setCellEditor(new javax.swing.DefaultCellEditor(cmbox1));
            
            cmbox1.addActionListener(new java.awt.event.ActionListener() {
                
           public void actionPerformed(java.awt.event.ActionEvent evt) {
                
                cmbox1ActionPerformed(evt);
            }
        });
        } catch(java.sql.SQLException sqlExecp) {
            
            javax.swing.JOptionPane.showMessageDialog(this, sqlExecp.getMessage());
            
        }
           
            try {
            
           // crset2.setCommand("select item_description from order_details where order_no = '"+jComboBox1.getSelectedItem()+"'");
            crset7.setConnectionSource(pConnDB);
            //crset2.execute("select distinct drug_prescribed from general_patient_diagnosis where patient_no = '"+jComboBox1.getSelectedItem()+"'");
            crset7.execute("select lpad(m_number,9,0) as m_number from member ORDER BY m_number");// where "+table+" = '"+jComboBox1.getSelectedItem()+"'");
     
            cmbox.setModel(new org.netbeans.lib.sql.models.ComboBoxModel(crset7, "m_number", null, null,null));
           
            javax.swing.table.TableColumn seditor = this.jTable11.getColumn("Member No.");
            
            seditor.setCellEditor(new javax.swing.DefaultCellEditor(cmbox));
            
            cmbox.addActionListener(new java.awt.event.ActionListener() {
                
           public void actionPerformed(java.awt.event.ActionEvent evt) {
                
                cmboxActionPerformed(evt);
            }
        });
        crset5.close();
        } catch(java.sql.SQLException sqlExecp) {
            
            javax.swing.JOptionPane.showMessageDialog(this, sqlExecp.getMessage());
            
        }
        // Add your handling code here:
    }//GEN-LAST:event_jCheckBox1ActionPerformed

    private void jTextField10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField10ActionPerformed
        // Add your handling code here:
    }//GEN-LAST:event_jTextField10ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        for (int k = 0; k < jTable1.getRowCount(); k++ ) {
        for (int r = 0; r < jTable1.getColumnCount(); r++ ) {
         jTable1.getModel().setValueAt(null,k,r);
        }
    } 
       jTextField1.setText("");
        for (int k = 0; k < jTable12.getRowCount(); k++ ) {
        for (int r = 0; r < jTable12.getColumnCount(); r++ ) {
         jTable12.getModel().setValueAt(null,k,r);
        }
    }
        for (int k = 0; k < jTable11.getRowCount(); k++ ) {
        for (int r = 0; r < jTable11.getColumnCount(); r++ ) {
         jTable11.getModel().setValueAt(null,k,r);
        }
    } 
    for (int k = 0; k < jTable13.getRowCount(); k++ ) {
        for (int r = 0; r < jTable13.getColumnCount(); r++ ) {
         jTable13.getModel().setValueAt(null,k,r);
        }
    }       
       // Add your handling code here:
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
          
        int rows2Delete = jTable1.getSelectedRowCount();
        
        int[] selectedRows = jTable1.getSelectedRows();
        
        if (rows2Delete < 1) {
            
            java.awt.Toolkit.getDefaultToolkit().beep();
            
            javax.swing.JOptionPane.showMessageDialog(this, "There are no selected rows to delete!");
            
        } else {
            
            if (rows2Delete > 1) {
                
               for (int i = 0; i < selectedRows.length; i++) { 
        
                  
                   
                javax.swing.table.DefaultTableModel defTableModel = (javax.swing.table.DefaultTableModel)jTable1.getModel();
        
                defTableModel.removeRow(selectedRows[i]);
                
               }
               
            
                
            } else {
                
                javax.swing.table.DefaultTableModel defTableModel = (javax.swing.table.DefaultTableModel)jTable1.getModel();
        
                defTableModel.removeRow(jTable1.getSelectedRow());
                
                
            }
        }
        
        // Add your handling code here:
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jTable1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTable1KeyReleased
        Object floatCol2 =  "00";
       
       if (jTable1.getSelectedColumn() == 2) {
            
            jTable1.setValueAt(floatCol2, jTable1.getSelectedRow(), 3);
         
        }else{
             if (jTable1.getSelectedColumn() == 3) {
             jTable1.setValueAt(floatCol2, jTable1.getSelectedRow(), 2);
             }
        }  // Add your handling code here:
    }//GEN-LAST:event_jTable1KeyReleased
 private void cmbox1ActionPerformed(java.awt.event.ActionEvent evt){
       java.lang.Object selectedGuaran1 = cmbox1.getSelectedItem();
       
       System.out.println("Selected Guarntor : "+selectedGuaran1);
       
       int i = jTable11.getSelectedRow();
       int j = jTable1.getSelectedRow();
       int k = jTable12.getSelectedRow();
       int c = jTable13.getSelectedRow();
       try {
           //    if (jCheckBox1.getText().equals("Shares")){
           
           if (jCheckBox1.isSelected()){
               java.sql.Statement pstmt = connectDB.createStatement();
               java.sql.ResultSet rs = pstmt.executeQuery("select code from activity where activity = '"+selectedGuaran1+"'");
               while (rs.next()){
                   //jTextField4.setText(rs.getObject(1).toString());
                   jTable11.setValueAt(rs.getObject(1),i,5);
               }
           }else{
               if (jCheckBox2.isSelected()){
                   
                   java.sql.Statement pstmt1 = connectDB.createStatement();
                   java.sql.ResultSet rs1 = pstmt1.executeQuery("select code from activity where activity = '"+selectedGuaran1+"'");
                   while (rs1.next()){
                       //jTextField4.setText(rs.getObject(1).toString());
                       jTable1.setValueAt(rs1.getObject(1),j,8);
                   }
                   
               }else{
                   if (jCheckBox4.isSelected()){
                       
                       java.sql.Statement pstmt13 = connectDB.createStatement();
                       java.sql.ResultSet rs13 = pstmt13.executeQuery("select bank_account_code from bank_branches where bank_account_name = '"+selectedGuaran1+"'");
                       while (rs13.next()){
                           //jTextField4.setText(rs.getObject(1).toString());
                           jTable13.setValueAt(rs13.getObject(1),c,3);
                       }
                       
                   }else{
                       java.sql.Statement pstmt11 = connectDB.createStatement();
                       java.sql.ResultSet rs11 = pstmt11.executeQuery("select code from activity where activity = '"+selectedGuaran1+"'");
                       while (rs11.next()){
                           //jTextField4.setText(rs.getObject(1).toString());
                           jTable12.setValueAt(rs11.getObject(1),k,3);
                       }
                   }
                   
               }
           }
       } catch(java.sql.SQLException sqlex){
           System.out.println(sqlex.getMessage());
       }
 }
 // }
 
 
 private void cmboxActionPerformed(java.awt.event.ActionEvent evt){
     java.lang.Object selectedGuaran = cmbox.getSelectedItem();
     
     System.out.println("Selected Guarntor : "+selectedGuaran);
     
     int j = jTable1.getSelectedRow();
     int i = jTable11.getSelectedRow();
     if (selectedGuaran != null) {
         
         try {
             if (jCheckBox1.isSelected()){
                 
                 java.sql.Statement pstmt = connectDB.createStatement();
                 java.sql.ResultSet rst = pstmt.executeQuery("select suffix||' '||first_name||' '||middle_name||' '||last_name from member where m_number = '"+selectedGuaran+"'");
                 while (rst.next()){
                     //jTextField4.setText(rs.getObject(1).toString());
                     jTable11.setValueAt(rst.getObject(1),i,4);
                 }
                 
             }else{
                 
                 if (jCheckBox2.isSelected()){
                     java.sql.Statement pstmt1 = connectDB.createStatement();
                     java.sql.ResultSet rst1 = pstmt1.executeQuery("select suffix||' '||first_name||' '||middle_name||' '||last_name from member where m_number = '"+selectedGuaran+"'");
                     while (rst1.next()){
                         //jTextField4.setText(rs.getObject(1).toString());
                         jTable1.setValueAt(rst1.getObject(1),j,4);
                     }
                 }
             }
         } catch(java.sql.SQLException sqlex){
             System.out.println(sqlex.getMessage());
         }
     }
 }
 
 
    private void formInternalFrameActivated(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameActivated

        /*      
          javax.swing.JComboBox cmbox = new javax.swing.JComboBox();
   //cmbox.setEditable(true);
    cmbox.setModel(new org.netbeans.lib.sql.models.ComboBoxModel (crset1, "description", null, null, null));
    //javax.swing.table.TableColumn s = this.jTable1.getColumnModel().getColumn(0);
   javax.swing.table.TableColumn s = this.jTable1.getColumn("ITEM DESCRIPTION");
    s.setCellEditor(new javax.swing.DefaultCellEditor(cmbox));
 */   

    
 
    
    
    
       // Add your handling code here:
    }//GEN-LAST:event_formInternalFrameActivated
/* private void cmboxActionPerformed(java.awt.event.ActionEvent evt){
      int i = jTable1.getSelectedRow();
     try {
            java.lang.Class.forName("org.postgresql.Driver");
        } catch(java.lang.ClassNotFoundException nt) {
            System.out.println(nt.getMessage());
        }
     try {
            java.sql.Connection con = java.sql.DriverManager.getConnection("jdbc:postgresql://localhost:5432/sako","postgres","pilsiner");
            java.sql.Statement pstmt = con.createStatement();
           // pstmt.executeUpdate("insert into AAA values('"+jTable1.getValueAt(numRows,numCols)+"')");
          java.sql.ResultSet rs = pstmt.executeQuery("select activity from activities where activity_code = '"+cmbox.getSelectedItem()+"'");
     while (rs.next())
            //jTextField4.setText(rs.getObject(1).toString());
            jTable1.setValueAt(rs.getObject(1),i,1);
            //jTable1.setValueAt(rs.getObject(2),i,3);
            //jTable1.setValueAt(rs.getObject(3),i,6);
 } catch(java.sql.SQLException sqlex){
        System.out.println(sqlex.getMessage());
 }
 //}
 
 }*/
   
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
      
        double debitsTable1 = 0.00;
        
        double debitsTable11 = 0.00;
        
        double debitsTable12 = 0.00;
      
        double creditsTable1 = 0.00;
        
        double creditsTable11 = 0.00;
        
        double creditsTable12 = 0.00;
        
         double creditsTable13 = 0.00;
        
        double debitsTable13 = 0.00;
        
        double totalDebits = 0.00;
        
        double totalCredits = 0.00;
        
        for(int j = 0; j < jTable1.getRowCount(); j++) {
            
            if (jTable1.getModel().getValueAt(j, 2) != null) {
            
            debitsTable1 = debitsTable1 + Double.parseDouble(jTable1.getModel().getValueAt(j, 2).toString());
            
            }

        }

        for(int k = 0; k < jTable11.getRowCount(); k++) {
            
            if (jTable11.getModel().getValueAt(k, 2) != null) {
            
            debitsTable11 = debitsTable11 + Double.parseDouble(jTable11.getModel().getValueAt(k, 2).toString());
            
            }

        }

        for(int l = 0; l < jTable12.getRowCount(); l++) {
            
            if (jTable12.getModel().getValueAt(l, 1) != null) {
            
            debitsTable12 = debitsTable12 + Double.parseDouble(jTable12.getModel().getValueAt(l, 1).toString());
            
            }

        }
        
        for(int m = 0; m < jTable1.getRowCount(); m++) {
            
            if (jTable1.getModel().getValueAt(m, 3) != null) {
            
            creditsTable1 = creditsTable1 + Double.parseDouble(jTable1.getModel().getValueAt(m, 3).toString());
            
            }

        }
        
        for(int n = 0; n < jTable11.getRowCount(); n++) {
            
            if (jTable11.getModel().getValueAt(n, 3) != null) {
            
            creditsTable11 = creditsTable11 + Double.parseDouble(jTable11.getModel().getValueAt(n, 3).toString());
            
            }

        }
        
        for(int p = 0; p < jTable12.getRowCount(); p++) {
            
            if (jTable12.getModel().getValueAt(p, 2) != null) {
            
            creditsTable12 = creditsTable12 + Double.parseDouble(jTable12.getModel().getValueAt(p, 2).toString());
            
            }

        }
        
        for(int q = 0; q < jTable13.getRowCount(); q++) {
            
            if (jTable13.getModel().getValueAt(q, 2) != null) {
            
            creditsTable13 = creditsTable13 + Double.parseDouble(jTable13.getModel().getValueAt(q, 2).toString());
            
            }

        }
        
        for(int r = 0; r < jTable13.getRowCount(); r++) {
            
            if (jTable13.getModel().getValueAt(r, 1) != null) {
            
            debitsTable13 = debitsTable13 + Double.parseDouble(jTable13.getModel().getValueAt(r, 1).toString());
            
            }

        }
        
        totalDebits = debitsTable1 + debitsTable11 + debitsTable12 + debitsTable13;
        
        System.out.println(totalDebits);
        
        totalCredits = creditsTable1 + creditsTable11 + creditsTable12 + creditsTable13;
        
        System.out.println(totalCredits);
        
        System.out.println("Difference Debits V Credits = "+(totalDebits - totalCredits));

        if (totalDebits != totalCredits) {
            
            javax.swing.JOptionPane.showMessageDialog(this, "Debits and Credits MUST balance! Out of balance by "+new com.afrisoftech.sys.Format2Currency().Format2Currency(Double.toString(totalDebits - totalCredits)));
            
        } else {
        
        java.util.Calendar calendar = java.util.Calendar.getInstance();
        
        long dateNow = calendar.getTimeInMillis();
        
        java.sql.Date datenowSql= new java.sql.Date(dateNow);
        
        System.out.println(datenowSql.toString());
 
        
        java.sql.Connection con;
  
    
      
        
        
                
          
          try {
               connectDB.setAutoCommit(false);
               
            for (int i = 0;  i < jTable13.getRowCount(); i++) {
             if (jTable13.getModel().getValueAt(i,0) != null){
           
         java.sql.Statement ps = connectDB.createStatement();            
            java.sql.ResultSet rst = ps.executeQuery("select nextval('transaction_no_seq')");
            while (rst.next())
            rst.getObject(1).toString();
              
             String transNo = rst.getObject(1).toString();
         
          
             
              java.sql.PreparedStatement pstmt1 = connectDB.prepareStatement("insert into cash_book values(?,?,?,?,?,?,?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?,?,?,?,?)");
             pstmt1.setString(1,"00");
             pstmt1.setObject(2,jTable13.getValueAt(i,0));
           
             pstmt1.setString(3,"");
               
            pstmt1.setString(4,"Opening Balance");
            
            pstmt1.setString(5,null);
            pstmt1.setString(6,null);
            pstmt1.setString(7,null);
            pstmt1.setObject(8,jTable13.getValueAt(i,3));
            pstmt1.setString(9,null);
            pstmt1.setString(10,null);
            pstmt1.setString(11,"");
            pstmt1.setString(12,null);
            pstmt1.setString(13,null);
            pstmt1.setString(14,null);
            pstmt1.setObject(15,jTable13.getValueAt(i,0));
            pstmt1.setString(16,"");
            pstmt1.setString(17,"");
             if(jTable13.getValueAt(i,1) == null){
                 pstmt1.setString(18,"00");
             } else{
            pstmt1.setObject(18,jTable13.getValueAt(i,1));
             }
             if(jTable13.getValueAt(i,2) == null){
                    pstmt1.setString(19,"00");
             }else{      
            pstmt1.setObject(19,jTable13.getValueAt(i,2));
             }
            pstmt1.setDate(20, datenowSql);
            pstmt1.setString(21,""+transNo+"");            
            pstmt1.setString(22,"false");
            pstmt1.setString(23,"false");
            pstmt1.setString(24,"Opening Balance");
            pstmt1.executeUpdate();
             }
            }
             //  if (jComboBox1.getSelectedItem().equals("other_transactions")){
               for (int i = 0;  i < jTable12.getRowCount(); i++) {
             if (jTable12.getModel().getValueAt(i,0) != null){
             
                  java.sql.Statement ps = connectDB.createStatement();            
            java.sql.ResultSet rst = ps.executeQuery("select nextval('transaction_no_seq')");
            while (rst.next())
            rst.getObject(1).toString();
              
             String transNo = rst.getObject(1).toString();
            java.sql.PreparedStatement pstmt = connectDB.prepareStatement("insert into other_transactions values(?,?,?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?,?,?,?,?,?,?,?)");
            pstmt.setString(1,"");
            pstmt.setObject(2,jTable12.getValueAt(i,0));
            pstmt.setObject(3,"Opening Balance");
            pstmt.setString(4,"");
            pstmt.setObject(5,jTable12.getValueAt(i,3));
            pstmt.setObject(6,"");
            pstmt.setObject(7,"");
            pstmt.setString(8,"00");           
            pstmt.setString(9,"");
            pstmt.setObject(10,"");
            pstmt.setObject(11,"");
            pstmt.setString(12,"N/A");
            pstmt.setString(13,"");
        
             if(jTable12.getValueAt(i,1) == null){
                 pstmt.setString(14,"00");
             } else{
            pstmt.setObject(14,jTable12.getValueAt(i,1));
             }
             if(jTable12.getValueAt(i,2) == null){
                 pstmt.setString(15,"00");
             } else{
            pstmt.setObject(15,jTable12.getValueAt(i,2));
             }
            pstmt.setDate(16,datenowSql);
            pstmt.setObject(17,""+transNo+"");
            pstmt.setBoolean(18,false);
            pstmt.setObject(19,null);
            pstmt.setString(20,"");
            pstmt.setObject(21,"Opening Balance");
           
            pstmt.executeUpdate();
             }
               }
               
   // } else{ 
       //   if (jComboBox1.getSelectedItem().equals("loan_transactions")) {
                for (int i = 0;  i < jTable1.getRowCount(); i++) {
             if (jTable1.getModel().getValueAt(i,0) != null){
              
                  java.sql.Statement ps = connectDB.createStatement();            
            java.sql.ResultSet rst = ps.executeQuery("select nextval('transaction_no_seq')");
            while (rst.next())
            rst.getObject(1).toString();
              
             String transNo = rst.getObject(1).toString();
            java.sql.PreparedStatement pstm = connectDB.prepareStatement("insert into loan_transactions values(?,?,?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)");
            pstm.setObject(1,jTable1.getValueAt(i,5));
            pstm.setObject(2,"Opening Balance");
            pstm.setObject(3,jTable1.getValueAt(i,1));
            pstm.setObject(4,jTable1.getValueAt(i,0));
            pstm.setObject(5,"");
            pstm.setObject(6,"");
            pstm.setObject(7,"");
            pstm.setObject(8,"");
           pstm.setString(9,"");
           pstm.setString(10,"");
           pstm.setString(11,"");
             if(jTable1.getValueAt(i,2) == null){
                 pstm.setString(12,"00");
             } else{
            pstm.setObject(12,jTable1.getValueAt(i,2));
             }
           // pstm.setObject(12,"00");
           // pstm.setObject(13,"00");
              if(jTable1.getValueAt(i,7) == null){
                 pstm.setString(13,"00");
             } else{
            pstm.setObject(13,jTable1.getValueAt(i,7));
             }
             if(jTable1.getValueAt(i,6) == null){
                 pstm.setString(14,"00");
             } else{
            pstm.setObject(14,jTable1.getValueAt(i,6));
             }
           // pstm.setObject(14,"00");
            pstm.setObject(15,"00");
            pstm.setObject(16,"00");
             if(jTable1.getValueAt(i,2) == null){
                 pstm.setString(17,"00");
             } else{
            pstm.setObject(17,jTable1.getValueAt(i,2));
             }
             if(jTable1.getValueAt(i,3) == null){
                 pstm.setString(18,"00");
             } else{
            pstm.setObject(18,jTable1.getValueAt(i,3));
             }
           // pstm.setObject(17,jTable1.getValueAt(i,2));
           // pstm.setObject(18,jTable1.getValueAt(i,3));
            pstm.setObject(19,"");
            pstm.setObject(20,"Opening Balance");
            pstm.setObject(21,"");
            pstm.setObject(22,jTable1.getValueAt(i,8));
            pstm.setDate(23,datenowSql);
            pstm.setObject(24,""+transNo+"");
            pstm.setBoolean(25,false);
            pstm.setObject(26,"");
           
            pstm.executeUpdate();
            
             }
                }
            //  } else{ 
         // if (table1 =="loan_transactions") {
               for (int i = 0;  i < jTable11.getRowCount(); i++) {
             if (jTable11.getModel().getValueAt(i,0) != null){
          
                  java.sql.Statement ps = connectDB.createStatement();            
            java.sql.ResultSet rst = ps.executeQuery("select nextval('transaction_no_seq')");
            while (rst.next())
            rst.getObject(1).toString();
              
             String transNo = rst.getObject(1).toString();
            java.sql.PreparedStatement pst = connectDB.prepareStatement("insert into shares_transactions values(?,?,?,?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?,?,?,?,?,?)");
            pst.setObject(1,jTable11.getValueAt(i,1));
            pst.setObject(2,"Opening Balance");
            pst.setObject(3,"");
            pst.setString(4,"00");
            pst.setObject(5,"");
            pst.setObject(6,"");
            pst.setString(7,"");
            pst.setString(8,"");
            pst.setString(9,"");
            pst.setObject(10,jTable11.getValueAt(i,0));
            if(jTable11.getValueAt(i,2) == null){
                 pst.setString(11,"00");
             } else{
            pst.setObject(11,jTable11.getValueAt(i,2));
             }
             if(jTable11.getValueAt(i,3) == null){
                 pst.setString(12,"00");
             } else{
            pst.setObject(12,jTable11.getValueAt(i,3));
             }
            pst.setString(13,"");             
            pst.setObject(14,jTable11.getValueAt(i,5));
            pst.setDate(15,datenowSql);
            pst.setObject(16,""+transNo+"");
            pst.setBoolean(17,false);
            pst.setObject(18,"");
            pst.setString(19,"");
            pst.setString(20,"Opening Balance");
           
            pst.executeUpdate();
             }
               }
         
              connectDB.commit();
            connectDB.setAutoCommit(true);
         
             jLabel7.setForeground(java.awt.Color.blue);
            jLabel7.setText("Data Inserted successfully");
             
                }   catch(java.sql.SQLException sq){
                     javax.swing.JOptionPane.showMessageDialog(this, sq.getMessage(),"Error Message!",javax.swing.JOptionPane.ERROR_MESSAGE);
          
                   try {
                  connectDB.rollback();
                  }catch (java.sql.SQLException sql){
                  javax.swing.JOptionPane.showMessageDialog(this,sql.getMessage(),"Error Message!",javax.swing.JOptionPane.ERROR_MESSAGE);
              } 
                   ///// jLabel7.setForeground(java.awt.Color.red);
                   // jLabel7.setText("Data not inserted");
            System.out.println(sq.getMessage());
              }
                     
        }
   
              // Add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed
 //private void cmboxActionPerformed(javax.swing. 
    private void jButton1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton1MouseClicked
       // Add your handling code here:
    }//GEN-LAST:event_jButton1MouseClicked

    private void jButton3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton3MouseClicked
     // jTextField1.setText("");
      //jTextField2.setText(""); 
      //jTextField3.setText("");
    //  jTextField4.setText("");
      //jTextField12.setText("");// Add your handling code here:
    }//GEN-LAST:event_jButton3MouseClicked

    private void jButton4MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton4MouseClicked
    this.setVisible(false);        // Add your handling code here:
    }//GEN-LAST:event_jButton4MouseClicked
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private org.netbeans.lib.sql.NBCachedRowSet crset5;
    private javax.swing.JTable jTable13;
    private org.netbeans.lib.sql.NBCachedRowSet crset3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JLabel jLabel1;
    private org.netbeans.lib.sql.NBCachedRowSet crset21;
    private org.netbeans.lib.sql.NBCachedRowSet crset2;
    private javax.swing.JCheckBox jCheckBox3;
    private javax.swing.JButton jButton1;
    private javax.swing.JPanel jPanel2;
    private org.netbeans.lib.sql.NBCachedRowSet crset4;
    private javax.swing.JButton jButton3;
    private javax.swing.JTable jTable11;
    private org.netbeans.lib.sql.NBCachedRowSet crset8;
    private javax.swing.JCheckBox jCheckBox4;
    private javax.swing.JButton jButton5;
    private javax.swing.JTable jTable12;
    private javax.swing.JTextField jTextField10;
    private javax.swing.JLabel jLabel7;
    private org.netbeans.lib.sql.NBCachedRowSet crset6;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JPanel jPanel1;
    private org.netbeans.lib.sql.NBCachedRowSet crset1;
    private javax.swing.JButton jButton4;
    private org.netbeans.lib.sql.NBCachedRowSet crset7;
    private javax.swing.JCheckBox jCheckBox2;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
    
}
