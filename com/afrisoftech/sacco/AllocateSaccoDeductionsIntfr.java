/*
 * loanpymntintfr.java
 *
 * Created on August 13, 2002, 1:09 PM
 */

package com.afrisoftech.sacco;

/**
 *
 * @author  root
 */
public class AllocateSaccoDeductionsIntfr extends javax.swing.JInternalFrame {
    
    /** Creates new form loanpymntintfr */
    javax.swing.table.TableModel tableModel = null;
    
    // javax.swing.table.TableModel tableModel1 = null;
    boolean controlFlag = true;
    
    java.sql.Connection connectDB = null;
    
    org.netbeans.lib.sql.pool.PooledConnectionSource pConnDB = null;
    
    
    public AllocateSaccoDeductionsIntfr(java.sql.Connection connDb, org.netbeans.lib.sql.pool.PooledConnectionSource pconnDB) {
        
        connectDB = connDb;
        
        pConnDB = pconnDB;
        
        initComponents();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        java.awt.GridBagConstraints gridBagConstraints;

        jSearchDialog = new javax.swing.JDialog();
        jSearchPanel = new javax.swing.JPanel();
        jTextField111 = new javax.swing.JTextField();
        jSearchScrollPane = new javax.swing.JScrollPane();
        jSearchTable = new javax.swing.JTable();
        jButton51 = new javax.swing.JButton();
        try {
            searchRowSet = new org.netbeans.lib.sql.NBCachedRowSet();
        } catch (java.sql.SQLException e1) {
            e1.printStackTrace();
        }
        try {
            crset21 = new org.netbeans.lib.sql.NBCachedRowSet();
        } catch (java.sql.SQLException e1) {
            e1.printStackTrace();
        }
        jSearchDialog1 = new javax.swing.JDialog();
        jSearchPanel1 = new javax.swing.JPanel();
        jTextField1111 = new javax.swing.JTextField();
        jSearchScrollPane1 = new javax.swing.JScrollPane();
        jSearchTable1 = new javax.swing.JTable();
        jButton511 = new javax.swing.JButton();
        try {
            searchRowSet1 = new org.netbeans.lib.sql.NBCachedRowSet();
        } catch (java.sql.SQLException e1) {
            e1.printStackTrace();
        }
        try {
            java.lang.Class.forName("org.postgresql.Driver");
        }catch (java.lang.ClassNotFoundException sl){
            System.out.println(sl.getMessage());
        }

        jButton1 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel7 = new javax.swing.JLabel();
        jTextField6 = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        jPanel21 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton2 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jPanel1 = new javax.swing.JPanel();
        datePicker2 = new com.afrisoftech.lib.DatePicker();
        jCheckBox1 = new javax.swing.JCheckBox();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jTextField4 = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jTextField3 = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jTextField11 = new javax.swing.JTextField();
        jLabel21 = new javax.swing.JLabel();
        jLabel81 = new javax.swing.JLabel();
        datePicker1 = new com.afrisoftech.lib.DatePicker();
        jLabel91 = new javax.swing.JLabel();
        datePicker21 = new com.afrisoftech.lib.DatePicker();
        jPanel31 = new javax.swing.JPanel();
        jTextField41 = new javax.swing.JTextField();
        jLabel51 = new javax.swing.JLabel();
        jLabel31 = new javax.swing.JLabel();
        jTextField5 = new javax.swing.JTextField();
        jButton7 = new javax.swing.JButton();

        jSearchDialog.getContentPane().setLayout(new java.awt.GridBagLayout());

        jSearchDialog.setModal(true);
        jSearchDialog.setUndecorated(true);
        jSearchPanel.setLayout(new java.awt.GridBagLayout());

        jSearchPanel.setBorder(new javax.swing.border.EtchedBorder());
        jTextField111.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                jTextField111CaretUpdate(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 300.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        jSearchPanel.add(jTextField111, gridBagConstraints);

        jSearchTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Title 1"
            }
        ));
        jSearchTable.setToolTipText("Click on the target row to select the patient from the search.");
        jSearchTable.setShowHorizontalLines(false);
        /*javax.swing.table.TableColumn column = null;

        for (int i = 0; i < 4; i++) {

            column = jSearchTable.getColumnModel().getColumn(i);

            if (i == 1) {

                column.setPreferredWidth(400);
                //sport column is bigger
            } else {

                column.setPreferredWidth(200);

            }
        }
        */
        jSearchTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jSearchTableMouseClicked(evt);
            }
        });

        jSearchScrollPane.setViewportView(jSearchTable);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 20.0;
        jSearchPanel.add(jSearchScrollPane, gridBagConstraints);

        jButton51.setText("Dispose");
        jButton51.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton51ActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jSearchPanel.add(jButton51, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jSearchDialog.getContentPane().add(jSearchPanel, gridBagConstraints);

        searchRowSet.setConnectionSource(pConnDB);
        crset21.setCommand("");
        crset21.setConnectionSource(pConnDB);
        jSearchDialog1.getContentPane().setLayout(new java.awt.GridBagLayout());

        jSearchDialog1.setModal(true);
        jSearchDialog1.setUndecorated(true);
        jSearchPanel1.setLayout(new java.awt.GridBagLayout());

        jSearchPanel1.setBorder(new javax.swing.border.EtchedBorder());
        jTextField1111.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                jTextField1111CaretUpdate(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 300.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        jSearchPanel1.add(jTextField1111, gridBagConstraints);

        jSearchTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Title 1"
            }
        ));
        jSearchTable1.setToolTipText("Click on the target row to select the patient from the search.");
        jSearchTable1.setShowHorizontalLines(false);
        /*javax.swing.table.TableColumn column = null;

        for (int i = 0; i < 4; i++) {

            column = jSearchTable.getColumnModel().getColumn(i);

            if (i == 1) {

                column.setPreferredWidth(400);
                //sport column is bigger
            } else {

                column.setPreferredWidth(200);

            }
        }
        */
        jSearchTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jSearchTable1MouseClicked(evt);
            }
        });

        jSearchScrollPane1.setViewportView(jSearchTable1);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 20.0;
        jSearchPanel1.add(jSearchScrollPane1, gridBagConstraints);

        jButton511.setText("Dispose");
        jButton511.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton511ActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jSearchPanel1.add(jButton511, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jSearchDialog1.getContentPane().add(jSearchPanel1, gridBagConstraints);

        searchRowSet1.setConnectionSource(pConnDB);

        getContentPane().setLayout(new java.awt.GridBagLayout());

        setBorder(new javax.swing.border.EtchedBorder());
        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Process Monthly Deductions");
        setDefaultCloseOperation(javax.swing.WindowConstants.HIDE_ON_CLOSE);
        setFrameIcon(new javax.swing.ImageIcon(getClass().getResource("/ColorPreview.gif")));
        try {
            setSelected(true);
        } catch (java.beans.PropertyVetoException e1) {
            e1.printStackTrace();
        }
        setVisible(true);
        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/check.gif")));
        jButton1.setMnemonic('O');
        jButton1.setText("Allocate");
        jButton1.setToolTipText("Click here enter data");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 14;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(jButton1, gridBagConstraints);

        jButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/minusarm.gif")));
        jButton3.setMnemonic('l');
        jButton3.setText("Clear");
        jButton3.setToolTipText("Click here to clear textfields");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 14;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(jButton3, gridBagConstraints);

        jButton4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/BD14755_.GIF")));
        jButton4.setMnemonic('C');
        jButton4.setText("Close");
        jButton4.setToolTipText("Click here to close window");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 14;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(jButton4, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 12;
        gridBagConstraints.gridwidth = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTH;
        gridBagConstraints.weightx = 1.0;
        getContentPane().add(jSeparator1, gridBagConstraints);

        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 13;
        gridBagConstraints.gridwidth = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        getContentPane().add(jLabel7, gridBagConstraints);

        jTextField6.setEditable(false);
        jTextField6.setMinimumSize(new java.awt.Dimension(0, 0));
        jTextField6.setPreferredSize(new java.awt.Dimension(0, 0));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 11;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        getContentPane().add(jTextField6, gridBagConstraints);

        jPanel2.setLayout(new java.awt.GridBagLayout());

        jPanel2.setBorder(new javax.swing.border.TitledBorder(""));
        jPanel21.setLayout(new java.awt.GridBagLayout());

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Mbr. No.", "Mbr name", "TSC No.", "Amt.Due", "Interest.", "Total Due", "Trans", "Allocated Amt", "Refund", "Allocate?", "Balance"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Object.class, java.lang.Double.class, java.lang.Double.class, java.lang.Boolean.class, java.lang.Double.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, true, true, true, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.setShowHorizontalLines(false);
        jTable1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTable1KeyReleased(evt);
            }
        });

        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });

        jScrollPane1.setViewportView(jTable1);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel21.add(jScrollPane1, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.gridheight = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 3.0;
        jPanel2.add(jPanel21, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.gridwidth = 6;
        gridBagConstraints.gridheight = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 50.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        getContentPane().add(jPanel2, gridBagConstraints);

        jButton2.setText("Oldest");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 14;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(jButton2, gridBagConstraints);

        jButton5.setText("Cancel Deductions");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 14;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(jButton5, gridBagConstraints);

        jButton6.setText("Cancel All");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 14;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(jButton6, gridBagConstraints);

        jLabel4.setText("Total Allocated");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 11;
        getContentPane().add(jLabel4, gridBagConstraints);

        jTextField2.setEditable(false);
        jTextField2.setForeground(new java.awt.Color(0, 0, 0));
        jTextField2.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTextField2.setText("0.00");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 11;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(jTextField2, gridBagConstraints);

        jPanel1.setLayout(new java.awt.GridBagLayout());

        jPanel1.setBorder(new javax.swing.border.BevelBorder(javax.swing.border.BevelBorder.RAISED, java.awt.Color.blue, java.awt.Color.magenta, null, null));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel1.add(datePicker2, gridBagConstraints);

        jCheckBox1.setText("Confirm Member Nos. ");
        jCheckBox1.setToolTipText("Click To View Invoices");
        jCheckBox1.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jCheckBox1.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        jCheckBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox1ActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel1.add(jCheckBox1, gridBagConstraints);

        jLabel8.setText("TSC Nos. Range");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        jPanel1.add(jLabel8, gridBagConstraints);

        jLabel9.setText("Month Ending");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        jPanel1.add(jLabel9, gridBagConstraints);

        jPanel3.setLayout(new java.awt.GridBagLayout());

        jPanel3.setBorder(new javax.swing.border.TitledBorder("Enter range of Nos. that you want to process now"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        jPanel3.add(jTextField4, gridBagConstraints);

        jLabel5.setText("To");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 40, 0, 0);
        jPanel3.add(jLabel5, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel3.add(jTextField3, gridBagConstraints);

        jLabel3.setText("From No");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 40, 0, 0);
        jPanel3.add(jLabel3, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 10.0;
        gridBagConstraints.weighty = 3.0;
        jPanel1.add(jPanel3, gridBagConstraints);

        jTextField1.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        jPanel1.add(jTextField1, gridBagConstraints);

        jLabel2.setText("Vote No");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 40, 0, 0);
        jPanel1.add(jLabel2, gridBagConstraints);

        jTextField11.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTextField11.setText(".00");
        jTextField11.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                jTextField11CaretUpdate(evt);
            }
        });

        jTextField11.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextField11KeyReleased(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 12.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        jPanel1.add(jTextField11, gridBagConstraints);

        jLabel21.setText("Grand Total");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 40, 0, 0);
        jPanel1.add(jLabel21, gridBagConstraints);

        jLabel81.setText("Period From");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 40, 0, 0);
        jPanel1.add(jLabel81, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel1.add(datePicker1, gridBagConstraints);

        jLabel91.setText("Period To");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 40, 0, 0);
        jPanel1.add(jLabel91, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel1.add(datePicker21, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 30.0;
        getContentPane().add(jPanel1, gridBagConstraints);

        jPanel31.setLayout(new java.awt.GridBagLayout());

        jPanel31.setBorder(new javax.swing.border.TitledBorder(null, "Make adjustments to Allocation", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 0, 11), new java.awt.Color(153, 0, 0)));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 100;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        jPanel31.add(jTextField41, gridBagConstraints);

        jLabel51.setText("Actual allocation amount");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 40, 0, 0);
        jPanel31.add(jLabel51, gridBagConstraints);

        jLabel31.setText("TSC No.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 40, 0, 0);
        jPanel31.add(jLabel31, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 100;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel31.add(jTextField5, gridBagConstraints);

        jButton7.setForeground(new java.awt.Color(51, 0, 255));
        jButton7.setText("Adjust Allocation");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel31.add(jButton7, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 1;
        gridBagConstraints.weightx = 10.0;
        gridBagConstraints.weighty = 3.0;
        getContentPane().add(jPanel31, gridBagConstraints);

        setBounds(0, 0, 697, 428);
    }//GEN-END:initComponents
    
    private void jTextField11KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField11KeyReleased
        // Add your handling code here:
        //   float num_b = java.lang.Float.parseFloat(jTextField2.getText());
        
        
    }//GEN-LAST:event_jTextField11KeyReleased
    
    private void jTextField11CaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_jTextField11CaretUpdate
        this.jTextField2.setText(jTextField11.getText().toString());   // Add your handling code here:
    }//GEN-LAST:event_jTextField11CaretUpdate
    
    private void jTable1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTable1KeyReleased
        double resFloat = 0.00;
        //  double totalSum = 0.00;
        double floatTotal = java.lang.Double.parseDouble(jTextField11.getText());
        
        if (jTable1.getModel().getValueAt(jTable1.getSelectedRow(), 7) != null) {
            double amtToalloc = java.lang.Double.parseDouble(jTextField2.getText());
            double floatCol2 = java.lang.Double.parseDouble(jTable1.getValueAt(jTable1.getSelectedRow(), 5).toString());
            
            double floatCol3 = java.lang.Double.parseDouble(jTable1.getValueAt(jTable1.getSelectedRow(), 7).toString());
            double balance = java.lang.Double.parseDouble(jTable1.getValueAt(jTable1.getSelectedRow(), 10).toString());
            
            
           /* if (floatCol2 < amtToalloc){
            double resVal = floatCol2 - floatCol3;
            
            
            jTable1.setValueAt(new java.lang.Float(resVal), jTable1.getSelectedRow(), 5);
          }else*/
            //  if (floatCol2 > amtToalloc && amtToalloc > 0){
            if (floatCol3 <= amtToalloc && amtToalloc >= 0){
                
                double resVal =floatCol2 - floatCol3;
                
                
                jTable1.setValueAt(new java.lang.Float(resVal), jTable1.getSelectedRow(), 8);
                jTable1.setValueAt(new java.lang.Float(0), jTable1.getSelectedRow(), 10);
            }
            else
                if (floatCol3 > amtToalloc && amtToalloc > 0){
                    javax.swing.JOptionPane.showMessageDialog(this,"You cannot allocate amount higher than the amount to allocate","Comfirmation Message!",javax.swing.JOptionPane.INFORMATION_MESSAGE);
                }
            
            
     /*       for (int i = 0; i < jTable1.getRowCount(); i++) {
      
                if (jTable1.getModel().getValueAt(i, 0) != null) {//toString().compareToIgnoreCase(null) {
      
                    resFloat = resFloat + Double.parseDouble(jTable1.getValueAt(i, 3).toString());
      
      
                    // totalSum = floatTotal + resFloat;
      
                }
            }*/
            this.tableModelTableChanged();
        }else{
            //if (jTable1.getModel().getValueAt(jTable1.getSelectedRow(), 7) != null) {
            //    jTable1.setValueAt(new java.lang.Double(jTable1.getValueAt(jTable1.getSelectedRow(), 5).toString()), jTable1.getSelectedRow(), 8);
            this.tableModelTableChanged();
        }
        
    }//GEN-LAST:event_jTable1KeyReleased
    public void tableModelTableChanged() {
        System.out.println("Calculating totals for table 11 and 2.");
        double zeros = 0.00;
        double resFloat = java.lang.Double.parseDouble(jTextField11.getText());;
        double resFloat1 = java.lang.Double.parseDouble(jTextField2.getText());;
        
        
        for (int i = 0; i < jTable1.getRowCount(); i++) {
            
            if (jTable1.getModel().getValueAt(i, 7) != null) {
                
                //    if (jTable11.getSelectedColumn() == 1) {
                
                resFloat = resFloat - Double.parseDouble(jTable1.getModel().getValueAt(i,7).toString());
                
             /*  if (resFloat > 0){
                    jTextField2.setText(java.lang.String.valueOf(resFloat));
                } else
                    if (resFloat < 0){
                        javax.swing.JOptionPane.showMessageDialog(this,"You cannot allocate amount higher than the Allocatable Balance","Comfirmation Message!",javax.swing.JOptionPane.INFORMATION_MESSAGE);
                        jTable1.setValueAt(new java.lang.Double(0), jTable1.getSelectedRow(), 4);
                    }
              */
            }
        }
        
        if (resFloat > 0){
            jTextField2.setText(java.lang.String.valueOf(resFloat));
        } else
            if (resFloat < 0){
                javax.swing.JOptionPane.showMessageDialog(this,"You cannot allocate amount higher than the Allocatable Balance","Comfirmation Message!",javax.swing.JOptionPane.INFORMATION_MESSAGE);
                jTable1.setValueAt(new java.lang.Double(0), jTable1.getSelectedRow(), 7);
            }
        
        //               jTextField31.setText(java.lang.String.valueOf(resFloat));
    }
    
  /*  public void tableModelTableChanged(javax.swing.event.TableModelEvent evt) {
   
        //        double resFloat = 0.00;
        double resFloat = java.lang.Double.parseDouble(jTextField11.getText());
        double resFloat1 = java.lang.Double.parseDouble(jTextField2.getText());;
   
        for (int i = 0; i < jTable1.getRowCount(); i++) {
   
            if (jTable1.getModel().getValueAt(i, 7) != null) {
   
                //   if (jTable11.getSelectedColumn() == 1) {
   
                resFloat = resFloat - Double.parseDouble(jTable1.getModel().getValueAt(i, 7).toString());
   
                //   }
             /*   if (resFloat1> 0){
                    jTextField2.setText(java.lang.String.valueOf(resFloat));
                } else
                    if (resFloat < 0){
                        javax.swing.JOptionPane.showMessageDialog(this,"You cannot allocate amount higher than the amount to allocate","Comfirmation Message!",javax.swing.JOptionPane.INFORMATION_MESSAGE);
                        jTable1.setValueAt(new java.lang.Double(0), jTable1.getSelectedRow(), 4);
   
                    }
   
            }
        }
        if (resFloat1> 0){
            jTextField2.setText(java.lang.String.valueOf(resFloat));
        } else
            if (resFloat < 0){
                javax.swing.JOptionPane.showMessageDialog(this,"You cannot allocate amount higher than the amount to allocate","Comfirmation Message!",javax.swing.JOptionPane.INFORMATION_MESSAGE);
                jTable1.setValueAt(new java.lang.Double(0), jTable1.getSelectedRow(), 7);
   
            }
   
        //               jTextField31.setText(java.lang.String.valueOf(resFloat));
    }*/
    private void jButton511ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton511ActionPerformed
        jSearchDialog1.dispose();  // Add your handling code here:
    }//GEN-LAST:event_jButton511ActionPerformed
    
    private void jSearchTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jSearchTable1MouseClicked
        
    }//GEN-LAST:event_jSearchTable1MouseClicked
    
    private void jTextField1111CaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_jTextField1111CaretUpdate
        
    }//GEN-LAST:event_jTextField1111CaretUpdate
    public java.lang.Object[] getListofStaffNos() {
        
        java.lang.Object[] listofStaffNos = null;
        
        java.util.Vector listStaffNoVector = new java.util.Vector(1,1);
        
        
        try {
            
            //    java.sql.Connection connDB = java.sql.DriverManager.getConnection("jdbc:postgresql://localhost:5432/sako","postgres","pilsiner");
            
            java.sql.Statement stmt1 = connectDB.createStatement();
            java.sql.ResultSet rSet1 = stmt1.executeQuery("SELECT distinct admission_no FROM ac_debtors where  transaction_type ilike 'Process Deductions' and balance > 0 and account_no between '"+this.jTextField3.getText().toString()+"' and '"+this.jTextField4.getText().toString()+"' and DATE BETWEEN '"+this.datePicker1.getDate().toString()+"' and '"+this.datePicker21.getDate().toString()+"' ORDER BY admission_no");
            
            //java.sql.ResultSet rSet1 = stmt1.executeQuery("SELECT distinct admission_no FROM ac_debtors where  transaction_type ilike 'Process Deductions' and balance > 0 and account_no between '"+this.jTextField3.toString()+"' and '"+this.jTextField4.toString()+"' and DATE BETWEEN '"+this.datePicker1.getDate().toString()+"' and '"+this.datePicker21.getDate().toString()+"' ORDER BY admission_no");
            // java.sql.ResultSet rSet1 = stmt1.executeQuery("SELECT DISTINCT staff_no FROM posting where approved ORDER BY staff_no");
            
            while (rSet1.next()) {
                
                listStaffNoVector.addElement(rSet1.getObject(1).toString());
                
            }
            
        }catch (java.sql.SQLException sqlExec) {
            
            javax.swing.JOptionPane.showMessageDialog(new javax.swing.JFrame(), sqlExec.getMessage());
            
        }
        
        listofStaffNos = listStaffNoVector.toArray();
        System.out.println("Done list of Staff Nos ...");
        return listofStaffNos;
    }
    private void jCheckBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox1ActionPerformed
        String staffNo = null;
        this.jButton1.setEnabled(true);
        for (int k = 0; k < jTable1.getRowCount(); k++ ) {
            for (int r = 0; r < jTable1.getColumnCount(); r++ ) {
                jTable1.getModel().setValueAt(null,k,r);
            }
        }
        java.lang.Object listofStaffNos[] = this.getListofStaffNos();
        
        
        
        for (int j = 0; j < listofStaffNos.length; j++) {
            System.out.println( "This are the # selected [ "+listofStaffNos[j].toString()+ "]");
            this.populateTable1(listofStaffNos[j].toString());
        }
        // Add your handling code here:
    }//GEN-LAST:event_jCheckBox1ActionPerformed
    
    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        if (jTable1.getSelectedColumn() == 9) {
            if (Boolean.valueOf(jTable1.getModel().getValueAt(jTable1.getSelectedRow(), 9).toString()) == java.lang.Boolean.TRUE) {
                
                // if(this.jTextField2.getText().equalsIgnoreCase("0.0")){
                if (jTable1.getValueAt(jTable1.getSelectedRow(), jTable1.getSelectedColumn()) != null) {
                    if (jTable1.getValueAt(jTable1.getSelectedRow(), 5) != null){
                        this.tableModelTableChanged1();
                    }
                }
                // javax.swing.JOptionPane.showMessageDialog(this,"Amount to allocate has been EXHAUSTED !","Information Message!",javax.swing.JOptionPane.INFORMATION_MESSAGE);
                
                //}else{
                  /*  if (jTable1.getValueAt(jTable1.getSelectedRow(), jTable1.getSelectedColumn()) != null) {
                        if (jTable1.getValueAt(jTable1.getSelectedRow(), 8) != null){
                            this.tableModelTableChanged1();
                        }
                    }*/
                // }
                
            }else{
                if (jTable1.getValueAt(jTable1.getSelectedRow(), jTable1.getSelectedColumn()) != null) {
                    if (jTable1.getValueAt(jTable1.getSelectedRow(), 5) != null){
                        this.tableModelTableChanged1();
                    }
                }
            }
            this.tableModelTableChanged();
        }
    }//GEN-LAST:event_jTable1MouseClicked
/*     public void tableModelTableChanged() {
        System.out.println("Calculating totals for table 11 and 2.");
        double zeros = 0.00;
        double resFloat = java.lang.Double.parseDouble(jTextField1.getText());;
        double resFloat1 = java.lang.Double.parseDouble(jTextField2.getText());;
 
 
        for (int i = 0; i < jTable1.getRowCount(); i++) {
 
            if (jTable1.getModel().getValueAt(i, 4) != null) {
 
                //    if (jTable11.getSelectedColumn() == 1) {
 
                resFloat = resFloat - Double.parseDouble(jTable1.getModel().getValueAt(i, 4).toString());
 
               if (resFloat > 0){
                    jTextField2.setText(java.lang.String.valueOf(resFloat));
                } else
                    if (resFloat < 0){
                        javax.swing.JOptionPane.showMessageDialog(this,"You cannot allocate amount higher than the Allocatable Balance","Comfirmation Message!",javax.swing.JOptionPane.INFORMATION_MESSAGE);
                        jTable1.setValueAt(new java.lang.Double(0), jTable1.getSelectedRow(), 4);
                    }
 
            }
        }
 
        if (resFloat > 0){
            jTextField2.setText(java.lang.String.valueOf(resFloat));
        } else
            if (resFloat < 0){
                javax.swing.JOptionPane.showMessageDialog(this,"You cannot allocate amount higher than the Allocatable Balance","Comfirmation Message!",javax.swing.JOptionPane.INFORMATION_MESSAGE);
                jTable1.setValueAt(new java.lang.Double(0), jTable1.getSelectedRow(), 4);
            }
 
 
    }
 */
    
    public void tableModelTableChanged1() {
        
        double totals = 0.00;
        double resFloat = 0.00;
        double amt = java.lang.Double.parseDouble(this.jTextField11.getText());
        
        double amt1 = java.lang.Double.parseDouble(this.jTextField2.getText());
        
        // double total_amount = java.lang.Double.parseDouble(this.jTextField2.getText());
        double floatCol2 = java.lang.Double.parseDouble(jTable1.getValueAt(jTable1.getSelectedRow(), 10).toString());
        double bal = java.lang.Double.parseDouble(jTable1.getValueAt(jTable1.getSelectedRow(), 10).toString());
        double orig = java.lang.Double.parseDouble(jTable1.getValueAt(jTable1.getSelectedRow(), 5).toString());
        //        double amtAlloc = java.lang.Double.parseDouble(jTable1.getValueAt(jTable1.getSelectedRow(), 4).toString());
        
        int i = 0;
        if(amt > 0){
            for (int j = 0; j < jTable1.getRowCount(); j++) {
                if(this.jTable1.getModel().getValueAt(j,9) != null){
                    //  if (jTable1.getModel().getValueAt(j, 5).toString().equalsIgnoreCase("TRUE")){// == java.lang.Boolean.TRUE) {
                    if (Boolean.valueOf(jTable1.getModel().getValueAt(j, 9).toString()) == java.lang.Boolean.TRUE) {
                        
                        System.out.println("\n"+jTable1.getModel().getValueAt(j, 9).toString());
                        // amt = amt - Double.parseDouble(jTable1.getModel().getValueAt(j, 3).toString());
                        
                        jTable1.getModel().removeTableModelListener(new javax.swing.event.TableModelListener() {
                            
                            public void tableChanged(javax.swing.event.TableModelEvent evt) {
                                
                                //   tableModelTableChanged(evt);
                                
                            }
                            
                        });
                        if(this.jTable1.getModel().getValueAt(j,5) != null){
                            
                            
                            jTextField2.setForeground(java.awt.Color.BLACK);
                            
                            
                            if(amt1 > floatCol2) {
                                
                                
                                jTable1.setValueAt(new java.lang.Double(resFloat), jTable1.getSelectedRow(), 10);
                                
                                double balance = java.lang.Double.parseDouble(jTable1.getValueAt(jTable1.getSelectedRow(), 10).toString());
                                
                                jTable1.setValueAt(new java.lang.Double(orig-balance), jTable1.getSelectedRow(), 7);
                                
                           /*     //           jTable1.getModel().setValueAt((Object)java.lang.String.valueOf(0.00), jTable1.getSelectedRow(), 4);
                            
                                jTable1.setValueAt(new java.lang.Double(balance), jTable1.getSelectedRow(), 7);
                            
                                // jTable1.setValueAt(new java.lang.Double(balance), jTable1.getSelectedRow(),5);
                                jTable1.setValueAt(new java.lang.Double(0), jTable1.getSelectedRow(),10);
                            */
                            }else{
                                
                                
                                if (amt1 <= floatCol2 && amt1 >= 0){
                                    
                                    jTable1.setValueAt(new java.lang.Double(java.lang.Math.round(floatCol2-amt1)),jTable1.getSelectedRow(),10);
                                    double balance = java.lang.Double.parseDouble(jTable1.getValueAt(jTable1.getSelectedRow(), 10).toString());
                                    
                                    jTable1.setValueAt(new java.lang.Double(amt1), jTable1.getSelectedRow(), 7);
                                    
                                /*    jTable1.setValueAt(new java.lang.Double(java.lang.Math.round(floatCol2-amt1)),jTable1.getSelectedRow(),7);
                                   // double balance = java.lang.Double.parseDouble(jTable1.getValueAt(jTable1.getSelectedRow(), 10).toString());
                                 
                                    // jTable1.setValueAt(new java.lang.Double(amt1), jTable1.getSelectedRow(), 5);
                                 
                                    jTable1.setValueAt(new java.lang.Double(0), jTable1.getSelectedRow(), 10);
                                    jTextField2.setForeground(java.awt.Color.RED);
                                 */
                                }
                            }
                            
                            
                            amt = amt - Double.parseDouble(jTable1.getModel().getValueAt(j, 5).toString());
                            
                            
                            
                            
                            
                        }
                        if (amt > 0){
                            jTextField2.setText(Double.toString(amt));
                        }else{
                            jTextField2.setText(Double.toString(0.00));
                            
                        }
                        i++;
                    }else{
                        
                        if (Boolean.valueOf(jTable1.getModel().getValueAt(jTable1.getSelectedRow(), 9).toString()) == java.lang.Boolean.FALSE) {
                            
                            //  if(this.jTable1.getModel().getValueAt(jTable1.getSelectedRow(),9) != null){
                            jTextField2.setForeground(java.awt.Color.BLACK);
                            jTable1.setValueAt(jTable1.getValueAt(jTable1.getSelectedRow(),5), jTable1.getSelectedRow(), 10);
                            jTable1.setValueAt(new java.lang.Double(0), jTable1.getSelectedRow(), 7);
                            
                            // }
                            if (amt1 > 0) {
                                jTextField2.setText(Double.toString(amt1+java.lang.Double.parseDouble(jTable1.getValueAt(jTable1.getSelectedRow(), 10).toString())));
                            }else{
                                if (amt1 == 0) {
                                    
                                    jTextField2.setText(Double.toString(java.lang.Double.parseDouble(jTable1.getValueAt(jTable1.getSelectedRow(), 10).toString())-bal));
                                }
                            }
                        }
                    }
                }
            }
            
        }else{
            
            jTable1.setValueAt(new java.lang.Double(floatCol2),jTable1.getSelectedRow(),10);
            
        }
        
        jTable1.setValueAt(new java.lang.Double(0),jTable1.getSelectedRow(),8);
    }
    
    private void jSearchTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jSearchTableMouseClicked
        
    }//GEN-LAST:event_jSearchTableMouseClicked
    
    private void jButton51ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton51ActionPerformed
        jSearchDialog.dispose();        // Add your handling code here:
    }//GEN-LAST:event_jButton51ActionPerformed
    
    private void jTextField111CaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_jTextField111CaretUpdate
        // Add your handling code here:
    }//GEN-LAST:event_jTextField111CaretUpdate
    
    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        this.setVisible(false);   // Add your handling code here:
    }//GEN-LAST:event_jButton4ActionPerformed
    
    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        
    }//GEN-LAST:event_jButton3ActionPerformed
    
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        
        java.util.Calendar calendar = java.util.Calendar.getInstance();
        
        long dateNow = calendar.getTimeInMillis();
        
        java.sql.Date datenowSql= new java.sql.Date(dateNow);
        
        System.out.println(datenowSql.toString());
        
        java.sql.Connection con;
        String vouchNo = null;
        String user = null;
        String invoiceNo = null;
        String KRA = null;
        String Code = null;
        String actNames1 = null;
        String actCode1 = null;
        String rNo = null;
        String Payer = null;
        String Vats = null;
        String glAcc = null;
        String Activity = null;
        String userName = null;
        String descriptions = null;
        //  double Deductions = java.lang.Double.parseDouble(jTextField10.getText());
        //  double Net = java.lang.Double.parseDouble(jTextField3.getText());
        //  if(Net < 0){
        //     javax.swing.JOptionPane.showMessageDialog(this,"Deductions MORE THAN The Earnings","Error Message!",javax.swing.JOptionPane.ERROR_MESSAGE);
        // }else{
        try {
            connectDB.setAutoCommit(false);
            java.sql.Statement ps = connectDB.createStatement();
            java.sql.ResultSet rst = ps.executeQuery("select nextval('transaction_no_seq'),current_user");
            while (rst.next())
                rst.getObject(1).toString();
            
            String transNo = rst.getObject(1).toString();
            user = rst.getObject(2).toString();
            
            java.sql.Statement ps22 = connectDB.createStatement();
            java.sql.ResultSet rs22 = ps22.executeQuery("select 'VC'||lpad(nextval('voucher_no_seq'),5,0)");
            while (rs22.next())
                vouchNo = rs22.getObject(1).toString();
            
            java.sql.Statement ps221 = connectDB.createStatement();
            java.sql.ResultSet rs221 = ps221.executeQuery("select supplier_name,code from st_suppliers where category ilike 'KRA%'");
            while (rs221.next())
                KRA = rs221.getObject(1).toString();
            Code = rs221.getObject(2).toString();
            
            java.sql.Statement pss11 = connectDB.createStatement();
            java.sql.ResultSet rsts1 = pss11.executeQuery("select code,activity,current_user from pb_activity where activity_category ='DA'");
            while (rsts1.next())
                actCode1 = rsts1.getObject(1).toString();
            actNames1 = rsts1.getObject(2).toString();
            user = rsts1.getObject(3).toString();
            
            
            java.sql.Statement pss11q = connectDB.createStatement();
            java.sql.ResultSet rsts1q = pss11q.executeQuery("select code,activity from pb_activity where activity_category ='EV'");
            while (rsts1q.next())
                Vats = rsts1q.getObject(1).toString();
            
            // java.sql.Connection con;
            
            
            try {
                connectDB.setAutoCommit(false);
                
                java.sql.Statement ps5 = connectDB.createStatement();
                java.sql.ResultSet rst5 = ps.executeQuery("select nextval('transaction_no_seq')");
                while (rst5.next())
                    rst5.getObject(1).toString();
                ps5.close();
                rst5.close();
                
                // String transNo = rst5.getObject(1).toString();
                
                java.sql.Statement pss = connectDB.createStatement();
                java.sql.ResultSet rsts = pss.executeQuery("select nextval('receipt_no_seq')");
                while (rsts.next())
                    rsts.getObject(1).toString();
                
                String receiptNo = rsts.getObject(1).toString();
                
                for (int i = 0; i < jTable1.getModel().getRowCount(); i++){
                    if(jTable1.getValueAt(i,7) != null){
                        if (Boolean.valueOf(jTable1.getModel().getValueAt(i, 9).toString()) == java.lang.Boolean.TRUE) {
                            
                            if (jTable1.getModel().getValueAt(i, 6).toString().equalsIgnoreCase("shares")){
                                java.sql.PreparedStatement pstmt = connectDB.prepareStatement("insert into shares_transactions values(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)");
                                pstmt.setObject(1,jTable1.getValueAt(i,0).toString());
                                pstmt.setObject(2,jTable1.getValueAt(i,1).toString());
                                pstmt.setString(3,jTextField1.getText());
                                pstmt.setString(4,jTextField1.getText());
                                pstmt.setString(5,"Tsc Building Scheme");
                                pstmt.setString(6,"Knut Nairobi Branch");
                                pstmt.setString(7,"");
                                pstmt.setString(8,"");
                                pstmt.setString(9,"");
                                pstmt.setString(10,"Normal Shares");
                                pstmt.setString(11,"0.00");
                                pstmt.setObject(12,jTable1.getValueAt(i,7).toString());
                                pstmt.setString(13,"");
                                pstmt.setString(14,"");
                                pstmt.setString(15,datePicker2.getDate().toString());
                                pstmt.setString(16,""+transNo+"");
                                pstmt.setBoolean(17,false);
                                pstmt.setString(18,""+receiptNo+"");
                                pstmt.setString(19,"");
                                pstmt.setString(20,"Shares Receipts");
                                pstmt.setObject(21,jTable1.getValueAt(i,2).toString());
                                pstmt.setObject(22,jTable1.getValueAt(i,5).toString());
                                pstmt.setObject(23,jTable1.getValueAt(i,8).toString());
                                pstmt.executeUpdate();
                                
                                
                                
                                java.sql.PreparedStatement pstmt1 = connectDB.prepareStatement("insert into cash_book values(?,?,?,?,?,?,?,?,?,?,?,?,?,?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)");
                                
                                
                                pstmt1.setString(1,"");
                                pstmt1.setString(2,"Shares Receipts");
                                pstmt1.setObject(3,jTable1.getValueAt(i,0).toString());
                                pstmt1.setObject(4,jTable1.getValueAt(i,1).toString());
                                pstmt1.setString(5,jTextField1.getText());
                                pstmt1.setString(6,"");
                                pstmt1.setString(7,"TSC Education Scheme");
                                pstmt1.setString(8,"");
                                pstmt1.setString(9,"");
                                pstmt1.setObject(10,jTable1.getValueAt(i,1).toString());
                                pstmt1.setString(11,"");
                                pstmt1.setString(12,""+receiptNo+"");
                                pstmt1.setString(13,jTextField1.getText());
                                pstmt1.setString(14,"");
                                pstmt1.setString(15,"");
                                pstmt1.setString(16,"");
                                pstmt1.setString(17,"Normal Shares");
                                pstmt1.setObject(18,jTable1.getValueAt(i,7).toString());
                                pstmt1.setString(19,"00");
                                pstmt1.setString(20,datePicker2.getDate().toString());
                                pstmt1.setString(21,""+transNo+"");
                                pstmt1.setBoolean(22,false);
                                pstmt1.setBoolean(23,false);
                                pstmt1.setString(24,"Shares Receipts");
                                
                                
                                
                                
                                
                                   
                                pstmt1.executeUpdate();
                                
                                
                                java.sql.PreparedStatement pstmt812 = connectDB.prepareStatement("UPDATE pb_activity SET ytd_credit = ytd_credit + '"+jTable1.getModel().getValueAt(i,7).toString()+"',mtd_credit = mtd_credit + '"+jTable1.getModel().getValueAt(i,7).toString()+"' where code = '"+glAcc+"'");
                                pstmt812.executeUpdate();
                                
                            }else{
                                
                           
                                java.sql.PreparedStatement pstmt1 = connectDB.prepareStatement("insert into ac_cash_book values(?,?,?,?,?,?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?,?,?,?,?,?,?,?)");
                                pstmt1.setString(1,"");
                                pstmt1.setString(2,"Loan Repayment");
                                
                                
                                pstmt1.setObject(3,jTable1.getValueAt(i,0).toString());
                                pstmt1.setObject(4,jTable1.getValueAt(i,1).toString());
                                pstmt1.setString(5,jTextField1.getText());
                                pstmt1.setString(6,"");
                                pstmt1.setString(7,"TSC Education Scheme");
                                pstmt1.setString(8,"");
                                pstmt1.setString(9,"");
                                pstmt1.setObject(10,jTable1.getValueAt(i,1).toString());
                                pstmt1.setString(11,"");
                                pstmt1.setString(12,""+receiptNo+"");
                                pstmt1.setString(13,jTextField1.getText());
                                pstmt1.setString(14,"");
                                pstmt1.setString(15,"");
                                pstmt1.setString(16,"");
                                pstmt1.setString(17,"Payment");
                                pstmt1.setObject(18,jTable1.getValueAt(i,7).toString());
                                pstmt1.setString(19,"00");
                                pstmt1.setString(20,datePicker2.getDate().toString());
                                pstmt1.setString(21,transNo);
                                pstmt1.setBoolean(22,false);
                                pstmt1.setBoolean(23,false);
                                pstmt1.setBoolean(24,false);
                                pstmt1.setString(25,datePicker2.getDate().toString());
                                pstmt1.setString(26,datePicker2.getDate().toString());
                                pstmt1.setString(27,datePicker2.getDate().toString());
                                pstmt1.setString(28,user);
                                pstmt1.setString(29,"");
                                pstmt1.setString(30,""
                                );
                                pstmt1.setString(31,datePicker2.getDate().toString());
                                
                                pstmt1.executeUpdate();
                                
                                java.sql.PreparedStatement pstmt812 = connectDB.prepareStatement("UPDATE pb_activity SET ytd_credit = ytd_credit + '"+jTable1.getModel().getValueAt(i,7).toString()+"',mtd_credit = mtd_credit + '"+jTable1.getModel().getValueAt(i,7).toString()+"' where code = '"+glAcc+"'");
                                pstmt812.executeUpdate();
                                
                                java.sql.PreparedStatement pstmt = connectDB.prepareStatement("insert into ac_accounts_payable values(?,?,?,?,?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)");
                                pstmt.setObject(1,"");
                                pstmt.setString(4,jTextField1.getText().toString());
                                pstmt.setObject(3,"Loan Payment");
                                pstmt.setString(2,"TSC Education Scheme");
                                pstmt.setString(5,"KNUT Nairobi Branch");
                                pstmt.setString(6, "Normal loan");
                                pstmt.setString(7,"");
                                pstmt.setString(8,""+receiptNo+"");
                                pstmt.setString(9,"");
                                
                                pstmt.setString(10,"");
                                pstmt.setString(11,transNo);
                                pstmt.setString(12,"Payment");
                                pstmt.setObject(13,jTable1.getValueAt(i,7).toString());
                                //  pstmt.setObject(13,jTable1.getValueAt(i,3).toString());
                                pstmt.setObject(14,"00");
                                pstmt.setString(15,datePicker2.getDate().toString());
                                pstmt.setObject(16,"-");
                                pstmt.setString(17,"");
                                pstmt.setObject(18,"false");
                                pstmt.setObject(19,"false");
                                pstmt.setString(20,user);
                                pstmt.setString(21,"");
                                pstmt.executeUpdate();
                                
                                
                                
                                java.sql.PreparedStatement pstmtr3 = connectDB.prepareStatement("UPDATE pb_activity SET ytd_debit = ytd_debit + '"+jTable1.getValueAt(i,7).toString()+"', mtd_debit = mtd_debit + '"+jTable1.getValueAt(i,7).toString()+"' where code = '"+jTable1.getValueAt(i,7).toString()+"'");
                                pstmtr3.executeUpdate();
                                
                                java.sql.PreparedStatement pstmt3 = connectDB.prepareStatement("UPDATE ac_debtors set balance = '"+jTable1.getModel().getValueAt(i,7).toString()+"' WHERE account_no = '"+jTable1.getModel().getValueAt(i,2).toString()+"' ");
                                pstmt3.executeUpdate();
                                
                                connectDB.commit();
                                connectDB.setAutoCommit(true);
                                
                            }
                            
                        }else{}
                        
                        // }else if (Boolean.valueOf(jTable1.getModel().getValueAt(i, 9).toString()) == java.lang.Boolean.FALSE) {
                        
                        
                    }else{}
                    
                }
                
                javax.swing.JOptionPane.showMessageDialog(this, "Insert Done Successfully'","Comfirmation",javax.swing.JOptionPane.INFORMATION_MESSAGE);
                
            }   catch(java.sql.SQLException sq){
                sq.printStackTrace();
                javax.swing.JOptionPane.showMessageDialog(this,sq.getMessage(),"Error Message!",javax.swing.JOptionPane.ERROR_MESSAGE);
                try {
                    connectDB.rollback();
                }catch (java.sql.SQLException sql){
                    javax.swing.JOptionPane.showMessageDialog(this,sql.getMessage(),"Error Message!",javax.swing.JOptionPane.ERROR_MESSAGE);
                }
                System.out.println(sq.getMessage());
                
            }
            javax.swing.JOptionPane.showMessageDialog(this,"Well Done !! Insert Done Successfully","Comfirmation Message!",javax.swing.JOptionPane.INFORMATION_MESSAGE);
            
            
            
        }   catch(java.sql.SQLException sq){
            sq.printStackTrace();
            System.out.println(sq.getMessage());
            javax.swing.JOptionPane.showMessageDialog(this,sq.getMessage(),"Error Message!",javax.swing.JOptionPane.ERROR_MESSAGE);
            try {
                connectDB.rollback();
            }catch (java.sql.SQLException sql){
                javax.swing.JOptionPane.showMessageDialog(this,sql.getMessage(),"Error Message!",javax.swing.JOptionPane.ERROR_MESSAGE);
            }
        }
        // Add your handling code here:*/
    }//GEN-LAST:event_jButton1ActionPerformed
 /*   private void populateTable1() {
  
        int i = 0;
        java.lang.Object tscNo = null;
  
        try {
  
            java.lang.Object listofStaffNos[] = this.getListofStaffNos();
  
  
            for (int j = 0; j < listofStaffNos.length; j++) {
                java.sql.Statement stmtTable1x = connectDB.createStatement();
  
                java.sql.ResultSet rsetTable1x = stmtTable1x.executeQuery("select payroll_no,0.00,0.00 from member ld WHERE ld.m_number ilike '"+listofStaffNos[j]+"'");// and revenue_code = '"+jTextField5.getText()+"' AND paid = false");
                while (rsetTable1x.next()) {
                    tscNo = rsetTable1x.getObject(1);
                }
  
                java.sql.Statement stmtTable1 = connectDB.createStatement();
                java.sql.ResultSet rsetTable1 = stmtTable1.executeQuery("select ld.staff_no,  ld.staff_name, sum(ld.month_deduction), sum(ld.interest),sum(ld.month_deduction + ld.interest),trans_type,loan_no from sacco_deductions_view ld WHERE ld.staff_no ilike '"+listofStaffNos[j]+"' group by ld.staff_no,ld.staff_name,loan_no,trans_type order by trans_type desc");// '"+listofStaffNos[j]+"'order by ld.staff_no  ");// and revenue_code = '"+jTextField5.getText()+"' AND paid = false");
  
  
                while (rsetTable1.next()) {
  
                    System.out.println("Working at table row "+i);
                    jTable1.setValueAt(rsetTable1.getObject(1), i, 0);
                    jTable1.setValueAt(rsetTable1.getObject(2), i, 1);
                    jTable1.setValueAt(rsetTable1.getObject(3), i, 3);
                    jTable1.setValueAt(rsetTable1.getObject(4), i, 4);
                    jTable1.setValueAt(rsetTable1.getObject(5), i, 5);
                    jTable1.setValueAt(rsetTable1.getObject(6), i, 6);
  
                    System.out.println("Working at table row "+i);
                    jTable1.setValueAt(tscNo, i, 2);
  
                    i++;
                }
  
            }
  
  
        } catch(java.sql.SQLException sqlExec) {
  
            javax.swing.JOptionPane.showMessageDialog(this, sqlExec.getMessage());
  
        }
  
    }
  */
    
    
    private void populateTable1(java.lang.String staffNo) {
        
        int i = 0;
        java.lang.Object tscNo = null;
        
        try {
            
            
            java.sql.Statement stmtTable1x = connectDB.createStatement();
            //  java.sql.ResultSet rset = stmt.executeQuery("SELECT count(dealer) FROM ac_debtors WHERE trans_type ilike 'Process deductions' and balance > 0 and account_no between '"+this.jTextField3.getText().toString()+"' and '"+this.jTextField4.getText().toString()+"'");// and revenue_code = '"+jTextField5.getText()+"' AND paid = false");
            
            //java.sql.ResultSet rsetTable1x = stmtTable1x.executeQuery("select payroll_no from member ld WHERE ld.m_number ilike '"+listofStaffNos[j]+"'");// and revenue_code = '"+jTextField5.getText()+"' AND paid = false");
            java.sql.ResultSet rsetTable1x = stmtTable1x.executeQuery("select payroll_no from member ld WHERE ld.m_number ilike '"+staffNo+"'");// and revenue_code = '"+jTextField5.getText()+"' AND paid = false");
            
            
            //java.sql.ResultSet rsetTable1x = stmtTable1x.executeQuery("select account_no from ac_debtors ld WHERE ld.admission_no ilike '"+listofStaffNos[j]+"' and transaction_type ilike 'Process Deductions' and balance > 0 and account_no between '"+this.jTextField3.toString()+"' and '"+this.jTextField4.toString()+"' and DATE BETWEEN '"+this.datePicker1.getDate().toString()+"' and '"+this.datePicker21.getDate().toString()+"'");// and revenue_code = '"+jTextField5.getText()+"' AND paid = false");
            
            while (rsetTable1x.next()) {
                tscNo = rsetTable1x.getObject(1);
            }
            
            java.sql.Statement stmtTable1 = connectDB.createStatement();
            //  java.sql.ResultSet rsetTable1 = stmtTable1.executeQuery("select admission_no,  dealer, deduction_due,interest, balance::numeric, description from ac_debtors WHERE admission_no ilike '"+listofStaffNos[j]+"' order by reason desc");// '"+listofStaffNos[j]+"'order by ld.staff_no  ");// and revenue_code = '"+jTextField5.getText()+"' AND paid = false");
            
            java.sql.ResultSet rsetTable1 = stmtTable1.executeQuery("select admission_no,  dealer, deduction_due,interest, balance::numeric, description from ac_debtors WHERE admission_no ilike '"+staffNo+"' order by reason desc");// '"+listofStaffNos[j]+"'order by ld.staff_no  ");// and revenue_code = '"+jTextField5.getText()+"' AND paid = false");
            //java.sql.ResultSet rsetTable1 = stmtTable1.executeQuery("SELECT date, invoice_no, admission_no,balance::numeric ,'false' FROM ac_debtors WHERE account_no = '"+patient_no+"' AND balance > 0 and date between '"+this.datePicker1.getDate().toString()+"' and '"+this.datePicker2.getDate().toString()+"' order by date");// and revenue_code = '"+jTextField5.getText()+"' AND paid = false");
            
            
            while (rsetTable1.next()) {
                
                System.out.println("Working at table row "+i);
                jTable1.setValueAt(rsetTable1.getObject(1), i, 0);
                jTable1.setValueAt(rsetTable1.getObject(2), i, 1);
                jTable1.setValueAt(rsetTable1.getObject(3), i, 3);
                jTable1.setValueAt(rsetTable1.getObject(4), i, 4);
                jTable1.setValueAt(rsetTable1.getObject(5), i, 5);
                jTable1.setValueAt(rsetTable1.getObject(6), i, 6);
                jTable1.setValueAt(rsetTable1.getObject(5), i, 10);
                System.out.println("Working at table row "+i);
                jTable1.setValueAt(tscNo, i, 2);
                
                i++;
            }
            
            // }
            
            
        } catch(java.sql.SQLException sqlExec) {
            
            sqlExec.printStackTrace();
            
            javax.swing.JOptionPane.showMessageDialog(this, sqlExec.getMessage());
            
        }
        
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JDialog jSearchDialog;
    private javax.swing.JTextField jTextField6;
    private com.afrisoftech.lib.DatePicker datePicker2;
    private javax.swing.JButton jButton2;
    private org.netbeans.lib.sql.NBCachedRowSet searchRowSet1;
    private javax.swing.JButton jButton7;
    private javax.swing.JTextField jTextField3;
    private com.afrisoftech.lib.DatePicker datePicker21;
    private javax.swing.JLabel jLabel91;
    private javax.swing.JTextField jTextField41;
    private javax.swing.JLabel jLabel81;
    private javax.swing.JDialog jSearchDialog1;
    private javax.swing.JButton jButton3;
    private javax.swing.JTextField jTextField5;
    private javax.swing.JLabel jLabel9;
    private org.netbeans.lib.sql.NBCachedRowSet searchRowSet;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JTextField jTextField1111;
    private javax.swing.JPanel jPanel31;
    private javax.swing.JScrollPane jScrollPane1;
    private org.netbeans.lib.sql.NBCachedRowSet crset21;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jSearchScrollPane;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jSearchPanel;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel51;
    private javax.swing.JPanel jSearchPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JTextField jTextField111;
    private javax.swing.JTextField jTextField11;
    private javax.swing.JButton jButton6;
    private javax.swing.JTable jSearchTable;
    private javax.swing.JButton jButton5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JPanel jPanel21;
    private javax.swing.JButton jButton511;
    private javax.swing.JButton jButton51;
    private javax.swing.JButton jButton4;
    private javax.swing.JTable jSearchTable1;
    private com.afrisoftech.lib.DatePicker datePicker1;
    private javax.swing.JScrollPane jSearchScrollPane1;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
    
}
