/*
 * loanpymntintfr.java
 *
 * Created on August 13, 2002, 1:09 PM
 */

package com.afrisoftech.sacco;

/**
 *
 * @author  root
 */
public class BudgetSectionintfr extends javax.swing.JInternalFrame {
     
    private  javax.swing.JComboBox cmbox1;
     private  javax.swing.JComboBox cmbox;
    /** Creates new form loanpymntintfr */
       java.sql.Connection connectDB = null;
        javax.swing.JSpinner beginDateSpinner = null;
    
      javax.swing.JSpinner endDateSpinner = null;
  
    org.netbeans.lib.sql.pool.PooledConnectionSource pConnDB = null;
  
    
    public BudgetSectionintfr(java.sql.Connection connDb, org.netbeans.lib.sql.pool.PooledConnectionSource pconnDB) {
        
        connectDB = connDb;
        
        pConnDB = pconnDB;
        
        initComponents();
    }   
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        java.awt.GridBagConstraints gridBagConstraints;

        try {
            crset1 = new org.netbeans.lib.sql.NBCachedRowSet();
        } catch (java.sql.SQLException e1) {
            e1.printStackTrace();
        }
        try {
            crset6 = new org.netbeans.lib.sql.NBCachedRowSet();
        } catch (java.sql.SQLException e1) {
            e1.printStackTrace();
        }
        buttonGroup1 = new javax.swing.ButtonGroup();
        try {
            crset7 = new org.netbeans.lib.sql.NBCachedRowSet();
        } catch (java.sql.SQLException e1) {
            e1.printStackTrace();
        }
        try {
            crset8 = new org.netbeans.lib.sql.NBCachedRowSet();
        } catch (java.sql.SQLException e1) {
            e1.printStackTrace();
        }
        try {
            crset4 = new org.netbeans.lib.sql.NBCachedRowSet();
        } catch (java.sql.SQLException e1) {
            e1.printStackTrace();
        }
        try  {
            java.lang.Class.forName("org.postgresql.Driver");
            System.out.println("Found driver");
        } catch(java.lang.ClassNotFoundException cnf){
            System.out.println("driver not found");
        }
        jButton1 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jTextField10 = new javax.swing.JTextField();
        jCheckBox2 = new javax.swing.JCheckBox();
        jCheckBox1 = new javax.swing.JCheckBox();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jTable11 = new javax.swing.JTable();
        jTable3 = new javax.swing.JTable();
        jButton5 = new javax.swing.JButton();
        jCheckBox3 = new javax.swing.JCheckBox();
        jPanel3 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jComboBox2 = new javax.swing.JComboBox();
        jLabel51 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();

        crset1.setConnectionSource(pConnDB);
        crset6.setCommand("");
        crset6.setConnectionSource(pConnDB);
        crset7.setCommand("Select workstation FROM workstation ORDER BY workstation");
        crset7.setConnectionSource(pConnDB);
        crset8.setConnectionSource(pConnDB);
        crset4.setConnectionSource(pConnDB);

        getContentPane().setLayout(new java.awt.GridBagLayout());

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Section Estimates");
        setDefaultCloseOperation(javax.swing.WindowConstants.HIDE_ON_CLOSE);
        setVisible(true);
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameActivated(evt);
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
        });

        jButton1.setMnemonic('P');
        jButton1.setText("Post Entries to GL");
        jButton1.setToolTipText("Click here to enter data");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton1MouseClicked(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 13;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(jButton1, gridBagConstraints);

        jButton3.setMnemonic('l');
        jButton3.setText("Clear");
        jButton3.setToolTipText("Click here to clear fields");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton3MouseClicked(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 13;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(jButton3, gridBagConstraints);

        jButton4.setMnemonic('C');
        jButton4.setText("Close");
        jButton4.setToolTipText("Click here to close ");
        jButton4.setSelected(true);
        jButton4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton4MouseClicked(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 13;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(jButton4, gridBagConstraints);

        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 12;
        gridBagConstraints.gridwidth = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(jLabel7, gridBagConstraints);

        jPanel1.setLayout(new java.awt.GridBagLayout());

        jPanel1.setBorder(new javax.swing.border.TitledBorder(" Tick  type of GL Account here"));
        jPanel4.setLayout(new java.awt.GridBagLayout());

        /*  try {
            java.text.DateFormat dateFormat = java.text.DateFormat.getDateInstance(java.text.DateFormat.MEDIUM);
            java.util.Date dateInstance = java.util.Calendar.getInstance().getTime();
            //        java.lang.String dateString2Parse = null;
            //        dateString2Parse = String.valueOf(dateInstance.getDate())+"-"+String.valueOf(dateInstance.getMonth()+1)+"-200"+String.valueOf(dateInstance.getYear()-100);

            java.util.Date formattedDate = dateFormat.parse(dateInstance.toLocaleString());
            System.out.println(dateFormat.format(formattedDate));
            javax.swing.SpinnerDateModel beginDate = new javax.swing.SpinnerDateModel(formattedDate, null, null,java.util.Calendar.DAY_OF_MONTH);
            //   javax.swing.SpinnerDateModel endDate = new javax.swing.SpinnerDateModel(formattedDate, null, null,java.util.Calendar.DAY_OF_MONTH);

            beginDateSpinner = new javax.swing.JSpinner(beginDate);
            //     endDateSpinner = new javax.swing.JSpinner(endDate);

            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 2;
            gridBagConstraints.gridy = 0;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 20);
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            jPanel4.add(beginDateSpinner, gridBagConstraints);

        } catch(java.text.ParseException parseExec) {

            javax.swing.JOptionPane.showMessageDialog(new javax.swing.JFrame(), parseExec.getMessage());

        }
        */
        jPanel4.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jTextField10.setFocusable(false);
        jTextField10.setMinimumSize(new java.awt.Dimension(0, 0));
        jTextField10.setPreferredSize(new java.awt.Dimension(0, 0));
        jTextField10.setEnabled(false);
        jTextField10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField10ActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 1;
        jPanel4.add(jTextField10, gridBagConstraints);

        jCheckBox2.setText("Expenses");
        buttonGroup1.add(jCheckBox2);
        jCheckBox2.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        jCheckBox2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox2ActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel4.add(jCheckBox2, gridBagConstraints);

        jCheckBox1.setText("Income");
        buttonGroup1.add(jCheckBox1);
        jCheckBox1.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        jCheckBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox1ActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel4.add(jCheckBox1, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel1.add(jPanel4, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(jPanel1, gridBagConstraints);

        jPanel2.setLayout(new java.awt.GridBagLayout());

        jPanel2.setBorder(new javax.swing.border.TitledBorder(null, "Enter Estimates here", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 1, 14)));
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Activity", "Code", "Unit Cost", "Quantity", "Debit KShs", "Comments"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                true, false, true, true, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.setShowHorizontalLines(false);
        /*       cmbox2 = new javax.swing.JComboBox();

        try {

            crset1.setConnectionSource(pConnDB);
            crset1.execute("select description from stock_item");

            cmbox2.setModel(new org.netbeans.lib.sql.models.ComboBoxModel(crset1, "description", null, null,null));

            javax.swing.table.TableColumn seditor = this.jTable1.getColumn("Product");

            seditor.setCellEditor(new javax.swing.DefaultCellEditor(cmbox2));

            cmbox2.addActionListener(new java.awt.event.ActionListener() {

                public void actionPerformed(java.awt.event.ActionEvent evt) {

                    cmbox2ActionPerformed(evt);
                }
            });
        } catch(java.sql.SQLException sqlExec) {

            javax.swing.JOptionPane.showMessageDialog(this, sqlExec.getMessage());

        }

        javax.swing.table.TableColumn column = null;
        for (int i = 0; i < 4; i++) {
            column = jTable1.getColumnModel().getColumn(i);
            if (i == 0) {

                column.setPreferredWidth(300); //sport column is bigger
            } else {
                if (i == 1) {
                    column.setPreferredWidth(200);
                } else {
                    if (i == 2) {
                        column.setPreferredWidth(50);
                    }  else
                    column.setPreferredWidth(50);

                }
            }
        }
        */
        jTable1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTable1KeyReleased(evt);
            }
        });

        jScrollPane1.setViewportView(jTable1);

        jTable11.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Activity", "Code", "Unit Cost", "Quantity", "Credit KShs", "Comments"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                true, false, true, true, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable11.setShowHorizontalLines(false);
        /*       cmbox2 = new javax.swing.JComboBox();

        try {

            crset1.setConnectionSource(pConnDB);
            crset1.execute("select description from stock_item");

            cmbox2.setModel(new org.netbeans.lib.sql.models.ComboBoxModel(crset1, "description", null, null,null));

            javax.swing.table.TableColumn seditor = this.jTable1.getColumn("Product");

            seditor.setCellEditor(new javax.swing.DefaultCellEditor(cmbox2));

            cmbox2.addActionListener(new java.awt.event.ActionListener() {

                public void actionPerformed(java.awt.event.ActionEvent evt) {

                    cmbox2ActionPerformed(evt);
                }
            });
        } catch(java.sql.SQLException sqlExec) {

            javax.swing.JOptionPane.showMessageDialog(this, sqlExec.getMessage());

        }

        javax.swing.table.TableColumn column = null;
        for (int i = 0; i < 4; i++) {
            column = jTable1.getColumnModel().getColumn(i);
            if (i == 0) {

                column.setPreferredWidth(300); //sport column is bigger
            } else {
                if (i == 1) {
                    column.setPreferredWidth(200);
                } else {
                    if (i == 2) {
                        column.setPreferredWidth(50);
                    }  else
                    column.setPreferredWidth(50);

                }
            }
        }
        */
        jTable11.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTable11KeyReleased(evt);
            }
        });

        jScrollPane1.setViewportView(jTable11);

        jTable3.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Activity", "Code", "Unit Cost", "Quantity", "Debit KShs", "Credit", "Comments"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                true, false, true, true, true, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable3.setShowHorizontalLines(false);
        /*       cmbox2 = new javax.swing.JComboBox();

        try {

            crset1.setConnectionSource(pConnDB);
            crset1.execute("select description from stock_item");

            cmbox2.setModel(new org.netbeans.lib.sql.models.ComboBoxModel(crset1, "description", null, null,null));

            javax.swing.table.TableColumn seditor = this.jTable1.getColumn("Product");

            seditor.setCellEditor(new javax.swing.DefaultCellEditor(cmbox2));

            cmbox2.addActionListener(new java.awt.event.ActionListener() {

                public void actionPerformed(java.awt.event.ActionEvent evt) {

                    cmbox2ActionPerformed(evt);
                }
            });
        } catch(java.sql.SQLException sqlExec) {

            javax.swing.JOptionPane.showMessageDialog(this, sqlExec.getMessage());

        }

        javax.swing.table.TableColumn column = null;
        for (int i = 0; i < 4; i++) {
            column = jTable1.getColumnModel().getColumn(i);
            if (i == 0) {

                column.setPreferredWidth(300); //sport column is bigger
            } else {
                if (i == 1) {
                    column.setPreferredWidth(200);
                } else {
                    if (i == 2) {
                        column.setPreferredWidth(50);
                    }  else
                    column.setPreferredWidth(50);

                }
            }
        }
        */
        jScrollPane1.setViewportView(jTable3);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 6;
        gridBagConstraints.gridheight = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(15, 30, 10, 30);
        jPanel2.add(jScrollPane1, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 6;
        gridBagConstraints.gridheight = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 10.0;
        getContentPane().add(jPanel2, gridBagConstraints);

        jButton5.setMnemonic('r');
        jButton5.setText("Remove Row");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 13;
        gridBagConstraints.weightx = 1.0;
        getContentPane().add(jButton5, gridBagConstraints);

        jCheckBox3.setText("Set Next Month");
        buttonGroup1.add(jCheckBox3);
        jCheckBox3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox3ActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(jCheckBox3, gridBagConstraints);

        jPanel3.setLayout(new java.awt.GridBagLayout());

        jPanel3.setBorder(new javax.swing.border.TitledBorder(""));
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setText("Section");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 20);
        jPanel3.add(jLabel5, gridBagConstraints);

        jComboBox2.setModel(new org.netbeans.lib.sql.models.ComboBoxModel (crset7, "workstation", null, null, null));
        jComboBox2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox2ActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        jPanel3.add(jComboBox2, gridBagConstraints);

        jLabel51.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel51.setText("Department");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 20);
        jPanel3.add(jLabel51, gridBagConstraints);

        jTextField2.setEditable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        jPanel3.add(jTextField2, gridBagConstraints);

        jLabel1.setText("Month");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel3.add(jLabel1, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 2.0;
        gridBagConstraints.weighty = 1.0;
        jPanel3.add(jTextField1, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 2.0;
        getContentPane().add(jPanel3, gridBagConstraints);

        setBounds(0, 0, 895, 518);
    }//GEN-END:initComponents

    private void jCheckBox3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox3ActionPerformed
             jButton1.setEnabled(true);
      // this.jLabel7.setText("");
       
       int rowsNo = 0; 
       
       try {
       
        
        crset4.setCommand("select activity,activity_code,unit_cost,quantity,debit,credit,comments from sectional_budget");
        crset4.setConnectionSource(pConnDB);
    
       // try {
            crset4.execute();
        
       // crset2.setExecuteOnLoad(true);
        jTable3.setModel(new org.netbeans.lib.sql.models.TableModel(crset4, new org.netbeans.lib.sql.models.TableModel.Column[] {
           new org.netbeans.lib.sql.models.TableModel.Column("activity", "Activity", false),
           new org.netbeans.lib.sql.models.TableModel.Column("activity_code", "Activity Code", false),
           new org.netbeans.lib.sql.models.TableModel.Column("unit_cost", "Unit Cost", true),
           new org.netbeans.lib.sql.models.TableModel.Column("quantity", "Quantity", true),
            new org.netbeans.lib.sql.models.TableModel.Column("debit", "Debit", true),
           new org.netbeans.lib.sql.models.TableModel.Column("credit", "Credit", true),
           // new org.netbeans.lib.sql.models.TableModel.Column("transaction_no", "Prior Yr", false),
           // new org.netbeans.lib.sql.models.TableModel.Column("last_budget", "Last Budget Qty", false),
          new org.netbeans.lib.sql.models.TableModel.Column("comments", "Comments", true)
        
            }));
            
         
        jScrollPane1.setViewportView(jTable3);
               // }
       // }
        
       } catch(java.sql.SQLException sqlex){
          javax.swing.JOptionPane.showMessageDialog(this,sqlex.getMessage(),"Error Message!",javax.swing.JOptionPane.ERROR_MESSAGE);
 
        System.out.println(sqlex.getMessage());
                
        }        // Add your handling code here:
    }//GEN-LAST:event_jCheckBox3ActionPerformed

    private void jComboBox2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox2ActionPerformed
      try {
     //    if (jCheckBox1.getText().equals("Shares")){
        java.sql.Statement pstmt = connectDB.createStatement();
          java.sql.ResultSet rs9 = pstmt.executeQuery("select department from workstation where workstation = '"+jComboBox2.getSelectedItem().toString()+"'"); 
     while (rs9.next()){
            jTextField2.setText(rs9.getObject(1).toString());
           // jTable11.setValueAt(rs.getObject(1),i,1);
     }
          } catch(java.sql.SQLException sqlExec) {
            
            javax.swing.JOptionPane.showMessageDialog(this, sqlExec.getMessage());
            
        } 
      // Add your handling code here:
    }//GEN-LAST:event_jComboBox2ActionPerformed

    private void jTable11KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTable11KeyReleased
       float floatCol2 = java.lang.Float.parseFloat(jTable11.getValueAt(jTable11.getSelectedRow(), 2).toString());
        
       float floatCol3 = java.lang.Float.parseFloat(jTable11.getValueAt(jTable11.getSelectedRow(), 3).toString());

        float resVal = floatCol2 * floatCol3;
        
        java.lang.Float resFloat =new java.lang.Float(resVal);
        
        if (jTable11.getSelectedColumn() == 3) {
            
            jTable11.setValueAt(resFloat, jTable11.getSelectedRow(), 4);
            
        }  // Add your handling code here:
    }//GEN-LAST:event_jTable11KeyReleased

    private void jTable1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTable1KeyReleased
        float floatCol2 = java.lang.Float.parseFloat(jTable1.getValueAt(jTable1.getSelectedRow(), 2).toString());
        
       float floatCol3 = java.lang.Float.parseFloat(jTable1.getValueAt(jTable1.getSelectedRow(), 3).toString());

        float resVal = floatCol2 * floatCol3;
        
        java.lang.Float resFloat =new java.lang.Float(resVal);
        
        if (jTable1.getSelectedColumn() == 3) {
            
            jTable1.setValueAt(resFloat, jTable1.getSelectedRow(), 4);
            
        } // Add your handling code here:
    }//GEN-LAST:event_jTable1KeyReleased

    private void jCheckBox2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox2ActionPerformed
        this.invalidate();   
        //this.jTable11.hide();
           // this.jTable12.hide();
        this.jTable1.grabFocus();
            this.jTable1.setVisible(true);
            this.jScrollPane1.setViewportView(jTable1);
            this.validate();
             cmbox1 = new javax.swing.JComboBox();
     cmbox = new javax.swing.JComboBox();
            try {
            
             crset1.setConnectionSource(pConnDB);
            crset1.execute("select activity from activity WHERE payment_modes !='Receivable'");
            cmbox1.setModel(new org.netbeans.lib.sql.models.ComboBoxModel(crset1, "activity", null, null,null));
           
            javax.swing.table.TableColumn seditor = this.jTable1.getColumn("Activity");
            
            seditor.setCellEditor(new javax.swing.DefaultCellEditor(cmbox1));
            
            cmbox1.addActionListener(new java.awt.event.ActionListener() {
                
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                
                cmbox1ActionPerformed(evt);
            }
        });
      //crset1.close();
 } catch(java.sql.SQLException sqlExec) {
            
            javax.swing.JOptionPane.showMessageDialog(this, sqlExec.getMessage());
            
        } 
     
      
        // Add your handling code here:
    }//GEN-LAST:event_jCheckBox2ActionPerformed

    private void jCheckBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox1ActionPerformed
        this.invalidate();
        jTable11.grabFocus();
        this.jTable11.setVisible(true);
        this.jScrollPane1.setViewportView(jTable11);
        this.validate();
          cmbox1 = new javax.swing.JComboBox();
          cmbox = new javax.swing.JComboBox();
        try {
            
           // crset2.setCommand("select item_description from order_details where order_no = '"+jComboBox1.getSelectedItem()+"'");
            crset6.setConnectionSource(pConnDB);
            //crset2.execute("select distinct drug_prescribed from general_patient_diagnosis where patient_no = '"+jComboBox1.getSelectedItem()+"'");
            crset6.execute("select activity from activity WHERE payment_modes !='Payable'");// where "+table+" = '"+jComboBox1.getSelectedItem()+"'");
     
            cmbox1.setModel(new org.netbeans.lib.sql.models.ComboBoxModel(crset6, "activity", null, null,null));
           
            javax.swing.table.TableColumn seditor = this.jTable11.getColumn("Activity");
            
            seditor.setCellEditor(new javax.swing.DefaultCellEditor(cmbox1));
            
            cmbox1.addActionListener(new java.awt.event.ActionListener() {
                
           public void actionPerformed(java.awt.event.ActionEvent evt) {
                
                cmbox1ActionPerformed(evt);
            }
        });
        } catch(java.sql.SQLException sqlExecp) {
            
            javax.swing.JOptionPane.showMessageDialog(this, sqlExecp.getMessage());
            
        }
           
           
        // Add your handling code here:
    }//GEN-LAST:event_jCheckBox1ActionPerformed

    private void jTextField10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField10ActionPerformed
        // Add your handling code here:
    }//GEN-LAST:event_jTextField10ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
if (jCheckBox1.isSelected()) {
        for (int k = 0; k < jTable11.getRowCount(); k++ ) {
        for (int r = 0; r < jTable11.getColumnCount(); r++ ) {
         jTable11.getModel().setValueAt(null,k,r);
        }
    } 
        
     jComboBox2.setSelectedItem(null);
     jTextField1.setText("");
     jTextField2.setText("");
     jCheckBox1.setSelected(false);
}else{  
        for (int k = 0; k < jTable1.getRowCount(); k++ ) {
        for (int r = 0; r < jTable1.getColumnCount(); r++ ) {
         jTable1.getModel().setValueAt(null,k,r);
        }
    }
     jComboBox2.setSelectedItem(null);
     jTextField1.setText("");
     jTextField2.setText("");
    // jCheckBox1.setSelected(false);
     jCheckBox2.setSelected(false);
}
//this.buttonGroup1.setSelected(javax.swing.DefaultButtonModel.SELECTED,false);
// Add your handling code here:
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
          
        int rows2Delete = jTable1.getSelectedRowCount();
        
        int[] selectedRows = jTable1.getSelectedRows();
        
        if (rows2Delete < 1) {
            
            java.awt.Toolkit.getDefaultToolkit().beep();
            
            javax.swing.JOptionPane.showMessageDialog(this, "There are no selected rows to delete!");
            
        } else {
            
            if (rows2Delete > 1) {
                
               for (int i = 0; i < selectedRows.length; i++) { 
        
                  
                   
                javax.swing.table.DefaultTableModel defTableModel = (javax.swing.table.DefaultTableModel)jTable1.getModel();
        
                defTableModel.removeRow(selectedRows[i]);
                
               }
               
            
                
            } else {
                
                javax.swing.table.DefaultTableModel defTableModel = (javax.swing.table.DefaultTableModel)jTable1.getModel();
        
                defTableModel.removeRow(jTable1.getSelectedRow());
                
                
            }
        }
        
        // Add your handling code here:
    }//GEN-LAST:event_jButton5ActionPerformed
 private void cmbox1ActionPerformed(java.awt.event.ActionEvent evt){
       java.lang.Object selectedGuaran1 = cmbox1.getSelectedItem();
         
         System.out.println("Selected Guarntor : "+selectedGuaran1);
         
        int i = jTable11.getSelectedRow();
       int j = jTable1.getSelectedRow();
       try {
      
         if (jCheckBox1.isSelected()){        
              java.sql.Statement pstmt = connectDB.createStatement();
          java.sql.ResultSet rs = pstmt.executeQuery("select code from activity where activity = '"+selectedGuaran1+"'"); 
     while (rs.next()){
            //jTextField4.setText(rs.getObject(1).toString());
            jTable11.setValueAt(rs.getObject(1),i,1);
     }
        }else{
             if (jCheckBox2.isSelected()){
            
               java.sql.Statement pstmt1 = connectDB.createStatement();
          java.sql.ResultSet rs1 = pstmt1.executeQuery("select code from activity where activity = '"+selectedGuaran1+"'"); 
     while (rs1.next()){
            //jTextField4.setText(rs.getObject(1).toString());
            jTable1.setValueAt(rs1.getObject(1),j,1);
     }
          
         
          
           
         }
             
         }
        
 } catch(java.sql.SQLException sqlex){
        System.out.println(sqlex.getMessage());
 }
        }

    private void formInternalFrameActivated(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameActivated

       // Add your handling code here:
    }//GEN-LAST:event_formInternalFrameActivated

   
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
 
        java.util.Calendar calendar = java.util.Calendar.getInstance();
        
        long dateNow = calendar.getTimeInMillis();
        
        java.sql.Date datenowSql= new java.sql.Date(dateNow);
        
        System.out.println(datenowSql.toString());
 
               
          
          try {
               connectDB.setAutoCommit(false);
               
            
 
        if (jCheckBox3.isSelected()) {
               
               
                for (int i = 0;  i < jTable3.getRowCount(); i++) {
             if (jTable3.getModel().getValueAt(i,0) != null){
             
            java.sql.PreparedStatement pstm = connectDB.prepareStatement("insert into sectional_budget values(?,?,?,?,?,?,?,?,?,?,?)");
            pstm.setObject(1,jTextField1.getText());
            pstm.setObject(2,jTable3.getValueAt(i,0));
            pstm.setObject(3,jTable3.getValueAt(i,1));
             if(jTable3.getValueAt(i,2) == null){
                 pstm.setString(4,"00");
             } else{
            pstm.setObject(4,jTable3.getValueAt(i,2));
             }
           // pstm.setObject(4,jTable1.getValueAt(i,2));
             if(jTable3.getValueAt(i,3) == null){
                 pstm.setString(5,"00");
             } else{
            pstm.setObject(5,jTable3.getValueAt(i,3));
             }
          if(jTable3.getValueAt(i,4) == null){
                 pstm.setString(6,"00");
             } else{
            pstm.setObject(6,jTable3.getValueAt(i,4));
             }
            if(jTable3.getValueAt(i,5) == null){
                 pstm.setString(7,"00");
             } else{
            pstm.setObject(7,jTable3.getValueAt(i,5));
             } 
            //pstm.setObject(7,"00");
            if(jTable3.getValueAt(i,6) == null){
                 pstm.setString(8,"00");
             } else{
            pstm.setObject(8,jTable3.getValueAt(i,6));
             }
         
           pstm.setDate(9,datenowSql);
           pstm.setObject(10,jTextField2.getText());
           pstm.setObject(11,jComboBox2.getSelectedItem().toString());
          
            pstm.executeUpdate();
            
             }
                }
              } else{ 
       
               for (int i = 0;  i < jTable11.getRowCount(); i++) {
             if (jTable11.getModel().getValueAt(i,0) != null){
          
           
             java.sql.PreparedStatement pst = connectDB.prepareStatement("insert into sectional_budget values(?,?,?,?,?,?,?,?,?,?,?)");
           pst.setObject(1,jTextField1.getText());
            pst.setObject(2,jTable11.getValueAt(i,0));
            pst.setObject(3,jTable11.getValueAt(i,1));
             if(jTable11.getValueAt(i,2) == null){
                 pst.setString(4,"00");
             } else{
            pst.setObject(4,jTable11.getValueAt(i,2));
             }
           // pstm.setObject(4,jTable1.getValueAt(i,2));
             if(jTable11.getValueAt(i,3) == null){
                 pst.setString(5,"00");
             } else{
            pst.setObject(5,jTable11.getValueAt(i,3));
             }
          if(jTable11.getValueAt(i,4) == null){
                 pst.setString(7,"00");
             } else{
            pst.setObject(7,jTable11.getValueAt(i,4));
             }
           // pst.setObject(7,jTable11.getValueAt(i,4));
            pst.setObject(6,"00");
             if(jTable11.getValueAt(i,5) == null){
                 pst.setString(8,"");
             } else{
            pst.setObject(8,jTable11.getValueAt(i,5));
             }
           pst.setDate(9,datenowSql);
           pst.setObject(10,jTextField2.getText());
           pst.setObject(11,jComboBox2.getSelectedItem().toString());
           
            pst.executeUpdate();
             }
               }
              }
              connectDB.commit();
            connectDB.setAutoCommit(true);
         
             jLabel7.setForeground(java.awt.Color.blue);
            jLabel7.setText("Data Inserted successfully");
             
                }   catch(java.sql.SQLException sq){
                     javax.swing.JOptionPane.showMessageDialog(this, sq.getMessage(),"Error Message!",javax.swing.JOptionPane.ERROR_MESSAGE);
          
                   try {
                  connectDB.rollback();
                  }catch (java.sql.SQLException sql){
                  javax.swing.JOptionPane.showMessageDialog(this,sql.getMessage(),"Error Message!",javax.swing.JOptionPane.ERROR_MESSAGE);
              } 
                   ///// jLabel7.setForeground(java.awt.Color.red);
                   // jLabel7.setText("Data not inserted");
            System.out.println(sq.getMessage());
              }
                     
       // }
   
              // Add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed
 //private void cmboxActionPerformed(javax.swing. 
    private void jButton1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton1MouseClicked
       // Add your handling code here:
    }//GEN-LAST:event_jButton1MouseClicked

    private void jButton3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton3MouseClicked
     // jTextField1.setText("");
      //jTextField2.setText(""); 
      //jTextField3.setText("");
    //  jTextField4.setText("");
      //jTextField12.setText("");// Add your handling code here:
    }//GEN-LAST:event_jButton3MouseClicked

    private void jButton4MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton4MouseClicked
    this.setVisible(false);        // Add your handling code here:
    }//GEN-LAST:event_jButton4MouseClicked
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JCheckBox jCheckBox3;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JTable jTable3;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel51;
    private javax.swing.JPanel jPanel2;
    private org.netbeans.lib.sql.NBCachedRowSet crset4;
    private javax.swing.JButton jButton3;
    private javax.swing.JTable jTable11;
    private org.netbeans.lib.sql.NBCachedRowSet crset8;
    private javax.swing.JButton jButton5;
    private javax.swing.JTextField jTextField10;
    private javax.swing.JLabel jLabel7;
    private org.netbeans.lib.sql.NBCachedRowSet crset6;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JPanel jPanel1;
    private org.netbeans.lib.sql.NBCachedRowSet crset1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JComboBox jComboBox2;
    private javax.swing.JButton jButton4;
    private org.netbeans.lib.sql.NBCachedRowSet crset7;
    private javax.swing.JCheckBox jCheckBox2;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JTable jTable1;
    private javax.swing.JLabel jLabel5;
    // End of variables declaration//GEN-END:variables
    
}
