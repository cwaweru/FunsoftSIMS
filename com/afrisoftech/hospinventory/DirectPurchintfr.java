/*
 * Requisitions.java
 *
 * Created on April 22, 2003, 5:12 PM
 */

package com.afrisoftech.hospinventory;

/**
 *
 * @author  root
 */
public class DirectPurchintfr extends javax.swing.JInternalFrame {
    javax.swing.JComboBox cmbox =null;
    javax.swing.JSpinner dateSpinner = null;
    
    double resVal1 = 0.00;
    
    double resVal11 = 0.00;
    java.sql.Connection connectDB = null;
    
    org.netbeans.lib.sql.pool.PooledConnectionSource pConnDB = null;
    javax.swing.table.TableModel tableModel;
    
    public DirectPurchintfr(java.sql.Connection connDb, org.netbeans.lib.sql.pool.PooledConnectionSource pconnDB) {
        
        connectDB = connDb;
        
        pConnDB = pconnDB;
        
        initComponents();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        java.awt.GridBagConstraints gridBagConstraints;

        try {
            crset1 = new org.netbeans.lib.sql.NBCachedRowSet();
        } catch (java.sql.SQLException e1) {
            e1.printStackTrace();
        }
        try {
            crset2 = new org.netbeans.lib.sql.NBCachedRowSet();
        } catch (java.sql.SQLException e1) {
            e1.printStackTrace();
        }
        try {
            crset21 = new org.netbeans.lib.sql.NBCachedRowSet();
        } catch (java.sql.SQLException e1) {
            e1.printStackTrace();
        }
        try {
            crset11 = new org.netbeans.lib.sql.NBCachedRowSet();
        } catch (java.sql.SQLException e1) {
            e1.printStackTrace();
        }
        try {
            crset3 = new org.netbeans.lib.sql.NBCachedRowSet();
        } catch (java.sql.SQLException e1) {
            e1.printStackTrace();
        }
        jSearchDialog = new javax.swing.JDialog();
        jSearchPanel = new javax.swing.JPanel();
        jTextField111 = new javax.swing.JTextField();
        jSearchScrollPane = new javax.swing.JScrollPane();
        jSearchTable = new javax.swing.JTable();
        jButton9 = new javax.swing.JButton();
        try {
            searchRowSet = new org.netbeans.lib.sql.NBCachedRowSet();
        } catch (java.sql.SQLException e1) {
            e1.printStackTrace();
        }
        buttonGroup1 = new javax.swing.ButtonGroup();
        jSearchDialog2 = new javax.swing.JDialog();
        jSearchPanel2 = new javax.swing.JPanel();
        jTextField113 = new javax.swing.JTextField();
        jSearchScrollPane2 = new javax.swing.JScrollPane();
        jSearchTable2 = new javax.swing.JTable();
        jButton42 = new javax.swing.JButton();
        jButton52 = new javax.swing.JButton();
        try {
            searchRowSet2 = new org.netbeans.lib.sql.NBCachedRowSet();
        } catch (java.sql.SQLException e1) {
            e1.printStackTrace();
        }
        jPanel1 = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jTextField7 = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        jTextField9 = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jTextField3 = new javax.swing.JTextField();
        datePicker1 = new com.afrisoftech.lib.DatePicker();
        jLabel4 = new javax.swing.JLabel();
        jComboBox2 = new javax.swing.JComboBox();
        jPanel41 = new javax.swing.JPanel();
        jTextField91 = new javax.swing.JTextField();
        searchButton = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        postbtn = new javax.swing.JButton();
        resetbtn = new javax.swing.JButton();
        cancelbtn = new javax.swing.JButton();
        exitbtn = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jPanel4 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        jTextField4 = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jTextField5 = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jTextField61 = new javax.swing.JTextField();
        jCheckBox1 = new javax.swing.JCheckBox();
        jCheckBox2 = new javax.swing.JCheckBox();
        jTextField6 = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();

        crset1.setConnectionSource(pConnDB);
        crset2.setConnectionSource(pConnDB);
        crset21.setConnectionSource(pConnDB);
        crset11.setCommand("SELECT supplier_name FROM st_suppliers ORDER BY supplier_name");
        crset11.setConnectionSource(pConnDB);
        crset11.setTransactionIsolation(1);
        crset3.setCommand("");
        crset3.setConnectionSource(pConnDB);
        crset3.setTransactionIsolation(1);
        jSearchDialog.getContentPane().setLayout(new java.awt.GridBagLayout());

        jSearchDialog.setModal(true);
        jSearchDialog.setUndecorated(true);
        jSearchPanel.setLayout(new java.awt.GridBagLayout());

        jSearchPanel.setBorder(new javax.swing.border.EtchedBorder());
        jTextField111.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                jTextField111CaretUpdate(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 10.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 100);
        jSearchPanel.add(jTextField111, gridBagConstraints);

        jSearchTable.setShowHorizontalLines(false);
        /*    try {
            searchRowSet.setCommand("select product,selling_price,gl_code FROM st_stock_prices WHERE department = 'Pharmacy' order by product");
            searchRowSet.setConnectionSource(pConnDB);

            searchRowSet.execute();

            // crset2.setExecuteOnLoad(true);
            jSearchTable.setModel(new org.netbeans.lib.sql.models.TableModel(searchRowSet, new org.netbeans.lib.sql.models.TableModel.Column[] {
                new org.netbeans.lib.sql.models.TableModel.Column("product", "Description", false),
                new org.netbeans.lib.sql.models.TableModel.Column("selling_price", "Amount", false),
                new org.netbeans.lib.sql.models.TableModel.Column("gl_code", "Gl_code", false)

            }));
            // jSearchScrollPane.setViewportView(jSearchTable);

        } catch(java.sql.SQLException sqlex){
            javax.swing.JOptionPane.showMessageDialog(this,sqlex.getMessage(),"Error Message!",javax.swing.JOptionPane.ERROR_MESSAGE);

            System.out.println(sqlex.getMessage());
        }
        */
        jSearchTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jSearchTableMouseClicked(evt);
            }
        });

        jSearchScrollPane.setViewportView(jSearchTable);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 20.0;
        jSearchPanel.add(jSearchScrollPane, gridBagConstraints);

        jButton9.setText("Dispose");
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jSearchPanel.add(jButton9, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jSearchDialog.getContentPane().add(jSearchPanel, gridBagConstraints);

        searchRowSet.setCommand("SELECT DISTINCT description,units FROM st_stock_item ORDER BY description");
        searchRowSet.setConnectionSource(pConnDB);
        jSearchDialog2.getContentPane().setLayout(new java.awt.GridBagLayout());

        jSearchDialog2.setModal(true);
        jSearchDialog2.setUndecorated(true);
        jSearchPanel2.setLayout(new java.awt.GridBagLayout());

        jSearchPanel2.setBorder(new javax.swing.border.EtchedBorder());
        jTextField113.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                jTextField113CaretUpdate(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 300.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        jSearchPanel2.add(jTextField113, gridBagConstraints);

        jSearchTable2.setToolTipText("Click on the target row to select the patient from the search.");
        jSearchTable2.setShowHorizontalLines(false);
        /*javax.swing.table.TableColumn column = null;

        for (int i = 0; i < 4; i++) {

            column = jSearchTable2.getColumnModel().getColumn(i);

            if (i == 1) {

                column.setPreferredWidth(400);
                //sport column is bigger
            } else {

                column.setPreferredWidth(200);

            }
        }
        */
        jSearchTable2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jSearchTable2MouseClicked(evt);
            }
        });

        jSearchScrollPane2.setViewportView(jSearchTable2);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 20.0;
        jSearchPanel2.add(jSearchScrollPane2, gridBagConstraints);

        jButton42.setText("Select");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jSearchPanel2.add(jButton42, gridBagConstraints);

        jButton52.setText("Close");
        jButton52.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton52ActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jSearchPanel2.add(jButton52, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jSearchDialog2.getContentPane().add(jSearchPanel2, gridBagConstraints);

        searchRowSet2.setConnectionSource(pConnDB);

        getContentPane().setLayout(new java.awt.GridBagLayout());

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Direct Purchasing");
        setVisible(true);
        jPanel1.setLayout(new java.awt.GridBagLayout());

        /*        javax.swing.SpinnerDateModel spinerDate = new javax.swing.SpinnerDateModel();
        dateSpinner = new javax.swing.JSpinner(spinerDate);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 30);
        jPanel1.add(dateSpinner, gridBagConstraints);
        */
        jPanel1.setBorder(new javax.swing.border.EtchedBorder());
        jLabel9.setText("Received from");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 30, 0, 0);
        jPanel1.add(jLabel9, gridBagConstraints);

        jLabel10.setText("Invoice No.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 30, 0, 0);
        jPanel1.add(jLabel10, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel1.add(jTextField7, gridBagConstraints);

        jLabel12.setText("Received By");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 30, 0, 0);
        jPanel1.add(jLabel12, gridBagConstraints);

        jTextField9.setEditable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        jPanel1.add(jTextField9, gridBagConstraints);

        jLabel13.setText("Store Name");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 30, 0, 0);
        jPanel1.add(jLabel13, gridBagConstraints);

        jLabel2.setText("Delivered By");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 30, 0, 0);
        jPanel1.add(jLabel2, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        jPanel1.add(jTextField3, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 40);
        jPanel1.add(datePicker1, gridBagConstraints);

        jLabel4.setText("Invoice Date");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 30, 0, 0);
        jPanel1.add(jLabel4, gridBagConstraints);

        jComboBox2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox2ActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        jPanel1.add(jComboBox2, gridBagConstraints);

        jPanel41.setLayout(new java.awt.GridBagLayout());

        jPanel41.setBorder(new javax.swing.border.EtchedBorder());
        jTextField91.setEditable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel41.add(jTextField91, gridBagConstraints);

        searchButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/kiwi/images/date.gif")));
        searchButton.setToolTipText("Search");
        searchButton.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        searchButton.setMaximumSize(new java.awt.Dimension(74, 53));
        searchButton.setMinimumSize(new java.awt.Dimension(74, 53));
        searchButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        jPanel41.add(searchButton, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 3.0;
        gridBagConstraints.weighty = 1.0;
        jPanel1.add(jPanel41, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 4.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        getContentPane().add(jPanel1, gridBagConstraints);

        jPanel3.setLayout(new java.awt.GridBagLayout());

        jPanel3.setBorder(new javax.swing.border.EtchedBorder());
        postbtn.setMnemonic('o');
        postbtn.setText("Ok");
        postbtn.setToolTipText("Click to save");
        postbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                postbtnActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel3.add(postbtn, gridBagConstraints);

        resetbtn.setMnemonic('p');
        resetbtn.setText("Ok & Print");
        resetbtn.setToolTipText("Click this to print the G.R.N");
        resetbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetbtnActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel3.add(resetbtn, gridBagConstraints);

        cancelbtn.setMnemonic('l');
        cancelbtn.setText("Clear");
        cancelbtn.setToolTipText("Clears all the data selected");
        cancelbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelbtnActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel3.add(cancelbtn, gridBagConstraints);

        exitbtn.setMnemonic('c');
        exitbtn.setText("Close");
        exitbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitbtnActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel3.add(exitbtn, gridBagConstraints);

        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanel3.add(jLabel5, gridBagConstraints);

        jButton1.setMnemonic('r');
        jButton1.setText("Remove Row");
        jButton1.setToolTipText("Deletes the selected row inside table");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel3.add(jButton1, gridBagConstraints);

        jButton2.setMnemonic('h');
        jButton2.setText("Help");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel3.add(jButton2, gridBagConstraints);

        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanel3.add(jLabel3, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 10, 0, 10);
        getContentPane().add(jPanel3, gridBagConstraints);

        jPanel2.setLayout(new java.awt.GridBagLayout());

        jPanel2.setBorder(new javax.swing.border.EtchedBorder());
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Item", "Units", "Package", "Qty", "Unit Price", "Disc %", "Disc. Total", "Vat %", "Vat Amt.", "Value", "Batch No.", "Exp. Date"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Object.class, java.lang.Object.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jTable1.setGridColor(new java.awt.Color(204, 204, 255));
        cmbox = new javax.swing.JComboBox();
        //try{
            /*      crset2.setConnectionSource(pConnDB);
            crset2.setCommand("select distinct description FROM st_stock_item order by description");

            cmbox.setModel(new org.netbeans.lib.sql.models.ComboBoxModel(crset2, "description", null, null, null));
            javax.swing.table.TableColumn s = this.jTable1.getColumn("Item");
            s.setCellEditor(new javax.swing.DefaultCellEditor(cmbox));
            cmbox.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    cmboxActionPerformed(evt);
                }
            });
            //      } catch(java.sql.SQLException sqlExec) {

            //        javax.swing.JOptionPane.showMessageDialog(this, sqlExec.getMessage());

            //   }
        */
        javax.swing.table.TableColumn column = null;
        for (int i = 0; i < 12; i++) {
            column = jTable1.getColumnModel().getColumn(i);
            if (i == 0) {

                column.setPreferredWidth(500); //sport column is bigger
            } else {
                //if (i == 2) {
                    column.setPreferredWidth(200);
                    // }  else
                //column.setPreferredWidth(50);

            }
        }

        jTable1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTable1KeyReleased(evt);
            }
        });

        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });

        jScrollPane2.setViewportView(jTable1);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 8;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipady = 10;
        gridBagConstraints.weightx = 2.0;
        gridBagConstraints.weighty = 50.0;
        jPanel2.add(jScrollPane2, gridBagConstraints);

        jPanel4.setLayout(new java.awt.GridBagLayout());

        jPanel4.setBorder(new javax.swing.border.TitledBorder(""));
        jLabel6.setText("Total Discount");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        jPanel4.add(jLabel6, gridBagConstraints);

        jTextField4.setEditable(false);
        jTextField4.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTextField4.setText("0.00");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 20);
        jPanel4.add(jTextField4, gridBagConstraints);

        jLabel7.setText("VAT Amount");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        jPanel4.add(jLabel7, gridBagConstraints);

        jTextField1.setEditable(false);
        jTextField1.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTextField1.setText("0.00");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 20);
        jPanel4.add(jTextField1, gridBagConstraints);

        jLabel8.setText("Net Value");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        jPanel4.add(jLabel8, gridBagConstraints);

        jTextField5.setEditable(false);
        jTextField5.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTextField5.setText("0.00");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 20);
        jPanel4.add(jTextField5, gridBagConstraints);

        jLabel1.setText("Gross Value");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        jPanel4.add(jLabel1, gridBagConstraints);

        jTextField2.setEditable(false);
        jTextField2.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTextField2.setText("0.00");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.2;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 20);
        jPanel4.add(jTextField2, gridBagConstraints);

        jTextField61.setMinimumSize(new java.awt.Dimension(0, 0));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 20);
        jPanel4.add(jTextField61, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        jPanel2.add(jPanel4, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 100.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 5);
        getContentPane().add(jPanel2, gridBagConstraints);

        jCheckBox1.setText("Main Store");
        buttonGroup1.add(jCheckBox1);
        jCheckBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox1ActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.weightx = 1.0;
        getContentPane().add(jCheckBox1, gridBagConstraints);

        jCheckBox2.setText("Sub Store");
        buttonGroup1.add(jCheckBox2);
        jCheckBox2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox2ActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        getContentPane().add(jCheckBox2, gridBagConstraints);

        jTextField6.setEditable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        getContentPane().add(jTextField6, gridBagConstraints);

        jLabel11.setText("Gl Code");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(jLabel11, gridBagConstraints);

        setBounds(0, 0, 740, 450);
    }//GEN-END:initComponents
    
    private void jSearchTable2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jSearchTable2MouseClicked
        // jTextField1.setText(jSearchTable2.getValueAt(jSearchTable2.getSelectedRow(), 1).toString());
        jTextField91.setText(jSearchTable2.getValueAt(jSearchTable2.getSelectedRow(), 0).toString());
        jSearchDialog2.dispose();
        try {
            java.sql.Statement pstmt = connectDB.createStatement();
            
            java.sql.ResultSet rs = pstmt.executeQuery("select current_user");
            while (rs.next()){
                
                jTextField9.setText(rs.getObject(1).toString());
            }
        } catch(java.sql.SQLException sqlex){
            System.out.println(sqlex.getMessage());
        } // Add your handling code here:
    }//GEN-LAST:event_jSearchTable2MouseClicked
    
    private void jButton52ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton52ActionPerformed
        this.jSearchDialog2.dispose();        // Add your handling code here:
    }//GEN-LAST:event_jButton52ActionPerformed
    
    private void jTextField113CaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_jTextField113CaretUpdate
        if(jTextField113.getCaretPosition() < 3){
            System.out.println("Nothing");
        }else{
            try {
                
                searchRowSet2.execute("SELECT supplier_name, code as account_no from st_suppliers where supplier_name ILIKE '"+jTextField113.getText()+"%' order by supplier_name");
                jSearchTable2.setModel(new org.netbeans.lib.sql.models.TableModel(searchRowSet2, new org.netbeans.lib.sql.models.TableModel.Column[] {
                    new org.netbeans.lib.sql.models.TableModel.Column("supplier_name", "Supplier", false),
                    new org.netbeans.lib.sql.models.TableModel.Column("account_no", "A/C No.", false)
                     }));
                jSearchTable2.setShowHorizontalLines(false);
                jSearchScrollPane2.setViewportView(jSearchTable2);
                
                
            } catch(java.sql.SQLException sqlExec) {
                
                javax.swing.JOptionPane.showMessageDialog(this, sqlExec.getMessage());
                
            }
        }         // Add your handling code here:
    }//GEN-LAST:event_jTextField113CaretUpdate
    private void searchButtonClicked() {
        
        System.out.println("Showing dialog");
        
        // java.awt.Point point = this.jComboBox1311.getLocationOnScreen();
        java.awt.Point point = this.jTextField91.getLocationOnScreen();
        
        jSearchDialog2.setSize(400,200);
        
        jSearchDialog2.setLocation(point);
        
        jSearchDialog2.show();
        
        
        
    }
    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonActionPerformed
        for (int k = 0; k < jSearchTable2.getRowCount(); k++ ) {
            for (int r = 0; r < jSearchTable2.getColumnCount(); r++ ) {
                jSearchTable2.getModel().setValueAt(null,k,r);
            }
        }
        this.jTextField113.setText("");
        searchButtonClicked();
        
        // Add your handling code here:
    }//GEN-LAST:event_searchButtonActionPerformed
    
    private void jCheckBox2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox2ActionPerformed
        crset3.setCommand("select store_name from st_stores");
        crset3.setConnectionSource(pConnDB);
        jComboBox2.setModel(new org.netbeans.lib.sql.models.ComboBoxModel(crset3, "store_name", null, null, null));
        jComboBox2.addActionListener(new java.awt.event.ActionListener() {
            
         public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox2ActionPerformed(evt);
            }
        });
       
        // Add your handling code here:
    }//GEN-LAST:event_jCheckBox2ActionPerformed
    
    private void jComboBox2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox2ActionPerformed
        if(this.jCheckBox1.isSelected()){
            try {
                java.sql.Statement pstmt = connectDB.createStatement();
                
                java.sql.ResultSet rs = pstmt.executeQuery("select gl_stock_code from st_main_stores where store_name ilike '"+jComboBox2.getSelectedItem().toString()+"'");
                while (rs.next()){
                    
                    this.jTextField6.setText(rs.getObject(1).toString());
                }
            } catch(java.sql.SQLException sqlex){
                System.out.println(sqlex.getMessage());
            }
        }else{
            try {
                java.sql.Statement pstmt = connectDB.createStatement();
                
                java.sql.ResultSet rs = pstmt.executeQuery("select glstock_code from st_stores  where store_name ilike '"+jComboBox2.getSelectedItem().toString()+"'");
                while (rs.next()){
                    
                    this.jTextField6.setText(rs.getObject(1).toString());
                }
            } catch(java.sql.SQLException sqlex){
                System.out.println(sqlex.getMessage());
            }
        }
        // Add your handling code here:
    }//GEN-LAST:event_jComboBox2ActionPerformed
    
    private void jCheckBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox1ActionPerformed
      
        crset3.setCommand("select store_name from st_main_stores");
        crset3.setConnectionSource(pConnDB);
           jComboBox2.setModel(new org.netbeans.lib.sql.models.ComboBoxModel(crset3, "store_name", null, null, null));
        
    }//GEN-LAST:event_jCheckBox1ActionPerformed
    
    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        if (jTable1.getSelectedColumn() == 0) {
            
            this.cmboxMouseClicked();
        }         // Add your handling code here:
    }//GEN-LAST:event_jTable1MouseClicked
    private void cmboxMouseClicked() {
        
        System.out.println("Showing dialog");
        java.awt.Point point = jScrollPane2.getLocationOnScreen();
        jSearchDialog.setSize(400,200);
        jSearchDialog.setLocation(point);
        jSearchDialog.show();
    }
    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
        jSearchDialog.dispose();         // Add your handling code here:
    }//GEN-LAST:event_jButton9ActionPerformed
    
    private void jTextField111CaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_jTextField111CaretUpdate
          if(this.jTextField111.getCaretPosition() < 3){
            System.out.print("Nothing");
        }else{
            try {
                       searchRowSet.execute("select DISTINCT description,units,buying_price,packaging FROM st_stock_item WHERE description ILIKE '"+jTextField111.getText()+"%' order by description");
                
                jSearchTable.setModel(new org.netbeans.lib.sql.models.TableModel(searchRowSet, new org.netbeans.lib.sql.models.TableModel.Column[] {
                    new org.netbeans.lib.sql.models.TableModel.Column("description", "Desc.", false),
                    new org.netbeans.lib.sql.models.TableModel.Column("units", "Units", false),
                    new org.netbeans.lib.sql.models.TableModel.Column("packaging", "Package", false),
                    new org.netbeans.lib.sql.models.TableModel.Column("buying_price", "Buying Price", false)
                    
                }));
                jSearchScrollPane.setViewportView(jSearchTable);
                System.out.println("Cannot sort out");
            } catch(java.sql.SQLException sqlExec) {
                
                javax.swing.JOptionPane.showMessageDialog(this, sqlExec.getMessage());
                
            }
       
        }
        // Add your handling code here:
    }//GEN-LAST:event_jTextField111CaretUpdate
    
    private void jSearchTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jSearchTableMouseClicked
        jTable1.setValueAt(jSearchTable.getValueAt(jSearchTable.getSelectedRow(),0),jTable1.getSelectedRow(), 0);
        jTable1.setValueAt(jSearchTable.getValueAt(jSearchTable.getSelectedRow(),1),jTable1.getSelectedRow(), 1);
        jTable1.setValueAt(jSearchTable.getValueAt(jSearchTable.getSelectedRow(),2),jTable1.getSelectedRow(), 2);
        jTable1.setValueAt(jSearchTable.getValueAt(jSearchTable.getSelectedRow(),3),jTable1.getSelectedRow(), 4);
        
        jTable1.setValueAt(new java.lang.Double(0), jTable1.getSelectedRow(), 5);
        jTable1.setValueAt(new java.lang.Double(0), jTable1.getSelectedRow(), 7);
        jTable1.setValueAt(new java.lang.Double(0), jTable1.getSelectedRow(),6);
        jTable1.setValueAt(new java.lang.Double(0), jTable1.getSelectedRow(), 9);
        //  jTable1.setValueAt(new java.lang.Double(1), jTable1.getSelectedRow(), 2);
        int j = 0;
        
        
        try {
            java.sql.Statement pstmt = connectDB.createStatement();
            java.sql.Statement pstmt1 = connectDB.createStatement();
            
            java.sql.ResultSet rs1 = pstmt1.executeQuery("select count(product) from st_stock_prices sc where product = '"+jSearchTable.getValueAt(jSearchTable.getSelectedRow(),0)+"'");
            while (rs1.next())
                j = rs1.getInt(1);
            // if (j > 0){
            
            //   java.sql.ResultSet rs = pstmt.executeQuery("select sum(transfer_price)::numeric from st_stock_prices sc where product = '"+jSearchTable.getValueAt(jSearchTable.getSelectedRow(),0)+"'");
            //   while (rs.next()){
            
            //     jTable1.setValueAt(,jTable1.getSelectedRow(), 6);
            //   jTable1.setValueAt(rs.getObject(1),jTable1.getSelectedRow(),3);
            
            //  }
            // } else {
            //   jTable1.setValueAt("0.00",jTable1.getSelectedRow(),2);
            //  }
        } catch(java.sql.SQLException sqlex){
            System.out.println(sqlex.getMessage());
        }
        
        
        jSearchDialog.dispose();        // Add your handling code here:
    }//GEN-LAST:event_jSearchTableMouseClicked
    
    private void resetbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetbtnActionPerformed
        double quantity = 0.00;
        double price = 0.00;
        double pkge = 0.00;
        double qty = 0.00;
        double uprice = 0.00;
        double rates = 0.00;
        
        java.util.Calendar calendar = java.util.Calendar.getInstance();
        
        long dateNow = calendar.getTimeInMillis();
        
        java.sql.Date datenowSql= new java.sql.Date(dateNow);
        
        String Stock = null;
        String actCode = null;
        String accountCode = null;
        String transNo = null;
        String glType = null;
        String VouchNo = null;
        String StocktransNo = null;
        
        int invoices = 0;
        try {
            
            postbtnActionPerformed(evt);
            //  connectDB.setAutoCommit(false);
            //   if(this.jComboBox2.getSelectedItem().toString().equalsIgnoreCase("main store")){
            java.sql.Statement pst2 = connectDB.createStatement();
            java.sql.ResultSet rs = pst2.executeQuery("select code,activity from pb_activity where code ilike '"+this.jTextField6.getText()+"%'");
            while (rs.next())
                actCode = rs.getObject(1).toString();
            Stock = rs.getObject(2).toString();
            
            java.sql.Statement pst1 = connectDB.createStatement();
            java.sql.ResultSet rs1 = pst1.executeQuery("select code,activity from pb_activity where activity_category = 'CP'");
            while (rs1.next())
                accountCode = rs1.getObject(1).toString();
            glType = rs1.getObject(2).toString();
       /*     java.sql.Statement ps = connectDB.createStatement();
            java.sql.Statement ps22 = connectDB.createStatement();
            java.sql.Statement ps11 = connectDB.createStatement();
            java.sql.Statement ps11r = connectDB.createStatement();
            java.sql.ResultSet rst = ps11.executeQuery("select nextval('transaction_no_seq')");
            while (rst.next())
                rst.getObject(1).toString();
        
            transNo = rst.getObject(1).toString();
        
        
             java.sql.ResultSet rstr = ps11r.executeQuery("SELECT mark_up FROM st_stores WHERE store_name ILIKE '"+jComboBox2.getSelectedItem().toString()+"'");
            while (rstr.next())
            rates = rstr.getDouble(1);
        
            java.sql.Statement pst21 = connectDB.createStatement();
            java.sql.ResultSet rs111 = pst21.executeQuery("select nextval('stock_delivery_seq')");
            while (rs111.next())
                StocktransNo = rs111.getObject(1).toString();
            java.sql.PreparedStatement pstmt = connectDB.prepareStatement("insert into st_stock_cardex values(?,?,?,?,?,?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?,?,?)");
            for (int i = 0; i< jTable1.getRowCount(); i++) {
                if (jTable1.getModel().getValueAt(i,9) != null){
        
                    pkge = Double.parseDouble(jTable1.getModel().getValueAt(i, 2).toString());
                    qty = Double.parseDouble(jTable1.getModel().getValueAt(i, 3).toString());
                    uprice = Double.parseDouble(jTable1.getModel().getValueAt(i, 4).toString());
        
                    quantity = qty;
        
                    price = uprice/pkge;
        
                    pstmt.setString(1,"");
                    pstmt.setString(2,jComboBox2.getSelectedItem().toString());
                    pstmt.setObject(3,jTable1.getValueAt(i,0));
                    pstmt.setObject(4,null);
                    pstmt.setObject(5,"00");
                    pstmt.setDouble(6,price);
                    // pstmt.setObject(6,jTable1.getValueAt(i,4));
                    pstmt.setObject(7,jTable1.getValueAt(i,1));
                    pstmt.setString(8,jTextField9.getText());
                    pstmt.setString(9,jTextField3.getText());
                    pstmt.setString(10,"");
                    pstmt.setDouble(11,quantity);
                    // pstmt.setObject(11,jTable1.getValueAt(i,3));
                    pstmt.setString(12,"00");
                    pstmt.setObject(13,jTable1.getValueAt(i,6));
                    pstmt.setString(14,"");
                    pstmt.setString(15,"");
                    pstmt.setObject(16,jTextField91.getText());
                    pstmt.setString(17,"");
                    pstmt.setString(18,datePicker1.getDate().toString());
                    pstmt.setString(19,"");
                    pstmt.setString(20,"Receiving");
                    pstmt.setObject(21,jTable1.getValueAt(i,9));
                    pstmt.setObject(22,jTable1.getValueAt(i,6));
                    pstmt.setString(23,jTextField6.getText());
                    if(jTextField7.getText().equals("")){
                        javax.swing.JOptionPane.showMessageDialog(this,"Invoice_no Missing","Error Message!",javax.swing.JOptionPane.ERROR_MESSAGE);
                    }else{
        
                        pstmt.setString(24,jTextField7.getText());
                    }
                    pstmt.setString(25,jComboBox2.getSelectedItem().toString());
                    pstmt.setString(26,transNo);
                    pstmt.setString(27,"00");
                    pstmt.setString(28,jTextField9.getText());
                    pstmt.setString(29,"false");
                    pstmt.setObject(30,jTable1.getValueAt(i,7));
                    pstmt.executeUpdate();
        
                    java.sql.PreparedStatement pstmt8121 = connectDB.prepareStatement("UPDATE pb_activity SET ytd_debit = ytd_debit + '"+jTable1.getValueAt(i,9).toString()+"',mtd_debit = mtd_debit + '"+jTable1.getValueAt(i,9).toString()+"' where code = '"+this.jTextField6.getText()+"'");
                    pstmt8121.executeUpdate();
        
                    java.sql.PreparedStatement pstmt11 = connectDB.prepareStatement("insert into st_sub_stores values(? , ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?)");
                    pstmt11.setString(1,jComboBox2.getSelectedItem().toString());
                    pstmt11.setObject(2,jTable1.getValueAt(i,0));
                    pstmt11.setDouble(3,quantity);
                    //pstmt11.setObject(3,jTable1.getValueAt(i,3));
                    pstmt11.setString(4,"00");
                    pstmt11.setDouble(5,price);
                    pstmt11.setObject(6,jTable1.getValueAt(i,9));
                    pstmt11.setObject(7,"0.00");
                    pstmt11.setObject(8,StocktransNo);
                    pstmt11.setObject(9,null);
                    pstmt11.setString(10,"'now'");
                    pstmt11.setString(11,jTextField9.getText());
                    pstmt11.setObject(12,jTable1.getValueAt(i,1));
                    pstmt11.setObject(13,"");
                    pstmt11.executeUpdate();
        
        
                    if(this.jCheckBox1.isSelected()){
                        java.sql.PreparedStatement pstmt3 = connectDB.prepareStatement("UPDATE st_stock_item SET quantity_instock = quantity_instock + "+new java.lang.Double(qty)+",quantity_toorder = quantity_toorder - "+new java.lang.Double(qty)+"  WHERE description = '"+jTable1.getValueAt(i,0).toString()+"' AND department ilike '"+jComboBox2.getSelectedItem().toString()+"'");
                        pstmt3.executeUpdate();
                    }else{
                        java.sql.PreparedStatement pstmt316 = connectDB.prepareStatement("UPDATE st_stock_prices SET balance = balance + "+new java.lang.Double(quantity)+" WHERE product ILIKE '"+jTable1.getValueAt(i,0).toString()+"' AND department ILIKE '"+jComboBox2.getSelectedItem().toString()+"'");
        
                        pstmt316.executeUpdate();
                    }
        
        
                    java.sql.PreparedStatement pstmt31 = connectDB.prepareStatement("UPDATE st_stock_item SET buying_price = '"+jTable1.getValueAt(i,4).toString()+"',packaging = '"+jTable1.getValueAt(i,2).toString()+"'  WHERE description ILIKE '"+jTable1.getValueAt(i,0).toString()+"%' AND department ILIKE '"+jComboBox2.getSelectedItem().toString()+"%'");
                    pstmt31.executeUpdate();
        
                    java.sql.PreparedStatement pstmt32 = connectDB.prepareStatement("UPDATE st_stock_prices SET transfer_price = ROUND("+new java.lang.Double(price)+"),selling_price = round('"+(price*rates)+"')  WHERE product ILIKE '"+jTable1.getValueAt(i,0).toString()+"'  AND department ILIKE '"+jComboBox2.getSelectedItem().toString()+"%'");
                    pstmt32.executeUpdate();
        
                    //  java.sql.PreparedStatement pstmt316 = connectDB.prepareStatement("UPDATE st_stock_prices SET balance = balance + "+new java.lang.Double(quantity)+" WHERE product ILIKE '"+jTable1.getValueAt(i,0).toString()+"%' AND department ILIKE '"+jComboBox2.getSelectedItem().toString()+"%'");
                    // pstmt316.executeUpdate();
                }
            }
        
            java.sql.Statement pst21z = connectDB.createStatement();
            java.sql.ResultSet rs111z = pst21z.executeQuery("select count(invoice_no) from ac_accounts_payable where invoice_no ILIKE '"+jTextField7.getText()+"' AND dealer ilike '"+jTextField91.getText().toString()+"'");
            while (rs111z.next()){
                invoices = rs111z.getInt(1);
            }
        
            if (invoices <1){
                java.sql.PreparedStatement pstmt1 = connectDB.prepareStatement("insert into ac_accounts_payable values(?,?,?,?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?,?,?,?)");
                pstmt1.setObject(1,accountCode);
                pstmt1.setString(2,jTextField91.getText().toString());
                pstmt1.setString(3,Stock);
                pstmt1.setString(4,"");
                pstmt1.setString(5,"");
                pstmt1.setString(6,"");
                pstmt1.setString(7,"");
                pstmt1.setString(8,"");
                pstmt1.setString(9,"");
                pstmt1.setString(10,"");
                pstmt1.setString(11,transNo);
                pstmt1.setString(12,"Stock Delivery");
                pstmt1.setString(13,"00");
                pstmt1.setObject(14,jTextField2.getText());
                pstmt1.setString(15,datePicker1.getDate().toString());
                if(jTextField7.getText().equals("")){
                    javax.swing.JOptionPane.showMessageDialog(this,"Invoice_no Missing","Error Message!",javax.swing.JOptionPane.ERROR_MESSAGE);
                }else{
        
                    pstmt1.setString(16,jTextField7.getText());
                }
                //  pstmt1.setString(16,jTextField7.getText());
                pstmt1.setString(17,glType);
                pstmt1.setString(18,"false");
                pstmt1.setString(19,"false");
                pstmt1.setString(20,jTextField9.getText());
                pstmt1.setString(21,"");
                pstmt1.setString(22,datePicker1.getDate().toString());
                pstmt1.setString(23,datePicker1.getDate().toString());
                pstmt1.setString(24,jTextField1.getText());
                pstmt1.setString(25,jTextField2.getText());
                pstmt1.setString(26,jTextField1.getText());
                pstmt1.executeUpdate();
            }else{
                java.sql.PreparedStatement pstmt8121 = connectDB.prepareStatement("UPDATE ac_accounts_payable SET credit = credit + '"+jTextField2.getText()+"',balance = balance + '"+jTextField2.getText()+"',vat = vat + '"+jTextField1.getText()+"',vat_balance = vat_balance + '"+jTextField1.getText()+"' where dealer = '"+jTextField91.getText().toString()+"' AND invoice_no ilike '"+jTextField2.getText()+"%'");
                pstmt8121.executeUpdate();
            }
        
            java.sql.PreparedStatement pstmt8121 = connectDB.prepareStatement("UPDATE pb_activity SET ytd_credit = ytd_credit + '"+jTextField2.getText()+"',mtd_credit = mtd_credit + '"+jTextField2.getText()+"' where code = '"+accountCode+"'");
            pstmt8121.executeUpdate();
        
            connectDB.commit();
            connectDB.setAutoCommit(true);
            javax.swing.JOptionPane.showMessageDialog(this, "Data Inserted Successfully","Confirmation Message!",javax.swing.JOptionPane.INFORMATION_MESSAGE);
            for (int k = 0; k < jTable1.getRowCount(); k++ ) {
                for (int r = 0; r < jTable1.getColumnCount(); r++ ) {
                    jTable1.getModel().setValueAt(null,k,r);
                }
            }*/
            com.afrisoftech.reports.DiscCreditorsInvoicesPdf policy = new com.afrisoftech.reports.DiscCreditorsInvoicesPdf();
            policy.DiscCreditorsInvoicesPdf(connectDB, this.datePicker1.getDate().toLocaleString(), this.datePicker1.getDate().toLocaleString(),jTextField91.getText().toString(),this.jTextField7.getText().toString());
            //       jTextField7.setText("");
            jTextField3.setText("");
            jTextField2.setText("00");
            jTextField4.setText("00");
            jTextField1.setText("00");
            jTextField5.setText("00");
            
            //  javax.swing.JOptionPane.showMessageDialog(this, "Enter quantity received","Error Message!",javax.swing.JOptionPane.ERROR_MESSAGE);
            
        }   catch(java.sql.SQLException sq){
            javax.swing.JOptionPane.showMessageDialog(this, sq.getMessage(),"Error Message!",javax.swing.JOptionPane.ERROR_MESSAGE);
            
            System.out.println(sq.getMessage());
            try {
                connectDB.rollback();
            }catch (java.sql.SQLException sql){
                javax.swing.JOptionPane.showMessageDialog(this,sql.getMessage(),"Error Message!",javax.swing.JOptionPane.ERROR_MESSAGE);
            }
        }
        
        // Add your handling code here:
    }//GEN-LAST:event_resetbtnActionPerformed
    
    private void jTable1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTable1KeyReleased
        double resFloat = 0.00;
        double resVal = 0.00;
        double total = 0.00;
        double total1 = 0.00;
        double discount1 = 0.00;
        double vat = 0.00;
        double VatAmt = 0.00;
        double floatCol2 = 0.00;
        double floatCol3 = 0.00;
        //  double totalSum = 0.00;
        if (jTable1.getValueAt(jTable1.getSelectedRow(), jTable1.getSelectedColumn()) != null) {
            
            
            floatCol2 = java.lang.Double.parseDouble(jTable1.getValueAt(jTable1.getSelectedRow(), 3).toString());
            
            floatCol3 = java.lang.Double.parseDouble(jTable1.getValueAt(jTable1.getSelectedRow(), 4).toString());
            
            //            if (jTable1.getValueAt(jTable1.getSelectedRow(), 3) != null) {
            total = floatCol2 * floatCol3;
            //                jTable1.setValueAt(new java.lang.Float(total), jTable1.getSelectedRow(), 7);
            
            
            if (jTable1.getValueAt(jTable1.getSelectedRow(), 5) != null){
                discount1 = java.lang.Double.parseDouble(jTable1.getValueAt(jTable1.getSelectedRow(), 5).toString());
                
                resVal = total * discount1/100;
                // total = ((floatCol2 * floatCol3) - ((floatCol2 * floatCol3)*discount1/100));
                // resVal = (floatCol2 * floatCol3)*discount1/100;
                jTable1.setValueAt(new java.lang.Float(resVal), jTable1.getSelectedRow(), 6);
                jTable1.setValueAt(new java.lang.Float(total-resVal), jTable1.getSelectedRow(), 9);
                
                this.tableModelTableChanged1();
                
                if (jTable1.getValueAt(jTable1.getSelectedRow(), 7) != null) {
                    vat = java.lang.Double.parseDouble(jTable1.getValueAt(jTable1.getSelectedRow(), 7).toString());
                    // total = (((total) + ((floatCol2 * floatCol3)*vat/100)) - ((floatCol2 * floatCol3)*discount1/100));
                    
                    VatAmt = (total-resVal)*vat/100;
                    jTable1.setValueAt(new java.lang.Float(VatAmt), jTable1.getSelectedRow(), 8);
                    jTable1.setValueAt(new java.lang.Float(resVal), jTable1.getSelectedRow(), 6);
                    jTable1.setValueAt(new java.lang.Float((total-resVal)+VatAmt), jTable1.getSelectedRow(), 9);
                    
                    this.tableModelTableChanged2();
                    //jTable1.setValueAt(new java.lang.Float(resVal), jTable1.getSelectedRow(), 5);
                }
                
            }else
                
                if (jTable1.getValueAt(jTable1.getSelectedRow(), 7) != null) {
                    vat = java.lang.Double.parseDouble(jTable1.getValueAt(jTable1.getSelectedRow(), 7).toString());
                    
                    total1 = ((floatCol2 * floatCol3));
                    
                    total = ((floatCol2 * floatCol3) + ((floatCol2 * floatCol3)*vat/100));
                    VatAmt = ((floatCol2 * floatCol3)*vat/100);
                    jTable1.setValueAt(new java.lang.Float(VatAmt), jTable1.getSelectedRow(), 8);
                    
                    //this.jTextField1.setText(java.lang.String.valueOf(VatAmt));
                    jTable1.setValueAt(new java.lang.Float(total), jTable1.getSelectedRow(),9);
                    this.tableModelTableChanged2();
                    
                }else
                    //  }else
                    if (jTable1.getValueAt(jTable1.getSelectedRow(), 7) != null) {
                        jTable1.setValueAt(new java.lang.Float(total), jTable1.getSelectedRow(), 9);
                    }
            this.tableModelTableChanged();
            
            
            for (int i = 0; i < jTable1.getRowCount(); i++) {
                
                if (jTable1.getModel().getValueAt(i, 0) != null) {//toString().compareToIgnoreCase(null) {
                    
                    resFloat = resFloat + Double.parseDouble(jTable1.getValueAt(i, 9).toString());
                    
                    
                }
            }
            
            //  this.tableModelTableChanged();
            
        }
        double net = Double.parseDouble(this.jTextField2.getText());
        double vats = Double.parseDouble(this.jTextField1.getText());
        jTextField5.setText(java.lang.String.valueOf(net-vats));
        //  if (jTable1.getValueAt(jTable1.getSelectedRow(), 4) != null) {
        //      vat = java.lang.Double.parseDouble(jTable1.getValueAt(jTable1.getSelectedRow(), 6).toString());
        
        //       total = (((floatCol2 * floatCol3) + ((floatCol2 * floatCol3)*vat/100)) - ((floatCol2 * floatCol3)*discount1/100));
        // }
        
        
        // Add your handling code here:
    }//GEN-LAST:event_jTable1KeyReleased
    
    private void exitbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitbtnActionPerformed
        this.setVisible(false);        // Add your handling code here:
    }//GEN-LAST:event_exitbtnActionPerformed
    
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        int rows2Delete = jTable1.getSelectedRowCount();
        
        int[] selectedRows = jTable1.getSelectedRows();
        
        if (rows2Delete < 1) {
            
            java.awt.Toolkit.getDefaultToolkit().beep();
            
            javax.swing.JOptionPane.showMessageDialog(this, "There are no selected rows to delete!");
            
        } else {
            
            if (rows2Delete > 1) {
                
                for (int i = 0; i < selectedRows.length; i++) {
                    
                    
                    
                    javax.swing.table.DefaultTableModel defTableModel = (javax.swing.table.DefaultTableModel)jTable1.getModel();
                    
                    defTableModel.removeRow(selectedRows[i]);
                    
                }
                
                
                
            } else {
                
                javax.swing.table.DefaultTableModel defTableModel = (javax.swing.table.DefaultTableModel)jTable1.getModel();
                
                defTableModel.removeRow(jTable1.getSelectedRow());
            }
        }
        tableModelTableChanged();
        tableModelTableChanged1();
        tableModelTableChanged2();
        
        // Add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed
    
    private void cancelbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelbtnActionPerformed
        //        jTextField6.setText("");
        jTextField7.setText("");
        //  jTextField9.setText("");
        jTextField3.setText("");
        jTextField2.setText("00");
        jTextField4.setText("00");
        jTextField1.setText("00");
        jTextField5.setText("00");
        for (int k = 0; k < jTable1.getRowCount(); k++ ) {
            for (int r = 0; r < jTable1.getColumnCount(); r++ ) {
                jTable1.getModel().setValueAt(null,k,r);
            }
        }
        
        jTextField2.setText("0.00");
        // Add your handling code here:
    }//GEN-LAST:event_cancelbtnActionPerformed
    private void cmboxActionPerformed(java.awt.event.ActionEvent evt){
        java.lang.Object selectedGuaran = cmbox.getSelectedItem();
        int i = jTable1.getSelectedRow();
        
        if (selectedGuaran != null) {
            
            try {
                //java.sql.Connection con = java.sql.DriverManager.getConnection("jdbc:postgresql://localhost:5432/hospital","postgres","pilsiner");
                java.sql.Statement pstmt = connectDB.createStatement();
                // java.sql.ResultSet rs = pstmt.executeQuery("select rate,gl_account from pb_operating_parameters where service_type = '"+selectedGuaran+"'");
                
                java.sql.ResultSet rs = pstmt.executeQuery("select units from st_stock_item where description = '"+selectedGuaran+"'");
                while (rs.next()){
                    
                    jTable1.setValueAt(rs.getObject(1),i,1);
                    
                }
            } catch(java.sql.SQLException sqlex){
                System.out.println(sqlex.getMessage());
            }
            
        }
        
    }
    
    private void postbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_postbtnActionPerformed
        jTable1.setEditingRow(-1);
        
        tableModelTableChanged();
        tableModelTableChanged1();
        tableModelTableChanged2();
        double quantity = 0.00;
        double price = 0.00;
        double pkge = 0.00;
        double qty = 0.00;
        double uprice = 0.00;
        double rates = 0.00;
        
        java.util.Calendar calendar = java.util.Calendar.getInstance();
        
        long dateNow = calendar.getTimeInMillis();
        
        java.sql.Date datenowSql= new java.sql.Date(dateNow);
        try{
            String Stock = null;
            String actCode = null;
            String accountCode = null;
            String transNo = null;
            String glType = null;
            String VouchNo = null;
            String StocktransNo = null;
            int invoices = 0;
            String supCode = null;
            String Purchases = null;
            String cosCode = null;
            String CostofSale = null;
            
            try {
                connectDB.setAutoCommit(false);
                java.sql.Statement pst2 = connectDB.createStatement();
                java.sql.ResultSet rs = pst2.executeQuery("select code,activity from pb_activity where code ilike '"+this.jTextField6.getText()+"%'");
                while (rs.next()){
                    actCode = rs.getObject(1).toString();
                    Stock = rs.getObject(2).toString();
                }
                java.sql.Statement pst1 = connectDB.createStatement();
                java.sql.ResultSet rs1 = pst1.executeQuery("select code,activity from pb_activity where activity_category = 'CP'");
                while (rs1.next()){
                    accountCode = rs1.getObject(1).toString();
                    glType = rs1.getObject(2).toString();
                }
                java.sql.Statement ps = connectDB.createStatement();
                java.sql.Statement ps22 = connectDB.createStatement();
                java.sql.Statement ps11 = connectDB.createStatement();
                java.sql.Statement ps11r = connectDB.createStatement();
                java.sql.ResultSet rst = ps11.executeQuery("select nextval('transaction_no_seq')");
                while (rst.next()){
                    rst.getObject(1).toString();
                    
                    transNo = rst.getObject(1).toString();
                }
                
                java.sql.ResultSet rstr = ps11r.executeQuery("SELECT mark_up FROM st_stores WHERE store_name ILIKE '"+jComboBox2.getSelectedItem().toString()+"'");
                while (rstr.next()){
                    rates = rstr.getDouble(1);
                }
                java.sql.Statement pst21 = connectDB.createStatement();
                java.sql.ResultSet rs111 = pst21.executeQuery("select nextval('stock_delivery_seq')");
                while (rs111.next()){
                    StocktransNo = rs111.getObject(1).toString();
                }
                java.sql.PreparedStatement pstmt = connectDB.prepareStatement("insert into st_stock_cardex values(?,?,?,?,?,?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?,?,?)");
                for (int i = 0; i< jTable1.getRowCount(); i++) {
                    if (jTable1.getValueAt(i,9) != null){
                        
                        pkge = Double.parseDouble(jTable1.getValueAt(i, 2).toString());
                       
                        qty = Double.parseDouble(jTable1.getValueAt(i, 3).toString());
                        
                        uprice = Double.parseDouble(jTable1.getValueAt(i, 4).toString());
                        
                        quantity = qty;
                        
                        price = uprice/pkge;
                        
                        pstmt.setString(1,"");
                        pstmt.setString(2,jComboBox2.getSelectedItem().toString());
                        pstmt.setObject(3,jTable1.getValueAt(i,0));
                        pstmt.setObject(4,null);
                        pstmt.setObject(5,"00");
                        pstmt.setDouble(6,uprice);
                        pstmt.setObject(7,jTable1.getValueAt(i,1));
                        pstmt.setString(8,jTextField9.getText());
                        pstmt.setString(9,jTextField3.getText());
                        pstmt.setString(10,"");
                        pstmt.setDouble(11,quantity);
                        pstmt.setString(12,"00");
                        pstmt.setObject(13,jTable1.getValueAt(i,6));
                        pstmt.setString(14,"");
                        pstmt.setString(15,"");
                        pstmt.setObject(16,jTextField91.getText());
                        pstmt.setString(17,"");
                        pstmt.setString(18,datePicker1.getDate().toString());
                        pstmt.setString(19,"");
                        pstmt.setString(20,"Receiving");
                        pstmt.setObject(21,jTable1.getValueAt(i,9));
                        pstmt.setObject(22,jTable1.getValueAt(i,6));
                        pstmt.setString(23,jTextField6.getText());
                        if(jTextField7.getText().equals("")){
                            javax.swing.JOptionPane.showMessageDialog(this,"Invoice_no Missing","Error Message!",javax.swing.JOptionPane.ERROR_MESSAGE);
                        }else{
                            
                            pstmt.setString(24,jTextField7.getText());
                        }
                        pstmt.setString(25,jComboBox2.getSelectedItem().toString());
                        pstmt.setString(26,transNo);
                        pstmt.setString(27,"00");
                        pstmt.setString(28,jTextField9.getText());
                        pstmt.setString(29,"false");
                        pstmt.setObject(30,jTable1.getValueAt(i,7));
                        pstmt.executeUpdate();
                        
                        java.sql.PreparedStatement pstmt8121 = connectDB.prepareStatement("UPDATE pb_activity SET ytd_debit = ytd_debit + '"+jTable1.getValueAt(i,9).toString()+"',mtd_debit = mtd_debit + '"+jTable1.getValueAt(i,9).toString()+"' where code = '"+this.jTextField6.getText()+"'");
                        pstmt8121.executeUpdate();
                        
                        java.sql.PreparedStatement pstmt11 = connectDB.prepareStatement("insert into st_sub_stores values(? , ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?)");
                        pstmt11.setString(1,jComboBox2.getSelectedItem().toString());
                        pstmt11.setObject(2,jTable1.getValueAt(i,0));
                        pstmt11.setDouble(3,quantity);
                        pstmt11.setString(4,"00");
                        pstmt11.setDouble(5,uprice);
                        pstmt11.setObject(6,jTable1.getValueAt(i,9));
                        pstmt11.setObject(7,"0.00");
                        pstmt11.setObject(8,StocktransNo);
                        pstmt11.setObject(9,null);
                        pstmt11.setString(10,"'now'");
                        pstmt11.setString(11,jTextField9.getText());
                        pstmt11.setObject(12,jTable1.getValueAt(i,1));
                        pstmt11.setObject(13,"");
                        pstmt11.executeUpdate();
                        
                        
                        if(this.jCheckBox1.isSelected()){
                            java.sql.PreparedStatement pstmt3 = connectDB.prepareStatement("UPDATE st_stock_item SET quantity_instock = quantity_instock + "+new java.lang.Double(qty)+",quantity_toorder = quantity_toorder - "+new java.lang.Double(qty)+"  WHERE description = '"+jTable1.getValueAt(i,0).toString()+"' AND department ilike '"+jComboBox2.getSelectedItem().toString()+"'");
                            pstmt3.executeUpdate();
                        }else{
                            java.sql.PreparedStatement pstmt316 = connectDB.prepareStatement("UPDATE st_stock_prices SET balance = balance + "+new java.lang.Double(quantity)+" WHERE product ILIKE '"+jTable1.getValueAt(i,0).toString()+"' AND department ILIKE '"+jComboBox2.getSelectedItem().toString()+"'");
                            
                            pstmt316.executeUpdate();
                        }
                        
                        
                        java.sql.PreparedStatement pstmt31 = connectDB.prepareStatement("UPDATE st_stock_item SET buying_price = '"+jTable1.getValueAt(i,4).toString()+"',packaging = '"+jTable1.getValueAt(i,2).toString()+"'  WHERE description ILIKE '"+jTable1.getValueAt(i,0).toString()+"%' AND department ILIKE '"+jComboBox2.getSelectedItem().toString()+"%'");
                        pstmt31.executeUpdate();
                        
                        java.sql.PreparedStatement pstmt32 = connectDB.prepareStatement("UPDATE st_stock_prices SET transfer_price = ROUND("+new java.lang.Double(price)+"),selling_price = round('"+(price*rates)+"')  WHERE product ILIKE '"+jTable1.getValueAt(i,0).toString()+"'  AND department ILIKE '"+jComboBox2.getSelectedItem().toString()+"%'");
                        pstmt32.executeUpdate();
                        
                                }
                }
                
                java.sql.Statement pst21z = connectDB.createStatement();
                java.sql.ResultSet rs111z = pst21z.executeQuery("select count(invoice_no) from ac_accounts_payable where invoice_no ILIKE '"+jTextField7.getText()+"' AND dealer ilike '"+jTextField91.getText().toString()+"' and date = '"+datePicker1.getDate()+"'");
                while (rs111z.next()){
                    invoices = rs111z.getInt(1);
                }
                
                if (invoices <1){
                    java.sql.PreparedStatement pstmt1 = connectDB.prepareStatement("insert into ac_accounts_payable values(?,?,?,?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?,?,?,?)");
                    pstmt1.setObject(1,accountCode);
                    pstmt1.setString(2,jTextField91.getText().toString());
                    pstmt1.setString(3,Stock);
                    pstmt1.setString(4,"");
                    pstmt1.setString(5,"");
                    pstmt1.setString(6,"Medical Supplies");
                    pstmt1.setString(7,"");
                    pstmt1.setString(8,"");
                    pstmt1.setString(9,"");
                    pstmt1.setString(10,"");
                    pstmt1.setString(11,transNo);
                    pstmt1.setString(12,"Stock Delivery");
                    pstmt1.setString(13,"00");
                    pstmt1.setObject(14,jTextField2.getText());
                    pstmt1.setString(15,datePicker1.getDate().toString());
                    if(jTextField7.getText().equals("")){
                        javax.swing.JOptionPane.showMessageDialog(this,"Invoice_no Missing","Error Message!",javax.swing.JOptionPane.ERROR_MESSAGE);
                    }else{
                        
                        pstmt1.setString(16,jTextField7.getText());
                    }
                    pstmt1.setString(17,glType);
                    pstmt1.setString(18,"false");
                    pstmt1.setString(19,"false");
                    pstmt1.setString(20,jTextField9.getText());
                    pstmt1.setString(21,"");
                    pstmt1.setString(22,datePicker1.getDate().toString());
                    pstmt1.setString(23,datePicker1.getDate().toString());
                    pstmt1.setString(24,jTextField1.getText());
                    pstmt1.setString(25,jTextField2.getText());
                    pstmt1.setString(26,jTextField1.getText());
                    pstmt1.executeUpdate();
                }else{
                    java.sql.PreparedStatement pstmt8121 = connectDB.prepareStatement("UPDATE ac_accounts_payable SET credit = credit + '"+jTextField2.getText()+"',balance = balance + '"+jTextField2.getText()+"',vat = vat + '"+jTextField1.getText()+"',vat_balance = vat_balance + '"+jTextField1.getText()+"' where dealer = '"+jTextField91.getText().toString()+"' AND invoice_no ilike '"+jTextField2.getText()+"%'");
                    pstmt8121.executeUpdate();
                }
                
                java.sql.PreparedStatement pstmt8121 = connectDB.prepareStatement("UPDATE pb_activity SET ytd_credit = ytd_credit + '"+jTextField2.getText()+"',mtd_credit = mtd_credit + '"+jTextField2.getText()+"' where code = '"+accountCode+"'");
                pstmt8121.executeUpdate();
                
                
                 java.sql.Statement pst1d1 = connectDB.createStatement();
                java.sql.ResultSet rs1d1 = pst1d1.executeQuery("select purchases_account from pb_departments where department_name ILIKE '"+jComboBox2.getSelectedItem()+"%'");
                while (rs1d1.next()){
                    supCode = rs1d1.getObject(1).toString();
                    }
                
                java.sql.Statement pst1cc = connectDB.createStatement();
                java.sql.ResultSet rs1cc = pst1cc.executeQuery("select activity from pb_activity where code ILIKE '"+supCode+"%'");
                while (rs1cc.next()){
                    Purchases = rs1cc.getObject(1).toString();
                }
                
                java.sql.Statement pst1d = connectDB.createStatement();
                java.sql.ResultSet rs1d = pst1d.executeQuery("select cost_of_sale from pb_departments where department_name ILIKE '"+jComboBox2.getSelectedItem()+"%'");
                while (rs1d.next()){
                    cosCode = rs1d.getObject(1).toString();
                 }
                
                java.sql.Statement pstd = connectDB.createStatement();
                java.sql.ResultSet rsd = pstd.executeQuery("select activity from pb_activity where code ILIKE '"+cosCode+"%'");
                while (rsd.next()){
                    CostofSale = rsd.getObject(1).toString();
                }
                java.sql.PreparedStatement pstmt1q = connectDB.prepareStatement("insert into ac_ledger values(?,?,?,?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?,?,?,?)");
                pstmt1q.setObject(1,supCode);
                pstmt1q.setString(2,Purchases);
                pstmt1q.setString(3,"");
                pstmt1q.setString(4,jTextField91.getText());
                pstmt1q.setString(6,"");
                pstmt1q.setString(5,"Medical Supplies");
                pstmt1q.setString(7,"");
                pstmt1q.setString(8,"");
                pstmt1q.setString(9,"");
                pstmt1q.setString(10,"");
                pstmt1q.setString(11,"");
                pstmt1q.setString(12,"");
                pstmt1q.setString(13,jTextField3.getText());
                pstmt1q.setString(14,"Medical Supplies");
                pstmt1q.setString(15,"Stock Delivery");
                pstmt1q.setObject(16,jTextField2.getText());
                pstmt1q.setString(17,"0.00");
                pstmt1q.setString(18,datePicker1.getDate().toString());
                pstmt1q.setString(19,transNo);
                pstmt1q.setString(20,"false");
                pstmt1q.setString(21,"false");
                pstmt1q.setString(22,"false");
                pstmt1q.setString(23,jTextField2.getText());
                pstmt1q.setString(24,"");
                pstmt1q.setString(25,"");
                pstmt1q.setString(26,"'now'");
                pstmt1q.executeUpdate();
                
                java.sql.PreparedStatement pstmt1q1 = connectDB.prepareStatement("insert into ac_ledger values(?,?,?,?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?,?,?,?)");
                pstmt1q1.setObject(1,cosCode);
                pstmt1q1.setString(2,CostofSale);
                pstmt1q1.setString(3,"");
                pstmt1q1.setString(4,jTextField91.getText());
                pstmt1q1.setString(6,"");
                pstmt1q1.setString(5,"Medical Supplies");
                pstmt1q1.setString(7,"");
                pstmt1q1.setString(8,"");
                pstmt1q1.setString(9,"");
                pstmt1q1.setString(10,"");
                pstmt1q1.setString(11,"");
                pstmt1q1.setString(12,"");
                pstmt1q1.setString(13,jTextField3.getText());
                pstmt1q1.setString(14,"Medical Supplies");
                pstmt1q1.setString(15,"Stock Delivery");
                pstmt1q1.setObject(16,"0.00");
                pstmt1q1.setObject(17,jTextField2.getText());
                pstmt1q1.setString(18,datePicker1.getDate().toString());
                pstmt1q1.setString(19,transNo);
                pstmt1q1.setString(20,"false");
                pstmt1q1.setString(21,"false");
                pstmt1q1.setString(22,"false");
                pstmt1q1.setString(23,jTextField2.getText());
                pstmt1q1.setString(24,"");
                pstmt1q1.setString(25,"");
                pstmt1q1.setString(26,"'now'");
                pstmt1q1.executeUpdate();
                
                connectDB.commit();
                connectDB.setAutoCommit(true);
                
                javax.swing.JOptionPane.showMessageDialog(this, "Data Inserted Successfully","Confirmation Message!",javax.swing.JOptionPane.INFORMATION_MESSAGE);
                for (int k = 0; k < jTable1.getRowCount(); k++ ) {
                    for (int r = 0; r < jTable1.getColumnCount(); r++ ) {
                        jTable1.getModel().setValueAt(null,k,r);
                    }
                }
             
                jTextField3.setText("");
                jTextField2.setText("00");
                jTextField4.setText("00");
                jTextField1.setText("00");
                jTextField5.setText("00");
                
                //  javax.swing.JOptionPane.showMessageDialog(this, "Enter quantity received","Error Message!",javax.swing.JOptionPane.ERROR_MESSAGE);
                
            }   catch(java.sql.SQLException sq){
                javax.swing.JOptionPane.showMessageDialog(this, sq.getMessage(),"Error Message!",javax.swing.JOptionPane.ERROR_MESSAGE);
                
                System.out.println(sq.getMessage());
                try {
                    connectDB.rollback();
                }catch (java.sql.SQLException sql){
                    javax.swing.JOptionPane.showMessageDialog(this,sql.getMessage(),"Error Message!",javax.swing.JOptionPane.ERROR_MESSAGE);
                }
            }
            
        } catch(java.lang.Exception ex) {
            System.out.println(ex.getMessage());
            javax.swing.JOptionPane.showMessageDialog(this, "TRANSACTION ERROR : Please double check your entries.", "Error",javax.swing.JOptionPane.ERROR_MESSAGE);
            
            
        }
        // Add your handling code here:
    }//GEN-LAST:event_postbtnActionPerformed
    
    
    public void tableModelTableChanged() {
        System.out.println("Calculating totals for table 11 and 2.");
        //        double resFloat = 0.00;
        double resFloat = 0.00;
        double Gross = Double.parseDouble(this.jTextField2.getText());
        double Disc = Double.parseDouble(this.jTextField1.getText());
        double Vat = Double.parseDouble(this.jTextField4.getText());
        for (int i = 0; i < jTable1.getRowCount(); i++) {
            
            if (jTable1.getValueAt(i, 0) != null) {
                
                
                //                if (jTable1.getSelectedColumn() == 2) {
                
                resFloat = resFloat + Double.parseDouble(jTable1.getModel().getValueAt(i, 9).toString());
                jTextField2.setText(java.lang.String.valueOf(resFloat));
                jTextField5.setText(java.lang.String.valueOf(resFloat-Disc-Vat));
                //                }else{
                
                //  resFloat = resFloat + Double.parseDouble(jTable1.getModel().getValueAt(i, 7).toString());
                //   jTextField2.setText(java.lang.String.valueOf(resFloat));
                
                //  }
            }
            
            //               jTextField31.setText(java.lang.String.valueOf(resFloat));
        }
    }
    public void tableModelTableChanged(javax.swing.event.TableModelEvent evt) {
        double Gross = Double.parseDouble(this.jTextField2.getText());
        double Disc = Double.parseDouble(this.jTextField1.getText());
        double Vat = Double.parseDouble(this.jTextField4.getText());
        //        double resFloat = 0.00;
        double resFloat = 0.00;
        
        
        
        for (int i = 0; i < jTable1.getRowCount(); i++) {
            
            if (jTable1.getValueAt(i, 0) != null) {
                
                //   if (jTable1.getSelectedColumn() == 3) {
                
                resFloat = resFloat + Double.parseDouble(jTable1.getModel().getValueAt(i, 9).toString());
                
                jTextField2.setText(java.lang.String.valueOf(resFloat));
                jTextField5.setText(java.lang.String.valueOf(resFloat-Disc-Vat));
                
                
                //  }else{
                //      resFloat = resFloat + Double.parseDouble(jTable1.getModel().getValueAt(i, 7).toString());
                
                //      jTextField2.setText(java.lang.String.valueOf(resFloat));
                
                //}
            }
        }
        
        //               jTextField31.setText(java.lang.String.valueOf(resFloat));
    }
    
    public void tableModelTableChanged1() {
        System.out.println("Calculating totals for table 12 and 21.");
        double Gross = Double.parseDouble(this.jTextField2.getText());
        double Disc = Double.parseDouble(this.jTextField1.getText());
        double Vat = Double.parseDouble(this.jTextField4.getText());
        double resFloat1 = 0.00;
        
        for (int i = 0; i < jTable1.getRowCount(); i++) {
            
            if (jTable1.getValueAt(i, 5) != null) {
                
                if (jTable1.getSelectedColumn() == 5) {
                    
                    resFloat1 = resFloat1 + Double.parseDouble(jTable1.getModel().getValueAt(i, 6).toString());
                    jTextField4.setText(java.lang.String.valueOf(resFloat1));
                    jTextField5.setText(java.lang.String.valueOf(Gross-Disc-Vat));
                    
                }
                
                resFloat1 = resFloat1 + Double.parseDouble(jTable1.getModel().getValueAt(i, 6).toString());
                jTextField4.setText(java.lang.String.valueOf(resFloat1));
                jTextField5.setText(java.lang.String.valueOf(Gross-Disc-Vat));
                //   else{
                //       javax.swing.JOptionPane.showMessageDialog(this,"Disc. % cannot be null","Error Message!",javax.swing.JOptionPane.ERROR_MESSAGE);
                //   }
                
            }
        }
    }
    
    public void tableModelTableChanged1(javax.swing.event.TableModelEvent evt) {
        
        double Gross = Double.parseDouble(this.jTextField2.getText());
        double Disc = Double.parseDouble(this.jTextField1.getText());
        double Vat = Double.parseDouble(this.jTextField4.getText());
        double resFloat1 = 0.00;
        
        for (int i = 0; i < jTable1.getRowCount(); i++) {
            
            if (jTable1.getValueAt(i, 5) != null) {
                
                if (jTable1.getSelectedColumn() == 5) {
                    
                    resFloat1 = resFloat1 + Double.parseDouble(jTable1.getModel().getValueAt(i, 6).toString());
                    jTextField4.setText(java.lang.String.valueOf(resFloat1));
                    jTextField5.setText(java.lang.String.valueOf(Gross-Disc-Vat));
                    
                }else{
                    
                    
                    resFloat1 = resFloat1 + Double.parseDouble(jTable1.getModel().getValueAt(i, 6).toString());
                    jTextField4.setText(java.lang.String.valueOf(resFloat1));
                    jTextField5.setText(java.lang.String.valueOf(Gross-Disc-Vat));
                    
                    
                    // else{
                    // javax.swing.JOptionPane.showMessageDialog(this,"Disc. % cannot be null","Error Message!",javax.swing.JOptionPane.ERROR_MESSAGE);
                    
                }
            }
        }
        //               jTextField31.setText(java.lang.String.valueOf(resFloat));
    }
    
    
    public void tableModelTableChanged2() {
        System.out.println("Calculating totals for table 12 and 21.");
        //        double resFloat = 0.00;
        double resFloat1 = 0.00;
        double Gross = Double.parseDouble(this.jTextField2.getText());
        double Disc = Double.parseDouble(this.jTextField1.getText());
        double Vat = Double.parseDouble(this.jTextField4.getText());
        for (int i = 0; i < jTable1.getRowCount(); i++) {
            
            if (jTable1.getValueAt(i, 0) != null) {
                
                if (jTable1.getSelectedColumn() == 7) {
                    
                    resFloat1 = resFloat1 + Double.parseDouble(jTable1.getModel().getValueAt(i, 8).toString());
                    jTextField1.setText(java.lang.String.valueOf(resFloat1));
                    jTextField5.setText(java.lang.String.valueOf(Gross-Disc-Vat));
                    
                }else{
                    
                    resFloat1 = resFloat1 + Double.parseDouble(jTable1.getModel().getValueAt(i, 8).toString());
                    jTextField1.setText(java.lang.String.valueOf(resFloat1));
                    jTextField5.setText(java.lang.String.valueOf(Gross-Disc-Vat));
                    
                    
                    //   javax.swing.JOptionPane.showMessageDialog(this,"Vat % cannot be null","Error Message!",javax.swing.JOptionPane.ERROR_MESSAGE);
                }
            }
            
            //               jTextField31.setText(java.lang.String.valueOf(resFloat));
        }
    }
    public void tableModelTableChanged2(javax.swing.event.TableModelEvent evt) {
        
        double Gross = Double.parseDouble(this.jTextField2.getText());
        double Disc = Double.parseDouble(this.jTextField1.getText());
        double Vat = Double.parseDouble(this.jTextField4.getText());
        double resFloat1 = 0.00;
        
        for (int i = 0; i < jTable1.getRowCount(); i++) {
            
            if (jTable1.getValueAt(i, 7) != null) {
                
                if (jTable1.getSelectedColumn() == 7) {
                    
                    resFloat1 = resFloat1 + Double.parseDouble(jTable1.getModel().getValueAt(i, 7).toString());
                    jTextField1.setText(java.lang.String.valueOf(resFloat1));
                    jTextField5.setText(java.lang.String.valueOf(Gross-Disc-Vat));
                    
                }else{
                    
                    resFloat1 = resFloat1 + Double.parseDouble(jTable1.getModel().getValueAt(i, 7).toString());
                    jTextField1.setText(java.lang.String.valueOf(resFloat1));
                    jTextField5.setText(java.lang.String.valueOf(Gross-Disc-Vat));
                    //    javax.swing.JOptionPane.showMessageDialog(this,"Vat % cannot be null","Error Message!",javax.swing.JOptionPane.ERROR_MESSAGE);
                    
                }
            }
        }
        //               jTextField31.setText(java.lang.String.valueOf(resFloat));
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField jTextField6;
    private javax.swing.JDialog jSearchDialog;
    private javax.swing.JButton searchButton;
    private javax.swing.JButton jButton2;
    private javax.swing.JTextField jTextField61;
    private javax.swing.JTextField jTextField91;
    private javax.swing.JTextField jTextField7;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField5;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel41;
    private org.netbeans.lib.sql.NBCachedRowSet searchRowSet2;
    private javax.swing.JButton jButton9;
    private javax.swing.JButton postbtn;
    private org.netbeans.lib.sql.NBCachedRowSet searchRowSet;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JComboBox jComboBox2;
    private javax.swing.JButton cancelbtn;
    private javax.swing.JCheckBox jCheckBox2;
    private javax.swing.JTextField jTextField113;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel4;
    private org.netbeans.lib.sql.NBCachedRowSet crset3;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JTextField jTextField9;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JButton jButton52;
    private javax.swing.JLabel jLabel1;
    private org.netbeans.lib.sql.NBCachedRowSet crset21;
    private javax.swing.JButton jButton42;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JButton resetbtn;
    private javax.swing.JLabel jLabel3;
    private org.netbeans.lib.sql.NBCachedRowSet crset2;
    private javax.swing.JScrollPane jSearchScrollPane;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jSearchPanel;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton exitbtn;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JTextField jTextField111;
    private javax.swing.JPanel jSearchPanel2;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JDialog jSearchDialog2;
    private org.netbeans.lib.sql.NBCachedRowSet crset11;
    private javax.swing.JTable jSearchTable;
    private javax.swing.JScrollPane jSearchScrollPane2;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel7;
    private javax.swing.ButtonGroup buttonGroup1;
    private org.netbeans.lib.sql.NBCachedRowSet crset1;
    private com.afrisoftech.lib.DatePicker datePicker1;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jSearchTable2;
    // End of variables declaration//GEN-END:variables
    
}
