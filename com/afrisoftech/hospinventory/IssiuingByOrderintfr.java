/*
 * companyprflintfr.java
 *
 * Created on August 13, 2002, 11:36 AM
 */

package com.afrisoftech.hospinventory;

/**
 *
 * @author  root
 */
public class IssiuingByOrderintfr extends javax.swing.JInternalFrame {
    
    private  javax.swing.JComboBox cmbox = new javax.swing.JComboBox();
    
    
    java.sql.Connection connectDB = null;
    
    org.netbeans.lib.sql.pool.PooledConnectionSource pConnDB = null;
    
    
    public IssiuingByOrderintfr(java.sql.Connection connDb, org.netbeans.lib.sql.pool.PooledConnectionSource pconnDB) {
        
        connectDB = connDb;
        
        pConnDB = pconnDB;
        
        initComponents();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        java.awt.GridBagConstraints gridBagConstraints;

        try {
            crset1 = new org.netbeans.lib.sql.NBCachedRowSet();
        } catch (java.sql.SQLException e1) {
            e1.printStackTrace();
        }
        try {
            crset2 = new org.netbeans.lib.sql.NBCachedRowSet();
        } catch (java.sql.SQLException e1) {
            e1.printStackTrace();
        }
        try {
            nBCachedRowSet1 = new org.netbeans.lib.sql.NBCachedRowSet();
        } catch (java.sql.SQLException e1) {
            e1.printStackTrace();
        }
        try {
            crset3 = new org.netbeans.lib.sql.NBCachedRowSet();
        } catch (java.sql.SQLException e1) {
            e1.printStackTrace();
        }
        try {
            crset21 = new org.netbeans.lib.sql.NBCachedRowSet();
        } catch (java.sql.SQLException e1) {
            e1.printStackTrace();
        }
        try {
            searchRowSet = new org.netbeans.lib.sql.NBCachedRowSet();
        } catch (java.sql.SQLException e1) {
            e1.printStackTrace();
        }
        jSearchDialog = new javax.swing.JDialog();
        jSearchPanel = new javax.swing.JPanel();
        jTextField111 = new javax.swing.JTextField();
        jSearchScrollPane = new javax.swing.JScrollPane();
        jSearchTable = new javax.swing.JTable();
        jButton9 = new javax.swing.JButton();
        try {
            crset31 = new org.netbeans.lib.sql.NBCachedRowSet();
        } catch (java.sql.SQLException e1) {
            e1.printStackTrace();
        }
        jSearchDialog1 = new javax.swing.JDialog();
        jSearchPanel1 = new javax.swing.JPanel();
        jTextField1111 = new javax.swing.JTextField();
        jSearchScrollPane1 = new javax.swing.JScrollPane();
        jSearchTable1 = new javax.swing.JTable();
        jButton91 = new javax.swing.JButton();
        try {
            searchRowSet1 = new org.netbeans.lib.sql.NBCachedRowSet();
        } catch (java.sql.SQLException e1) {
            e1.printStackTrace();
        }
        try {
            crset32 = new org.netbeans.lib.sql.NBCachedRowSet();
        } catch (java.sql.SQLException e1) {
            e1.printStackTrace();
        }
        jSearchDialog11 = new javax.swing.JDialog();
        jSearchPanel11 = new javax.swing.JPanel();
        jTextField11111 = new javax.swing.JTextField();
        jSearchScrollPane11 = new javax.swing.JScrollPane();
        jSearchTable11 = new javax.swing.JTable();
        jButton511 = new javax.swing.JButton();
        try {
            searchRowSet11 = new org.netbeans.lib.sql.NBCachedRowSet();
        } catch (java.sql.SQLException e1) {
            e1.printStackTrace();
        }
        jSearchDialog111 = new javax.swing.JDialog();
        jSearchPanel111 = new javax.swing.JPanel();
        jTextField111111 = new javax.swing.JTextField();
        jSearchScrollPane111 = new javax.swing.JScrollPane();
        jSearchTable111 = new javax.swing.JTable();
        jButton5111 = new javax.swing.JButton();
        try {
            searchRowSet111 = new org.netbeans.lib.sql.NBCachedRowSet();
        } catch (java.sql.SQLException e1) {
            e1.printStackTrace();
        }
        try {
            nBCachedRowSet2 = new org.netbeans.lib.sql.NBCachedRowSet();
        } catch (java.sql.SQLException e1) {
            e1.printStackTrace();
        }
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel2 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jComboBox11 = new javax.swing.JComboBox();
        jLabel13 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        datePicker1 = new com.afrisoftech.lib.DatePicker();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        jTextField36 = new javax.swing.JTextField();
        searchButton = new javax.swing.JButton();
        jComboBox1 = new javax.swing.JComboBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jPanel11 = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        jTextField9 = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jTextField5 = new javax.swing.JTextField();
        jTextField2 = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton8 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jPanel21 = new javax.swing.JPanel();
        jPanel12 = new javax.swing.JPanel();
        jComboBox111 = new javax.swing.JComboBox();
        jLabel131 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jTextField11 = new javax.swing.JTextField();
        jLabel31 = new javax.swing.JLabel();
        datePicker11 = new com.afrisoftech.lib.DatePicker();
        jLabel41 = new javax.swing.JLabel();
        jPanel61 = new javax.swing.JPanel();
        jTextField361 = new javax.swing.JTextField();
        searchButton1 = new javax.swing.JButton();
        jScrollPane11 = new javax.swing.JScrollPane();
        jTable11 = new javax.swing.JTable();
        jPanel111 = new javax.swing.JPanel();
        jLabel91 = new javax.swing.JLabel();
        jTextField91 = new javax.swing.JTextField();
        jLabel51 = new javax.swing.JLabel();
        jTextField51 = new javax.swing.JTextField();
        jTextField21 = new javax.swing.JTextField();
        jLabel21 = new javax.swing.JLabel();
        jLabel121 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jButton11 = new javax.swing.JButton();
        jButton71 = new javax.swing.JButton();
        jButton81 = new javax.swing.JButton();
        jButton51 = new javax.swing.JButton();
        jButton31 = new javax.swing.JButton();
        jButton41 = new javax.swing.JButton();
        jButton61 = new javax.swing.JButton();

        crset1.setConnectionSource(pConnDB);
        crset2.setConnectionSource(pConnDB);
        nBCachedRowSet1.setConnectionSource(pConnDB);
        crset3.setCommand("SELECT DISTINCT store_name from st_stores WHERE  patient_store = 'true' ORDER BY store_name");
        crset3.setConnectionSource(pConnDB);
        crset21.setConnectionSource(pConnDB);
        searchRowSet.setConnectionSource(pConnDB);
        jSearchDialog.getContentPane().setLayout(new java.awt.GridBagLayout());

        jSearchDialog.setModal(true);
        jSearchDialog.setUndecorated(true);
        jSearchPanel.setLayout(new java.awt.GridBagLayout());

        jSearchPanel.setBorder(new javax.swing.border.EtchedBorder());
        jTextField111.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                jTextField111CaretUpdate(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 10.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 100);
        jSearchPanel.add(jTextField111, gridBagConstraints);

        jSearchTable.setShowHorizontalLines(false);

        jSearchTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jSearchTableMouseClicked(evt);
            }
        });

        jSearchScrollPane.setViewportView(jSearchTable);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 20.0;
        jSearchPanel.add(jSearchScrollPane, gridBagConstraints);

        jButton9.setText("Dispose");
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jSearchPanel.add(jButton9, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jSearchDialog.getContentPane().add(jSearchPanel, gridBagConstraints);

        crset31.setCommand("SELECT DISTINCT store_name from st_stores WHERE  patient_store = 'true' ORDER BY store_name");
        crset31.setConnectionSource(pConnDB);
        jSearchDialog1.getContentPane().setLayout(new java.awt.GridBagLayout());

        jSearchDialog1.setModal(true);
        jSearchDialog1.setUndecorated(true);
        jSearchPanel1.setLayout(new java.awt.GridBagLayout());

        jSearchPanel1.setBorder(new javax.swing.border.EtchedBorder());
        jTextField1111.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                jTextField1111CaretUpdate(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 10.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 100);
        jSearchPanel1.add(jTextField1111, gridBagConstraints);

        jSearchTable1.setShowHorizontalLines(false);
        /*    try {
            searchRowSet.setCommand("select product,selling_price,gl_code FROM st_stock_prices WHERE department = 'Pharmacy' order by product");
            searchRowSet.setConnectionSource(pConnDB);

            searchRowSet.execute();

            // crset2.setExecuteOnLoad(true);
            jSearchTable.setModel(new org.netbeans.lib.sql.models.TableModel(searchRowSet, new org.netbeans.lib.sql.models.TableModel.Column[] {
                new org.netbeans.lib.sql.models.TableModel.Column("product", "Description", false),
                new org.netbeans.lib.sql.models.TableModel.Column("selling_price", "Amount", false),
                new org.netbeans.lib.sql.models.TableModel.Column("gl_code", "Gl_code", false)

            }));
            // jSearchScrollPane.setViewportView(jSearchTable);

        } catch(java.sql.SQLException sqlex){
            javax.swing.JOptionPane.showMessageDialog(this,sqlex.getMessage(),"Error Message!",javax.swing.JOptionPane.ERROR_MESSAGE);

            System.out.println(sqlex.getMessage());
        }
        */
        jSearchTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jSearchTable1MouseClicked(evt);
            }
        });

        jSearchScrollPane1.setViewportView(jSearchTable1);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 20.0;
        jSearchPanel1.add(jSearchScrollPane1, gridBagConstraints);

        jButton91.setText("Dispose");
        jButton91.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton91ActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jSearchPanel1.add(jButton91, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jSearchDialog1.getContentPane().add(jSearchPanel1, gridBagConstraints);

        searchRowSet1.setConnectionSource(pConnDB);
        crset32.setCommand("SELECT department_name FROM pb_departments ORDER BY department_name");
        crset32.setConnectionSource(pConnDB);
        crset32.setTransactionIsolation(1);
        jSearchDialog11.getContentPane().setLayout(new java.awt.GridBagLayout());

        jSearchDialog11.setModal(true);
        jSearchDialog11.setUndecorated(true);
        jSearchPanel11.setLayout(new java.awt.GridBagLayout());

        jSearchPanel11.setBorder(new javax.swing.border.EtchedBorder());
        jTextField11111.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                jTextField11111CaretUpdate(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 300.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        jSearchPanel11.add(jTextField11111, gridBagConstraints);

        jSearchTable11.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Title 1"
            }
        ));
        jSearchTable11.setToolTipText("Click on the target row to select the patient from the search.");
        jSearchTable11.setShowHorizontalLines(false);
        /*javax.swing.table.TableColumn column = null;

        for (int i = 0; i < 4; i++) {

            column = jSearchTable.getColumnModel().getColumn(i);

            if (i == 1) {

                column.setPreferredWidth(400);
                //sport column is bigger
            } else {

                column.setPreferredWidth(200);

            }
        }
        */
        jSearchTable11.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jSearchTable11MouseClicked(evt);
            }
        });

        jSearchScrollPane11.setViewportView(jSearchTable11);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 20.0;
        jSearchPanel11.add(jSearchScrollPane11, gridBagConstraints);

        jButton511.setText("Close");
        jButton511.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton511ActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jSearchPanel11.add(jButton511, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jSearchDialog11.getContentPane().add(jSearchPanel11, gridBagConstraints);

        searchRowSet11.setConnectionSource(pConnDB);
        jSearchDialog111.getContentPane().setLayout(new java.awt.GridBagLayout());

        jSearchDialog111.setModal(true);
        jSearchDialog111.setUndecorated(true);
        jSearchPanel111.setLayout(new java.awt.GridBagLayout());

        jSearchPanel111.setBorder(new javax.swing.border.EtchedBorder());
        jTextField111111.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                jTextField111111CaretUpdate(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 300.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        jSearchPanel111.add(jTextField111111, gridBagConstraints);

        jSearchTable111.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Title 1"
            }
        ));
        jSearchTable111.setToolTipText("Click on the target row to select the patient from the search.");
        jSearchTable111.setShowHorizontalLines(false);
        /*javax.swing.table.TableColumn column = null;

        for (int i = 0; i < 4; i++) {

            column = jSearchTable.getColumnModel().getColumn(i);

            if (i == 1) {

                column.setPreferredWidth(400);
                //sport column is bigger
            } else {

                column.setPreferredWidth(200);

            }
        }
        */
        jSearchTable111.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jSearchTable111MouseClicked(evt);
            }
        });

        jSearchScrollPane111.setViewportView(jSearchTable111);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 20.0;
        jSearchPanel111.add(jSearchScrollPane111, gridBagConstraints);

        jButton5111.setText("Close");
        jButton5111.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5111ActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jSearchPanel111.add(jButton5111, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jSearchDialog111.getContentPane().add(jSearchPanel111, gridBagConstraints);

        searchRowSet111.setConnectionSource(pConnDB);
        nBCachedRowSet2.setCommand("SELECT store_name FROM st_main_stores order by store_name");
        nBCachedRowSet2.setConnectionSource(pConnDB);

        getContentPane().setLayout(new java.awt.GridBagLayout());

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Stock Distribution");
        setToolTipText("");
        setDefaultCloseOperation(javax.swing.WindowConstants.HIDE_ON_CLOSE);
        setVisible(true);
        jPanel2.setLayout(new java.awt.GridBagLayout());

        jPanel2.setBorder(new javax.swing.border.TitledBorder(""));
        jPanel1.setLayout(new java.awt.GridBagLayout());

        jPanel1.setBorder(new javax.swing.border.TitledBorder(""));
        jComboBox11.setModel(new org.netbeans.lib.sql.models.ComboBoxModel (crset3, "store_name", null, null, null));
        jComboBox11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox11ActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 20);
        jPanel1.add(jComboBox11, gridBagConstraints);

        jLabel13.setText("Receipient");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 40, 0, 0);
        jPanel1.add(jLabel13, gridBagConstraints);

        jLabel1.setText("Issuing Store");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        jPanel1.add(jLabel1, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 50);
        jPanel1.add(datePicker1, gridBagConstraints);

        jLabel3.setText("Date");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 40, 0, 0);
        jPanel1.add(jLabel3, gridBagConstraints);

        jLabel4.setText("Requisition No.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.weightx = 1.0;
        jPanel1.add(jLabel4, gridBagConstraints);

        jPanel6.setLayout(new java.awt.GridBagLayout());

        jPanel6.setBorder(new javax.swing.border.EtchedBorder());
        jPanel6.setMinimumSize(new java.awt.Dimension(82, 37));
        jTextField36.setEditable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel6.add(jTextField36, gridBagConstraints);

        searchButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/kiwi/images/date.gif")));
        searchButton.setToolTipText("Search");
        searchButton.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        searchButton.setMaximumSize(new java.awt.Dimension(74, 53));
        searchButton.setMinimumSize(new java.awt.Dimension(74, 53));
        searchButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        jPanel6.add(searchButton, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 100;
        gridBagConstraints.weightx = 1.0;
        jPanel1.add(jPanel6, gridBagConstraints);

        jComboBox1.setModel(new org.netbeans.lib.sql.models.ComboBoxModel (nBCachedRowSet2, "store_name", null, null, null));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel1.add(jComboBox1, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = 6;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 2.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 10, 5, 10);
        jPanel2.add(jPanel1, gridBagConstraints);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Desc.", "Units", "Package", "Main Store Bal.", "Store Bal", "Qty Issued", "Price", "Total", "Qty Req."
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                true, false, true, false, false, true, true, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.setShowHorizontalLines(false);

        jTable1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTable1KeyReleased(evt);
            }
        });

        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });

        jScrollPane1.setViewportView(jTable1);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 6;
        gridBagConstraints.gridheight = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weighty = 30.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 5);
        jPanel2.add(jScrollPane1, gridBagConstraints);

        jPanel11.setLayout(new java.awt.GridBagLayout());

        jPanel11.setBorder(new javax.swing.border.TitledBorder(""));
        jLabel9.setText("Issued To");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 11;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel11.add(jLabel9, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 11;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 20);
        jPanel11.add(jTextField9, gridBagConstraints);

        jLabel5.setText("Issued By");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 11;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel11.add(jLabel5, gridBagConstraints);

        jTextField5.setEditable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 11;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 20);
        jPanel11.add(jTextField5, gridBagConstraints);

        jTextField2.setEditable(false);
        jTextField2.setText("0.00");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 20);
        jPanel11.add(jTextField2, gridBagConstraints);

        jLabel2.setText("Total");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 10;
        jPanel11.add(jLabel2, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.gridwidth = 6;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 2.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 10, 5, 10);
        jPanel2.add(jPanel11, gridBagConstraints);

        jLabel12.setFont(new java.awt.Font("Utopia", 3, 18));
        jLabel12.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 13;
        gridBagConstraints.gridwidth = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 30, 0, 0);
        jPanel2.add(jLabel12, gridBagConstraints);

        jPanel3.setLayout(new java.awt.GridBagLayout());

        jPanel3.setBorder(new javax.swing.border.TitledBorder("Click the button you are comfortable with"));
        jButton1.setMnemonic('O');
        jButton1.setText("Ok");
        jButton1.setToolTipText("click to store data");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 17;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel3.add(jButton1, gridBagConstraints);

        jButton5.setMnemonic('r');
        jButton5.setText("Remove Row");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 17;
        gridBagConstraints.weightx = 1.0;
        jPanel3.add(jButton5, gridBagConstraints);

        jButton8.setMnemonic('r');
        jButton8.setText("Reprint");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 17;
        gridBagConstraints.weightx = 1.0;
        jPanel3.add(jButton8, gridBagConstraints);

        jButton7.setMnemonic('p');
        jButton7.setText("Ok & Print");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 17;
        gridBagConstraints.weightx = 1.0;
        jPanel3.add(jButton7, gridBagConstraints);

        jButton3.setMnemonic('l');
        jButton3.setText("Clear");
        jButton3.setToolTipText("click to clear fields");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 17;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel3.add(jButton3, gridBagConstraints);

        jButton4.setMnemonic('C');
        jButton4.setText("Close");
        jButton4.setToolTipText("Click to close");
        jButton4.setSelected(true);
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 17;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel3.add(jButton4, gridBagConstraints);

        jButton6.setMnemonic('h');
        jButton6.setText("Help");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 7;
        gridBagConstraints.gridy = 17;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel3.add(jButton6, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 14;
        gridBagConstraints.gridwidth = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel2.add(jPanel3, gridBagConstraints);

        jTabbedPane1.addTab("Transfer ", jPanel2);

        jPanel21.setLayout(new java.awt.GridBagLayout());

        jPanel21.setBorder(new javax.swing.border.TitledBorder(""));
        jPanel12.setLayout(new java.awt.GridBagLayout());

        jPanel12.setBorder(new javax.swing.border.TitledBorder(""));
        jComboBox111.setModel(new org.netbeans.lib.sql.models.ComboBoxModel (crset32, "department_name", null, null, null));
        jComboBox111.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox111ActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 20);
        jPanel12.add(jComboBox111, gridBagConstraints);

        jLabel131.setText("Receipient");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 40, 0, 0);
        jPanel12.add(jLabel131, gridBagConstraints);

        jLabel11.setText("Issiuing Store");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        jPanel12.add(jLabel11, gridBagConstraints);

        jTextField11.setEditable(false);
        jTextField11.setText("GENERAL STORE");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel12.add(jTextField11, gridBagConstraints);

        jLabel31.setText("Date");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 40, 0, 0);
        jPanel12.add(jLabel31, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 50);
        jPanel12.add(datePicker11, gridBagConstraints);

        jLabel41.setText("Requisition No.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.weightx = 1.0;
        jPanel12.add(jLabel41, gridBagConstraints);

        jPanel61.setLayout(new java.awt.GridBagLayout());

        jPanel61.setBorder(new javax.swing.border.EtchedBorder());
        jPanel61.setMinimumSize(new java.awt.Dimension(82, 37));
        jTextField361.setEditable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel61.add(jTextField361, gridBagConstraints);

        searchButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/kiwi/images/date.gif")));
        searchButton1.setToolTipText("Search");
        searchButton1.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        searchButton1.setMaximumSize(new java.awt.Dimension(74, 53));
        searchButton1.setMinimumSize(new java.awt.Dimension(74, 53));
        searchButton1.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        searchButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButton1ActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        jPanel61.add(searchButton1, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 100;
        gridBagConstraints.weightx = 1.0;
        jPanel12.add(jPanel61, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = 6;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 2.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel21.add(jPanel12, gridBagConstraints);

        jTable11.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Desc.", "Units", "M/Store Bal.", "Qty Issued", "Price", "Value", "Qty Req."
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                true, true, false, true, true, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable11.setShowHorizontalLines(false);

        jTable11.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTable11KeyReleased(evt);
            }
        });

        jTable11.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable11MouseClicked(evt);
            }
        });

        jScrollPane11.setViewportView(jTable11);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 6;
        gridBagConstraints.gridheight = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weighty = 30.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 5);
        jPanel21.add(jScrollPane11, gridBagConstraints);

        jPanel111.setLayout(new java.awt.GridBagLayout());

        jPanel111.setBorder(new javax.swing.border.TitledBorder(""));
        jLabel91.setText("Issiued To");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 11;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel111.add(jLabel91, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 11;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 20);
        jPanel111.add(jTextField91, gridBagConstraints);

        jLabel51.setText("Issued By");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 11;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel111.add(jLabel51, gridBagConstraints);

        jTextField51.setEditable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 11;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 20);
        jPanel111.add(jTextField51, gridBagConstraints);

        jTextField21.setEditable(false);
        jTextField21.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTextField21.setText("0.00");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 20);
        jPanel111.add(jTextField21, gridBagConstraints);

        jLabel21.setText("Total");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 10;
        jPanel111.add(jLabel21, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 11;
        gridBagConstraints.gridwidth = 6;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 2.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel21.add(jPanel111, gridBagConstraints);

        jLabel121.setFont(new java.awt.Font("Utopia", 3, 18));
        jLabel121.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 16;
        gridBagConstraints.gridwidth = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 30, 0, 0);
        jPanel21.add(jLabel121, gridBagConstraints);

        jPanel4.setLayout(new java.awt.GridBagLayout());

        jPanel4.setBorder(new javax.swing.border.TitledBorder(""));
        jButton11.setMnemonic('O');
        jButton11.setText("Ok");
        jButton11.setToolTipText("click to store data");
        jButton11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton11ActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 17;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel4.add(jButton11, gridBagConstraints);

        jButton71.setMnemonic('p');
        jButton71.setText("Ok & Print");
        jButton71.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton71ActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 17;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel4.add(jButton71, gridBagConstraints);

        jButton81.setMnemonic('r');
        jButton81.setText("Reprint");
        jButton81.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton81ActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 17;
        gridBagConstraints.weightx = 1.0;
        jPanel4.add(jButton81, gridBagConstraints);

        jButton51.setMnemonic('r');
        jButton51.setText("Remove Row");
        jButton51.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton51ActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 17;
        gridBagConstraints.weightx = 1.0;
        jPanel4.add(jButton51, gridBagConstraints);

        jButton31.setMnemonic('l');
        jButton31.setText("Clear");
        jButton31.setToolTipText("click to clear fields");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 17;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel4.add(jButton31, gridBagConstraints);

        jButton41.setMnemonic('C');
        jButton41.setText("Close");
        jButton41.setToolTipText("Click to close");
        jButton41.setSelected(true);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 17;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel4.add(jButton41, gridBagConstraints);

        jButton61.setMnemonic('h');
        jButton61.setText("Help");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 17;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel4.add(jButton61, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 17;
        gridBagConstraints.gridwidth = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel21.add(jPanel4, gridBagConstraints);

        jTabbedPane1.addTab("Issuing", jPanel21);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(jTabbedPane1, gridBagConstraints);

        setBounds(0, 0, 750, 459);
    }//GEN-END:initComponents
    
    private void jButton51ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton51ActionPerformed
        
        int rows2Delete = jTable11.getSelectedRowCount();
        
        int[] selectedRows = jTable11.getSelectedRows();
        
        if (rows2Delete < 1) {
            
            java.awt.Toolkit.getDefaultToolkit().beep();
            
            javax.swing.JOptionPane.showMessageDialog(this, "There are no selected rows to delete!");
            
        } else {
            
            if (rows2Delete > 1) {
                
                for (int i = 0; i < selectedRows.length; i++) {
                    
                    
                    
                    javax.swing.table.DefaultTableModel defTableModel = (javax.swing.table.DefaultTableModel)jTable11.getModel();
                    
                    defTableModel.removeRow(selectedRows[i]);
                    
                }
                
                
                
            } else {
                
                javax.swing.table.DefaultTableModel defTableModel = (javax.swing.table.DefaultTableModel)jTable11.getModel();
                
                defTableModel.removeRow(jTable11.getSelectedRow());
                
                
            }
        }            // Add your handling code here:
    }//GEN-LAST:event_jButton51ActionPerformed
    
    private void jButton5111ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5111ActionPerformed
        jSearchDialog111.dispose();  // Add your handling code here:
    }//GEN-LAST:event_jButton5111ActionPerformed
    private void searchButton111Clicked() {
        
        System.out.println("Showing dialog");
        
        jSearchDialog111.dispose();
        java.awt.Point point = this.jTextField361.getLocationOnScreen();
        
        jSearchDialog111.setSize(400,200);
        
        jSearchDialog111.setLocation(point);
        jSearchDialog111.show();
        
        
    }
    private void jSearchTable111MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jSearchTable111MouseClicked
        jTextField361.setText(jSearchTable111.getValueAt(jSearchTable111.getSelectedRow(), 0).toString());
        this.jButton11.setEnabled(true);
        this.jButton71.setEnabled(true);
        jSearchDialog111.dispose();
        for (int k = 0; k < jTable11.getRowCount(); k++ ) {
            for (int r = 0; r < jTable11.getColumnCount(); r++ ) {
                jTable11.getModel().setValueAt(null,k,r);
            }
        }
        this.populateTable22(this.jTextField361.getText().toString());
        
        try {
            for (int j = 0; j< jTable11.getRowCount(); j++) {
                java.sql.Statement stmtTable111 = connectDB.createStatement();
                
                // java.sql.PreparedStatement pstmt = connectDB.prepareStatement("insert into st_stock_cardex values(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, upper(?), ?, ?, ?, ?, ?,?,?,?,?,?,?,?,?)");
                if (jTable11.getModel().getValueAt(j,0) != null){
                    
                    
                    
                    
                    
                    //int i = 0;
                    //try {
                    java.sql.Statement stmtTable11 = connectDB.createStatement();
                    
                    // java.sql.ResultSet rsetTable111 = stmtTable111.executeQuery("SELECT sum(receiving-issuing) FROM st_sub_stores WHERE item = '"+jTable1.getValueAt(j,0).toString()+"' GROUP BY item");
                    //  java.sql.ResultSet rsetTable111 = stmtTable111.executeQuery("SELECT sum(receiving-issuing) FROM st_sub_stores WHERE store_name = '"+jTextField1.getText()+"' and item = '"+jTable1.getValueAt(j,0).toString()+"' GROUP BY item");
                    
                    java.sql.ResultSet rsetTable11 = stmtTable11.executeQuery("SELECT quantity_instock FROM st_stock_item WHERE description ilike '"+jTable11.getValueAt(j,0).toString()+"'");
                    
                    while (rsetTable11.next()) {
                        
                        jTable11.setValueAt(rsetTable11.getObject(1), j, 2);
                        //   jTable11.setValueAt(rsetTable11.getObject(2), i, 2);
                        
                        //  i++;
                        
                        
                    }
                }
            }
        } catch(java.sql.SQLException sqlExec) {
            
            javax.swing.JOptionPane.showMessageDialog(this, sqlExec.getMessage());
        }
        
        jSearchDialog111.dispose();      // Add your handling code here:
    }//GEN-LAST:event_jSearchTable111MouseClicked
    private void populateTable22(java.lang.String patient_no) {
        
        int j = 0;
        try {
            java.sql.Statement stmtTable111 = connectDB.createStatement();
            java.sql.ResultSet rsetTable111 = stmtTable111.executeQuery("SELECT item_description,units,price,quantity-qty_ISSUED FROM st_receive_requisation WHERE requisition_no = '"+jTextField361.getText()+"'  and (quantity-qty_issued) >0 order by item_description");
            
            while (rsetTable111.next()) {
                
                jTable11.setValueAt(rsetTable111.getObject(1), j, 0);
                jTable11.setValueAt(rsetTable111.getObject(2), j, 1);
                jTable11.setValueAt(rsetTable111.getObject(3), j, 4);
                jTable11.setValueAt(rsetTable111.getObject(4), j, 6);
                //  jTable1.setValueAt(rsetTable1.getObject(5), i, 5);
                //   jTable1.setValueAt(rsetTable1.getObject(6), i, 6);
                
                j++;
                
            }
            
        } catch(java.sql.SQLException sqlExec) {
            
            javax.swing.JOptionPane.showMessageDialog(this, sqlExec.getMessage());
        }
    }
    private void jTextField111111CaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_jTextField111111CaretUpdate
        if(this.jTextField111111.getCaretPosition() < 2){
            System.out.print("Nothing");
        }else{
            try {
                searchRowSet111.execute("select distinct requisition_no as scheme,(date) as name from st_receive_requisation where requisition_no ILIKE '"+jTextField111111.getText().toString()+"%' and cost_center ilike '"+this.jComboBox111.getSelectedItem().toString()+"%' and store_name ilike '"+jTextField11.getText().toString()+"%'  and (quantity-qty_issued) >0 ORDER BY requisition_no");
                
                jSearchTable111.setModel(new org.netbeans.lib.sql.models.TableModel(searchRowSet111, new org.netbeans.lib.sql.models.TableModel.Column[] {
                    new org.netbeans.lib.sql.models.TableModel.Column("scheme", "Req. No.", false),
                    new org.netbeans.lib.sql.models.TableModel.Column("name", "Date", false)
                    //  new org.netbeans.lib.sql.models.TableModel.Column("account_no", "Acc No.", false)
                }));
                jSearchTable111.setShowHorizontalLines(false);
                jSearchScrollPane111.setViewportView(jSearchTable111);
                
                
            } catch(java.sql.SQLException sqlExec) {
                
                javax.swing.JOptionPane.showMessageDialog(this, sqlExec.getMessage());
                
            }
        }   // Add your handling code here:
    }//GEN-LAST:event_jTextField111111CaretUpdate
    
    private void searchButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButton1ActionPerformed
        searchButton111Clicked();
        this.jButton11.setEnabled(true);
        this.jButton71.setEnabled(true); // Add your handling code here:
    }//GEN-LAST:event_searchButton1ActionPerformed
    
    private void jSearchTable11MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jSearchTable11MouseClicked
        jTextField36.setText(jSearchTable11.getValueAt(jSearchTable11.getSelectedRow(), 0).toString());
        this.jButton1.setEnabled(true);
        this.jButton7.setEnabled(true);
        jSearchDialog11.dispose();
        for (int k = 0; k < jTable1.getRowCount(); k++ ) {
            for (int r = 0; r < jTable1.getColumnCount(); r++ ) {
                jTable1.getModel().setValueAt(null,k,r);
            }
        }
        this.populateTable2(this.jTextField36.getText().toString());
        
              /*    int j = 0;
                try {
                    java.sql.Statement stmtTable111 = connectDB.createStatement();
               
                    // java.sql.ResultSet rsetTable111 = stmtTable111.executeQuery("SELECT sum(receiving-issuing) FROM st_sub_stores WHERE item = '"+jTable1.getValueAt(j,0).toString()+"' GROUP BY item");
                    //  java.sql.ResultSet rsetTable111 = stmtTable111.executeQuery("SELECT sum(receiving-issuing) FROM st_sub_stores WHERE store_name = '"+jTextField1.getText()+"' and item = '"+jTable1.getValueAt(j,0).toString()+"' GROUP BY item");
                    java.sql.ResultSet rsetTable111 = stmtTable111.executeQuery("SELECT item_description,units,price,quantity FROM st_receive_requisation WHERE requisition_no = '"+jTextField36.getText()+"' and analysed = false");
               
                    while (rsetTable111.next()) {
               
                        jTable1.setValueAt(rsetTable111.getObject(1), j, 0);
                         jTable1.setValueAt(rsetTable111.getObject(2), j, 1);
                         jTable1.setValueAt(rsetTable111.getObject(3), j, 6);
                          jTable1.setValueAt(rsetTable111.getObject(4), j, 8);
               
                         j++;
                    }
               
               
               
               } catch(java.sql.SQLException sqlExec) {
               
                    javax.swing.JOptionPane.showMessageDialog(this, sqlExec.getMessage());
               }
               */
        // int i = 0;
        try {
            for (int i = 0; i< jTable1.getRowCount(); i++) {
                java.sql.Statement stmtTable11 = connectDB.createStatement();
                
                // java.sql.PreparedStatement pstmt = connectDB.prepareStatement("insert into st_stock_cardex values(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, upper(?), ?, ?, ?, ?, ?,?,?,?,?,?,?,?,?)");
                if (jTable1.getModel().getValueAt(i,0) != null){
                    
                    // java.sql.ResultSet rsetTable111 = stmtTable111.executeQuery("SELECT sum(receiving-issuing) FROM st_sub_stores WHERE item = '"+jTable1.getValueAt(j,0).toString()+"' GROUP BY item");
                    //  java.sql.ResultSet rsetTable111 = stmtTable111.executeQuery("SELECT sum(receiving-issuing) FROM st_sub_stores WHERE store_name = '"+jTextField1.getText()+"' and item = '"+jTable1.getValueAt(j,0).toString()+"' GROUP BY item");
                    
                    java.sql.ResultSet rsetTable11 = stmtTable11.executeQuery("SELECT quantity_instock,packaging FROM st_stock_item WHERE description ilike '"+jTable1.getValueAt(i,0).toString()+"'");
                    
                    while (rsetTable11.next()) {
                        
                        jTable1.setValueAt(rsetTable11.getObject(1), i, 3);
                        jTable1.setValueAt(rsetTable11.getObject(2), i, 2);
                        
                        // i++;
                        
                        
                    }
                    java.sql.Statement stmtTable111 = connectDB.createStatement();
                    
                    java.sql.ResultSet rsetTable111 = stmtTable111.executeQuery("SELECT balance FROM st_stock_prices WHERE product ilike '"+jTable1.getValueAt(i,0).toString()+"'");
                    
                    while (rsetTable111.next()) {
                        
                        jTable1.setValueAt(rsetTable111.getObject(1), i, 4);
                        //jTable1.setValueAt(rsetTable11.getObject(2), i, 2);
                        
                        //  r++;
                        
                        
                    }
                }
            }
            
        } catch(java.sql.SQLException sqlExec) {
            
            javax.swing.JOptionPane.showMessageDialog(this, sqlExec.getMessage());
        }
        
        
        
        //   } catch(java.sql.SQLException sqlExec) {
        
        //   javax.swing.JOptionPane.showMessageDialog(this, sqlExec.getMessage());
        // }
/* int r = 0;
  try {
                    java.sql.Statement stmtTable11 = connectDB.createStatement();
 
                    // java.sql.ResultSet rsetTable111 = stmtTable111.executeQuery("SELECT sum(receiving-issuing) FROM st_sub_stores WHERE item = '"+jTable1.getValueAt(j,0).toString()+"' GROUP BY item");
                    //  java.sql.ResultSet rsetTable111 = stmtTable111.executeQuery("SELECT sum(receiving-issuing) FROM st_sub_stores WHERE store_name = '"+jTextField1.getText()+"' and item = '"+jTable1.getValueAt(j,0).toString()+"' GROUP BY item");
 
                 java.sql.ResultSet rsetTable11 = stmtTable11.executeQuery("SELECT balance FROM st_stock_prices WHERE product ilike '"+jTable1.getValueAt(r,0).toString()+"'");
 
                    while (rsetTable11.next()) {
 
                        jTable1.setValueAt(rsetTable11.getObject(1), r, 4);
                         //jTable1.setValueAt(rsetTable11.getObject(2), i, 2);
 
                         r++;
 
 
            }
 
                } catch(java.sql.SQLException sqlExec) {
 
                    javax.swing.JOptionPane.showMessageDialog(this, sqlExec.getMessage());
                }
 */
        jSearchDialog11.dispose();           // Add your handling code here:
    }//GEN-LAST:event_jSearchTable11MouseClicked
    private void populateTable2(java.lang.String patient_no) {
        
        int j = 0;
        try {
            java.sql.Statement stmtTable111 = connectDB.createStatement();
            
            // java.sql.ResultSet rsetTable111 = stmtTable111.executeQuery("SELECT sum(receiving-issuing) FROM st_sub_stores WHERE item = '"+jTable1.getValueAt(j,0).toString()+"' GROUP BY item");
            //  java.sql.ResultSet rsetTable111 = stmtTable111.executeQuery("SELECT sum(receiving-issuing) FROM st_sub_stores WHERE store_name = '"+jTextField1.getText()+"' and item = '"+jTable1.getValueAt(j,0).toString()+"' GROUP BY item");
            java.sql.ResultSet rsetTable111 = stmtTable111.executeQuery("SELECT item_description,units,price,(quantity-qty_issued) FROM st_receive_requisation WHERE requisition_no = '"+jTextField36.getText()+"' and (quantity-qty_issued) >0  order by item_description");
            
            while (rsetTable111.next()) {
                
                jTable1.setValueAt(rsetTable111.getObject(1), j, 0);
                jTable1.setValueAt(rsetTable111.getObject(2), j, 1);
                jTable1.setValueAt(rsetTable111.getObject(3), j, 6);
                jTable1.setValueAt(rsetTable111.getObject(4), j, 8);
                
                j++;
            }
            
            
            
        } catch(java.sql.SQLException sqlExec) {
            
            javax.swing.JOptionPane.showMessageDialog(this, sqlExec.getMessage());
        }
    }
    private void jButton511ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton511ActionPerformed
        jSearchDialog11.dispose();         // Add your handling code here:
    }//GEN-LAST:event_jButton511ActionPerformed
    
    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonActionPerformed
        searchButton11Clicked();
        this.jButton1.setEnabled(true);
        
        this.jButton7.setEnabled(true);// Add your handling code here:
    }//GEN-LAST:event_searchButtonActionPerformed
    private void searchButton11Clicked() {
        
        System.out.println("Showing dialog");
        
        jSearchDialog11.dispose();
        java.awt.Point point = this.jTextField36.getLocationOnScreen();
        
        jSearchDialog11.setSize(400,200);
        
        jSearchDialog11.setLocation(point);
        jSearchDialog11.show();
        
        
    }
    private void jTextField11111CaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_jTextField11111CaretUpdate
        if(this.jTextField11111.getCaretPosition() < 2){
            System.out.print("Nothing");
        }else{
            try {
                searchRowSet11.execute("select distinct requisition_no as scheme,(date) as name from st_receive_requisation where requisition_no ILIKE '"+jTextField11111.getText().toString()+"%' and cost_center ilike '"+this.jComboBox11.getSelectedItem().toString()+"%' and analysed = false and store_name ilike '"+jComboBox1.getSelectedItem().toString()+"%' ORDER BY requisition_no");
                
                jSearchTable11.setModel(new org.netbeans.lib.sql.models.TableModel(searchRowSet11, new org.netbeans.lib.sql.models.TableModel.Column[] {
                    new org.netbeans.lib.sql.models.TableModel.Column("scheme", "Req. No.", false),
                    new org.netbeans.lib.sql.models.TableModel.Column("name", "Date", false)
                    //  new org.netbeans.lib.sql.models.TableModel.Column("account_no", "Acc No.", false)
                }));
                jSearchTable11.setShowHorizontalLines(false);
                jSearchScrollPane11.setViewportView(jSearchTable11);
                
                
            } catch(java.sql.SQLException sqlExec) {
                
                javax.swing.JOptionPane.showMessageDialog(this, sqlExec.getMessage());
                
            }
        }        // Add your handling code here:
    }//GEN-LAST:event_jTextField11111CaretUpdate
    
    private void jButton81ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton81ActionPerformed
        String transNo = null;
        try {
            connectDB.setAutoCommit(false);
            
            
            
            java.sql.Statement ps1 = connectDB.createStatement();
            java.sql.ResultSet rst1 = ps1.executeQuery("select 'I'||currval('Issiuing_seq')");
       
            while (rst1.next())
                transNo = rst1.getObject(1).toString();
            
            IssuingItemsPdf policy = new IssuingItemsPdf();
            policy.IssuingItemsPdf(connectDB,transNo);
            
            
            
        }catch(java.sql.SQLException sq){
            
            try {
                connectDB.rollback();
            }catch (java.sql.SQLException sql){
                javax.swing.JOptionPane.showMessageDialog(this,sql.getMessage(),"Error Message!",javax.swing.JOptionPane.ERROR_MESSAGE);
            }
            System.out.println(sq.getMessage());
            javax.swing.JOptionPane.showMessageDialog(this,sq.getMessage(), "Error",javax.swing.JOptionPane.ERROR_MESSAGE);
            
        }          // Add your handling code here:
    }//GEN-LAST:event_jButton81ActionPerformed
    
    private void jButton71ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton71ActionPerformed
        java.util.Calendar calendar = java.util.Calendar.getInstance();
        
        long dateNow = calendar.getTimeInMillis();
        
        java.sql.Date datenowSql= new java.sql.Date(dateNow);
        try {
        String Stock = null;
        String actCode = null;
        String transNo = null;
        String userName = null;
        String glCode = null;
        String glType = null;
        try {
            
            connectDB.setAutoCommit(false);
            java.sql.Statement pst21 = connectDB.createStatement();
            java.sql.ResultSet rs1 = pst21.executeQuery("select 'I'||nextval('issiuing_seq')");
            while (rs1.next())
                transNo = rs1.getObject(1).toString();
            java.sql.Statement pst2 = connectDB.createStatement();
                       java.sql.ResultSet rs = pst2.executeQuery("select code,activity,current_user from pb_activity where activity_category = 'SG'");
            while (rs.next())
                actCode = rs.getObject(1).toString();
            Stock = rs.getObject(2).toString();
            userName = rs.getObject(3).toString();
            
            java.sql.Statement pst211 = connectDB.createStatement();
            java.sql.ResultSet rs11 = pst211.executeQuery("select code,activity from pb_activity where activity_category = 'EC'");
            while (rs11.next())
                glCode = rs11.getObject(1).toString();
            glType = rs11.getObject(2).toString();
            for (int i = 0; i< jTable11.getRowCount(); i++) {
                
                java.sql.PreparedStatement pstmt = connectDB.prepareStatement("insert into st_stock_cardex values(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, upper(?), ?, ?, ?, ?, ?,?,?,?,?,?,?,?,?)");
                if (jTable11.getModel().getValueAt(i,4) != null){
                    
                    pstmt.setString(1,null);
                    pstmt.setObject(3,jTable11.getValueAt(i,0));
                    pstmt.setString(2,jTextField11.getText());
                    pstmt.setString(4,null);
                    pstmt.setObject(5,jTable11.getValueAt(i,5));
                    pstmt.setObject(6,jTable11.getValueAt(i,4));
                    pstmt.setObject(7,jTable11.getValueAt(i,1));
                    pstmt.setObject(8,"");
                    pstmt.setObject(9,null);
                    pstmt.setString(10,null);
                    pstmt.setString(11,"0.00");
                    pstmt.setObject(12,jTable11.getValueAt(i,3));
                    pstmt.setString(13,"0.00");
                    if(jTextField91.getText().equals("")){
                        javax.swing.JOptionPane.showMessageDialog(this, "Enter Issued to","Error Message!",javax.swing.JOptionPane.ERROR_MESSAGE);
                    }else{
                        pstmt.setString(14,jTextField91.getText());
                    }
                    pstmt.setString(15,userName);
                    pstmt.setString(16,"");
                    pstmt.setString(17,null);
                    pstmt.setString(18,datePicker11.getDate().toString());
                    pstmt.setString(19,jComboBox111.getSelectedItem().toString());
                    pstmt.setString(20,"Issuing");
                    pstmt.setObject(21,"0.00");
                    pstmt.setString(23,actCode);
                    pstmt.setObject(22,"0.00");
                    pstmt.setString(24,"");
                    pstmt.setString(25,Stock);
                    pstmt.setString(26,transNo);
                    pstmt.setString(27,"0.00");
                    pstmt.executeUpdate();
                     java.sql.PreparedStatement pstmt8121 = connectDB.prepareStatement("UPDATE pb_activity SET ytd_credit = ytd_credit + '"+jTable11.getValueAt(i,5).toString()+"' where code = '"+actCode+"'");
                    pstmt8121.executeUpdate(); 
                    
                    java.sql.PreparedStatement pstmt2 = connectDB.prepareStatement("insert into ac_ledger values(?,?,?,upper(?),?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?)");
                    pstmt2.setObject(1,glCode);
                    pstmt2.setObject(2,glType);
                    pstmt2.setString(3,"");
                    pstmt2.setString(4,jTextField91.getText());
                    pstmt2.setString(5,"");
                    pstmt2.setString(6,"");
                    pstmt2.setString(7,"");
                    pstmt2.setString(8,"");
                    pstmt2.setString(9,"");
                    pstmt2.setString(10,"");
                    pstmt2.setString(11,"");
                    pstmt2.setString(12,"");
                    pstmt2.setString(13,"");
                    pstmt2.setString(14,glType);
                    pstmt2.setString(15,"Issuing");
                    pstmt2.setObject(16,jTable11.getValueAt(i,5));
                    pstmt2.setObject(17,"00");
                    pstmt2.setString(18,datePicker11.getDate().toString());
                    pstmt2.setString(19,""+transNo+"");
                    pstmt2.setBoolean(20,false);
                    pstmt2.setBoolean(21,false);
                    pstmt2.setBoolean(22,false);
                    pstmt2.setString(23,userName);
                    pstmt2.executeUpdate();
                      java.sql.PreparedStatement pstmt81213 = connectDB.prepareStatement("UPDATE pb_activity SET ytd_credit = ytd_credit + '"+jTable11.getValueAt(i,5).toString()+"' where code = '"+glCode+"'");
                    pstmt81213.executeUpdate(); 
                    
                    java.sql.PreparedStatement pstmt1 = connectDB.prepareStatement("insert into st_sub_stores values(? , ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?,?)");
                    
                    pstmt1.setString(1,jTextField11.getText());
                    pstmt1.setObject(2,jTable11.getValueAt(i,0));
                    pstmt1.setObject(4,jTable11.getValueAt(i,3));
                    pstmt1.setString(3,"00");
                    pstmt1.setObject(5,jTable11.getValueAt(i,4));
                    pstmt1.setObject(6,jTable11.getValueAt(i,5));
                    pstmt1.setObject(7,"00");
                    pstmt1.setString(8,transNo);
                    pstmt1.setString(9,"");
                    pstmt1.setString(10,datePicker11.getDate().toString());
                    pstmt1.setString(11,userName);
                    pstmt1.setObject(12,jTable11.getValueAt(i,1));
                    pstmt1.setString(13,jComboBox111.getSelectedItem().toString());
                    pstmt1.setString(14,jTextField91.getText());
                    pstmt1.executeUpdate();
                    
                    double quantity = Double.parseDouble(jTable11.getModel().getValueAt(i, 3).toString());
                    
                    
                    
                    java.sql.PreparedStatement pstmt32 = connectDB.prepareStatement("UPDATE st_stock_item SET quantity_instock = quantity_instock - "+new java.lang.Double(quantity)+" WHERE description = '"+jTable11.getValueAt(i,0).toString()+"' AND department = '"+jTextField11.getText()+"'");
                    pstmt32.executeUpdate();
                    
                     java.sql.PreparedStatement pstmt321 = connectDB.prepareStatement("UPDATE st_receive_requisation SET qty_issued = qty_issued + "+new java.lang.Double(quantity)+" WHERE requisition_no = '"+jTextField361.getText()+"' and item_description = '"+jTable11.getValueAt(i,0).toString()+"'");
                       pstmt321.executeUpdate();
                  
                }
            }
            connectDB.commit();
            connectDB.setAutoCommit(true);
            javax.swing.JOptionPane.showMessageDialog(this, "Data Inserted Successfully","Confirmation Message!",javax.swing.JOptionPane.INFORMATION_MESSAGE);
            
            this.jButton11.setEnabled(false);
            this.jButton71.setEnabled(false);
            IssuingItemsPdf policy = new IssuingItemsPdf();
            policy.IssuingItemsPdf(connectDB,transNo);
            // this.jButton1.setEnabled(false);
            for (int k = 0; k < jTable11.getRowCount(); k++ ) {
                for (int r = 0; r < jTable11.getColumnCount(); r++ ) {
                    jTable11.getModel().setValueAt(null,k,r);
                }
            }
            
            jTextField91.setText("");
            //            jComboBox1111.setSelectedItem(null);
            // javax.swing.JOptionPane.showMessageDialog(this, "Enter quantity issued","Error Message!",javax.swing.JOptionPane.ERROR_MESSAGE);
            
        }   catch(java.sql.SQLException sq){
            javax.swing.JOptionPane.showMessageDialog(this, sq.getMessage(),"Error Message!",javax.swing.JOptionPane.ERROR_MESSAGE);
            
            try {
                connectDB.rollback();
            }catch (java.sql.SQLException sql){
                javax.swing.JOptionPane.showMessageDialog(this,sql.getMessage(),"Error Message!",javax.swing.JOptionPane.ERROR_MESSAGE);
            }
            
        }    
        
         } catch(java.lang.Exception ex) {
            System.out.println(ex.getMessage());
            javax.swing.JOptionPane.showMessageDialog(this, "TRANSACTION ERROR : Please double check your entries.", "Error",javax.swing.JOptionPane.ERROR_MESSAGE);
            
            
        }
        // Add your handling code here:
    }//GEN-LAST:event_jButton71ActionPerformed
    
    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        String transNo = null;
        try {
            connectDB.setAutoCommit(false);
            
            
            
            java.sql.Statement ps1 = connectDB.createStatement();
            java.sql.ResultSet rst1 = ps1.executeQuery("select 'T'||currval('transfer_seq')");
            
            //   java.sql.ResultSet rst1 = ps1.executeQuery("select currval('receipt_no_seq')");
            while (rst1.next())
                transNo = rst1.getObject(1).toString();
            
            TransferedItemsPdf policy = new TransferedItemsPdf();
            policy.TransferedItemsPdf(connectDB,transNo);
            
            
            
        }catch(java.sql.SQLException sq){
            
            try {
                connectDB.rollback();
            }catch (java.sql.SQLException sql){
                javax.swing.JOptionPane.showMessageDialog(this,sql.getMessage(),"Error Message!",javax.swing.JOptionPane.ERROR_MESSAGE);
            }
            System.out.println(sq.getMessage());
            javax.swing.JOptionPane.showMessageDialog(this,sq.getMessage(), "Error",javax.swing.JOptionPane.ERROR_MESSAGE);
            
        }         // Add your handling code here:
    }//GEN-LAST:event_jButton8ActionPerformed
    
    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        java.util.Calendar calendar = java.util.Calendar.getInstance();
        
        long dateNow = calendar.getTimeInMillis();
        
        java.sql.Date datenowSql= new java.sql.Date(dateNow);
        try {
        String Stock = null;
        String actCode = null;
        String transNo = null;
        String userName = null;
        String glCode = null;
        String glType = null;
        try {
            jButton1ActionPerformed(evt);
            connectDB.setAutoCommit(false);
            java.sql.Statement pst21 = connectDB.createStatement();
            java.sql.ResultSet rs1 = pst21.executeQuery("select 'T'||currval('transfer_seq')");
            while (rs1.next()){
                transNo = rs1.getObject(1).toString();
            }
           /* java.sql.Statement pst2 = connectDB.createStatement();
            java.sql.ResultSet rs = pst2.executeQuery("select code,activity,current_user from pb_activity where activity_category = 'S'");
            while (rs.next())
                actCode = rs.getObject(1).toString();
            Stock = rs.getObject(2).toString();
            userName = rs.getObject(3).toString();
            
            java.sql.Statement pst211 = connectDB.createStatement();
            java.sql.ResultSet rs11 = pst211.executeQuery("select code,activity from pb_activity where activity_category = 'CS'");
            while (rs11.next())
                glCode = rs11.getObject(1).toString();
            glType = rs11.getObject(2).toString();
            for (int i = 0; i< jTable1.getRowCount(); i++) {
                if (jTable1.getModel().getValueAt(i,5) != null){
                    double Qty = Double.parseDouble(jTable1.getModel().getValueAt(i, 5).toString());
                  if (Qty > 0){   
                    double quantity = Double.parseDouble(jTable1.getModel().getValueAt(i, 5).toString());
                    
                    double pack = Double.parseDouble(jTable1.getModel().getValueAt(i, 2).toString());
                    
                    java.sql.PreparedStatement pstmt1 = connectDB.prepareStatement("insert into st_sub_stores values(? , ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?,?)");
                    
                    pstmt1.setString(1,jTextField1.getText());
                    pstmt1.setObject(2,jTable1.getValueAt(i,0));
                    pstmt1.setDouble(4,quantity*pack);
                    pstmt1.setString(3,"00");
                    pstmt1.setObject(5,jTable1.getValueAt(i,6));
                    pstmt1.setObject(6,jTable1.getValueAt(i,7));
                    pstmt1.setObject(7,"00");
                    pstmt1.setString(8,transNo);
                    pstmt1.setString(9,"");
                    pstmt1.setString(10,datePicker1.getDate().toString());
                    pstmt1.setString(11,userName);
                    pstmt1.setObject(12,jTable1.getValueAt(i,1));
                    pstmt1.setString(13,jComboBox11.getSelectedItem().toString());
                    pstmt1.setString(14,jTextField9.getText());
                    pstmt1.executeUpdate();
                    
                    
                    
                    java.sql.PreparedStatement pstmt31 = connectDB.prepareStatement("UPDATE st_stock_prices SET balance = balance + "+new java.lang.Double(quantity*pack)+", requisition = requisition - "+new java.lang.Double(quantity*pack)+" WHERE product = '"+jTable1.getValueAt(i,0).toString()+"' AND department = '"+jComboBox11.getSelectedItem().toString()+"'");
                    pstmt31.executeUpdate();
                    
                    java.sql.PreparedStatement pstmt32 = connectDB.prepareStatement("UPDATE st_stock_item SET quantity_instock = quantity_instock - "+new java.lang.Double(quantity)+" WHERE description = '"+jTable1.getValueAt(i,0).toString()+"' AND department = '"+jTextField1.getText()+"'");
                    pstmt32.executeUpdate();
                     java.sql.PreparedStatement pstmt321 = connectDB.prepareStatement("UPDATE st_receive_requisation SET qty_issued = qty_issued + "+new java.lang.Double(quantity)+" WHERE requisition_no = '"+jTextField36.getText()+"' and item_description = '"+jTable1.getValueAt(i,0).toString()+"'");
                       pstmt321.executeUpdate();
                   
                }
                }
            }*/
            connectDB.commit();
            connectDB.setAutoCommit(true);
            
         //   javax.swing.JOptionPane.showMessageDialog(this, "Data Inserted Successfully","Confirmation Message!",javax.swing.JOptionPane.INFORMATION_MESSAGE);
            TransferedItemsPdf policy = new TransferedItemsPdf();
            policy.TransferedItemsPdf(connectDB,transNo);
            
            
            this.jButton1.setEnabled(false);
            this.jButton7.setEnabled(false);
            for (int k = 0; k < jTable1.getRowCount(); k++ ) {
                for (int r = 0; r < jTable1.getColumnCount(); r++ ) {
                    jTable1.getModel().setValueAt(null,k,r);
                }
            }
            
            jTextField9.setText("");
            //            jComboBox11.setSelectedItem(null);
            // javax.swing.JOptionPane.showMessageDialog(this, "Enter quantity issued","Error Message!",javax.swing.JOptionPane.ERROR_MESSAGE);
            
        }   catch(java.sql.SQLException sq){
            javax.swing.JOptionPane.showMessageDialog(this, sq.getMessage(),"Error Message!",javax.swing.JOptionPane.ERROR_MESSAGE);
            
            try {
                connectDB.rollback();
            }catch (java.sql.SQLException sql){
                javax.swing.JOptionPane.showMessageDialog(this,sql.getMessage(),"Error Message!",javax.swing.JOptionPane.ERROR_MESSAGE);
            }
            // jLabel12.setForeground(java.awt.Color.red);
            // jLabel12.setText("Sorry. Another  Code already exists");
        }   
        
         } catch(java.lang.Exception ex) {
            System.out.println(ex.getMessage());
            javax.swing.JOptionPane.showMessageDialog(this, "TRANSACTION ERROR : Please double check your entries.", "Error",javax.swing.JOptionPane.ERROR_MESSAGE);
            
            
        }
        
       
        // Add your handling code here:
    }//GEN-LAST:event_jButton7ActionPerformed
    
    private void jButton11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton11ActionPerformed
        java.util.Calendar calendar = java.util.Calendar.getInstance();
        
        long dateNow = calendar.getTimeInMillis();
        
        java.sql.Date datenowSql= new java.sql.Date(dateNow);
        try {
        String Stock = null;
        String actCode = null;
        String transNo = null;
        String userName = null;
        String glCode = null;
        String glType = null;
        try {
            
            connectDB.setAutoCommit(false);
            java.sql.Statement pst21 = connectDB.createStatement();
            java.sql.ResultSet rs1 = pst21.executeQuery("select 'I'||nextval('issiuing_seq')");
            while (rs1.next())
                transNo = rs1.getObject(1).toString();
            java.sql.Statement pst2 = connectDB.createStatement();
            java.sql.ResultSet rs = pst2.executeQuery("select code,activity,current_user from pb_activity where activity_category ILIKE 'SG'");
            while (rs.next())
                actCode = rs.getObject(1).toString();
            Stock = rs.getObject(2).toString();
            userName = rs.getObject(3).toString();
            
            java.sql.Statement pst211 = connectDB.createStatement();
            java.sql.ResultSet rs11 = pst211.executeQuery("select code,activity from pb_activity where activity_category ILIKE 'EC'");
            while (rs11.next())
                glCode = rs11.getObject(1).toString();
            glType = rs11.getObject(2).toString();
            for (int i = 0; i< jTable11.getRowCount(); i++) {
                
                java.sql.PreparedStatement pstmt = connectDB.prepareStatement("insert into st_stock_cardex values(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, upper(?), ?, ?, ?, ?, ?,?,?,?,?,?,?,?,?)");
                if (jTable11.getModel().getValueAt(i,4) != null){
                    
                    pstmt.setString(1,null);
                    pstmt.setObject(3,jTable11.getValueAt(i,0));
                    pstmt.setString(2,jTextField11.getText());
                    pstmt.setString(4,null);
                    pstmt.setObject(5,jTable11.getValueAt(i,5));
                    pstmt.setObject(6,jTable11.getValueAt(i,4));
                    pstmt.setObject(7,jTable11.getValueAt(i,1));
                    pstmt.setObject(8,"");
                    pstmt.setObject(9,null);
                    pstmt.setString(10,null);
                    pstmt.setString(11,"0.00");
                    pstmt.setObject(12,jTable11.getValueAt(i,3));
                    pstmt.setString(13,"0.00");
                    if(jTextField91.getText().equals("")){
                        javax.swing.JOptionPane.showMessageDialog(this, "Enter Issued to","Error Message!",javax.swing.JOptionPane.ERROR_MESSAGE);
                    }else{
                        pstmt.setString(14,jTextField91.getText());
                    }
                    pstmt.setString(15,userName);
                    pstmt.setString(16,"");
                    pstmt.setString(17,null);
                    pstmt.setString(18,datePicker11.getDate().toString());
                    pstmt.setString(19,jComboBox111.getSelectedItem().toString());
                    pstmt.setString(20,"Issuing");
                    pstmt.setObject(21,"0.00");
                    pstmt.setString(23,actCode);
                    pstmt.setObject(22,"0.00");
                    pstmt.setString(24,"");
                    pstmt.setString(25,Stock);
                    pstmt.setString(26,transNo);
                    pstmt.setString(27,"0.00");
                    pstmt.executeUpdate();
                    java.sql.PreparedStatement pstmt8121 = connectDB.prepareStatement("UPDATE pb_activity SET ytd_credit = ytd_credit + '"+jTable11.getValueAt(i,5).toString()+"' where code = '"+actCode+"'");
                    pstmt8121.executeUpdate(); 
                    
                    java.sql.PreparedStatement pstmt2 = connectDB.prepareStatement("insert into ac_ledger values(?,?,?,upper(?),?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?)");
                    pstmt2.setObject(1,glCode);
                    pstmt2.setObject(2,glType);
                    pstmt2.setString(3,"");
                    pstmt2.setString(4,jTextField91.getText());
                    pstmt2.setString(5,"");
                    pstmt2.setString(6,"");
                    pstmt2.setString(7,"");
                    pstmt2.setString(8,"");
                    pstmt2.setString(9,"");
                    pstmt2.setString(10,"");
                    pstmt2.setString(11,"");
                    pstmt2.setString(12,"");
                    pstmt2.setString(13,"");
                    pstmt2.setString(14,glType);
                    pstmt2.setString(15,"Issuing");
                    pstmt2.setObject(16,jTable11.getValueAt(i,5));
                    pstmt2.setObject(17,"00");
                    pstmt2.setString(18,datePicker11.getDate().toString());
                    pstmt2.setString(19,""+transNo+"");
                    pstmt2.setBoolean(20,false);
                    pstmt2.setBoolean(21,false);
                    pstmt2.setBoolean(22,false);
                    pstmt2.setString(23,userName);
                    pstmt2.executeUpdate();
                      java.sql.PreparedStatement pstmt81213 = connectDB.prepareStatement("UPDATE pb_activity SET ytd_credit = ytd_credit + '"+jTable11.getValueAt(i,5).toString()+"' where code = '"+glCode+"'");
                    pstmt81213.executeUpdate(); 
                    
                    java.sql.PreparedStatement pstmt1 = connectDB.prepareStatement("insert into st_sub_stores values(? , ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?,?)");
                    
                    pstmt1.setString(1,jTextField11.getText());
                    pstmt1.setObject(2,jTable11.getValueAt(i,0));
                    pstmt1.setObject(4,jTable11.getValueAt(i,3));
                    pstmt1.setString(3,"00");
                    pstmt1.setObject(5,jTable11.getValueAt(i,4));
                    pstmt1.setObject(6,jTable11.getValueAt(i,5));
                    pstmt1.setObject(7,"00");
                    pstmt1.setString(8,transNo);
                    pstmt1.setString(9,"");
                    pstmt1.setString(10,datePicker11.getDate().toString());
                    pstmt1.setString(11,userName);
                    pstmt1.setObject(12,jTable11.getValueAt(i,1));
                    pstmt1.setString(13,jComboBox111.getSelectedItem().toString());
                    pstmt1.setString(14,jTextField91.getText());
                    pstmt1.executeUpdate();
                    //    java.sql.PreparedStatement pstmt11 = connectDB.prepareStatement("update st_receive_requisation set issiued = 'true' where cost_center ='"+jComboBox111.getSelectedItem()+"' AND item_description = '"+jTable11.getValueAt(i,0).toString()+"'");
                    //    pstmt11.executeUpdate();
                    double quantity = Double.parseDouble(jTable11.getModel().getValueAt(i, 3).toString());
                    
                    
                    
                    java.sql.PreparedStatement pstmt32 = connectDB.prepareStatement("UPDATE st_stock_item SET quantity_instock = quantity_instock - "+new java.lang.Double(quantity)+" WHERE description = '"+jTable11.getValueAt(i,0).toString()+"' AND department = '"+jTextField11.getText()+"'");
                    pstmt32.executeUpdate();
                   java.sql.PreparedStatement pstmt321 = connectDB.prepareStatement("UPDATE st_receive_requisation SET qty_issued = qty_issued + "+new java.lang.Double(quantity)+" WHERE requisition_no = '"+jTextField361.getText()+"' and item_description = '"+jTable11.getValueAt(i,0).toString()+"'");
                       pstmt321.executeUpdate();
                }
            }
            connectDB.commit();
            connectDB.setAutoCommit(true);
            javax.swing.JOptionPane.showMessageDialog(this, "Data Inserted Successfully","Confirmation Message!",javax.swing.JOptionPane.INFORMATION_MESSAGE);
            
            this.jButton11.setEnabled(false);
            this.jButton71.setEnabled(false);
            for (int k = 0; k < jTable11.getRowCount(); k++ ) {
                for (int r = 0; r < jTable11.getColumnCount(); r++ ) {
                    jTable11.getModel().setValueAt(null,k,r);
                }
            }
            
            jTextField9.setText("");
              
        }   catch(java.sql.SQLException sq){
            javax.swing.JOptionPane.showMessageDialog(this, sq.getMessage(),"Error Message!",javax.swing.JOptionPane.ERROR_MESSAGE);
            
            try {
                connectDB.rollback();
            }catch (java.sql.SQLException sql){
                javax.swing.JOptionPane.showMessageDialog(this,sql.getMessage(),"Error Message!",javax.swing.JOptionPane.ERROR_MESSAGE);
            }
           }
        
         } catch(java.lang.Exception ex) {
            System.out.println(ex.getMessage());
            javax.swing.JOptionPane.showMessageDialog(this, "TRANSACTION ERROR : Please double check your entries.", "Error",javax.swing.JOptionPane.ERROR_MESSAGE);
            
            
        }
        // Add your handling code here:
    }//GEN-LAST:event_jButton11ActionPerformed
    
    private void jTextField1111CaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_jTextField1111CaretUpdate
        if(jTextField1111.getCaretPosition() > 2){
            try {
                searchRowSet1.execute("select description,units,buying_price FROM st_stock_item WHERE description ILIKE '"+jTextField1111.getText()+"%' and department ilike '"+jTextField11.getText()+"%' ORDER BY description");
                
                jSearchTable1.setModel(new org.netbeans.lib.sql.models.TableModel(searchRowSet1, new org.netbeans.lib.sql.models.TableModel.Column[] {
                    new org.netbeans.lib.sql.models.TableModel.Column("description", "Desc.", false),
                    new org.netbeans.lib.sql.models.TableModel.Column("units", "Units", false),
                    new org.netbeans.lib.sql.models.TableModel.Column("buying_price", "Cost", false)
                }));
                jSearchScrollPane1.setViewportView(jSearchTable1);
                System.out.println("Cannot sort out");
            } catch(java.sql.SQLException sqlExec) {
                
                javax.swing.JOptionPane.showMessageDialog(this, sqlExec.getMessage());
                
            }
        }
        // Add your handling code here:
    }//GEN-LAST:event_jTextField1111CaretUpdate
    
    private void jComboBox111ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox111ActionPerformed
        
    /*
        try {
            searchRowSet1.setCommand("select description ,units FROM st_stock_item WHERE department = '"+jComboBox111.getSelectedItem()+"' order by description");
            searchRowSet1.setConnectionSource(pConnDB);
     
            searchRowSet1.execute();
     
            // crset2.setExecuteOnLoad(true);
            jSearchTable1.setModel(new org.netbeans.lib.sql.models.TableModel(searchRowSet1, new org.netbeans.lib.sql.models.TableModel.Column[] {
                new org.netbeans.lib.sql.models.TableModel.Column("description", "Description", false),
                new org.netbeans.lib.sql.models.TableModel.Column("units", "Units", false)
                //    new org.netbeans.lib.sql.models.TableModel.Column("gl_account", "Gl_code", false),
     
     
            }));
            jSearchScrollPane1.setViewportView(jSearchTable1);
     
        } catch(java.sql.SQLException sqlex){
            javax.swing.JOptionPane.showMessageDialog(this,sqlex.getMessage(),"Error Message!",javax.swing.JOptionPane.ERROR_MESSAGE);
     
            System.out.println(sqlex.getMessage());
        }
        //        jScrollPane1.setViewportView(jTable11);
     */
        // Add your handling code here:
    }//GEN-LAST:event_jComboBox111ActionPerformed
    
    private void jTable11KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTable11KeyReleased
        double resFloat = 0.00;
        if (jTable11.getValueAt(jTable11.getSelectedRow(), jTable11.getSelectedColumn()) != null) {
            
            float floatCol2 = java.lang.Float.parseFloat(jTable11.getValueAt(jTable11.getSelectedRow(), 4).toString());
            
            float floatCol3 = java.lang.Float.parseFloat(jTable11.getValueAt(jTable11.getSelectedRow(), 3).toString());
            
            float resVal = floatCol2 * floatCol3;
            
            //           if (jTable11.getValueAt(jTable11.getSelectedRow(), 3) != null) {
            
            //               float floatCol4 = java.lang.Float.parseFloat(jTable11.getValueAt(jTable11.getSelectedRow(), 4).toString());
            
            resVal = (floatCol2 * floatCol3);
            //  resFloat = resVal;
            System.out.println(resVal);
            jTable11.setValueAt(new java.lang.Float(resVal), jTable11.getSelectedRow(), 5);
            
            
            for (int i = 0; i < jTable11.getRowCount(); i++) {
                
                if (jTable11.getModel().getValueAt(i, 1) != null) {//toString().compareToIgnoreCase(null) {
                    
                    resFloat = resFloat + Double.parseDouble(jTable11.getValueAt(i, 5).toString());
                    
                    
                    // totalSum = floatTotal + resFloat;
                    
                }
                //}
            }
        }
        this.tableModelTableChanged();        // Add your handling code here:
    }//GEN-LAST:event_jTable11KeyReleased
    public void tableModelTableChanged() {
        System.out.println("Calculating totals for table 11 and 2.");
        //        double resFloat = 0.00;
        double resFloat = 0.00;
        
        for (int i = 0; i < jTable11.getRowCount(); i++) {
            
            if (jTable11.getModel().getValueAt(i, 0) != null) {
                
                if (jTable11.getSelectedColumn() == 3) {
                    
                    resFloat = resFloat + Double.parseDouble(jTable11.getModel().getValueAt(i, 5).toString());
                    
                    jTextField21.setText(java.lang.String.valueOf(resFloat));
                }else
                    //   if (jTable11.getSelectedColumn() == 4) {
                    
                    resFloat = resFloat + Double.parseDouble(jTable11.getModel().getValueAt(i,5).toString());
                //9   }
                
                jTextField21.setText(java.lang.String.valueOf(resFloat));
                
            }
        }
        
        //               jTextField31.setText(java.lang.String.valueOf(resFloat));
    }
    private void jSearchTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jSearchTable1MouseClicked
        jTable11.setValueAt(jSearchTable1.getValueAt(jSearchTable1.getSelectedRow(),0),jTable11.getSelectedRow(), 0);
        jTable11.setValueAt(jSearchTable1.getValueAt(jSearchTable1.getSelectedRow(),1),jTable11.getSelectedRow(), 1);
        jTable11.setValueAt(jSearchTable1.getValueAt(jSearchTable1.getSelectedRow(),2),jTable11.getSelectedRow(), 4);
        jSearchDialog1.dispose();
        int i = jTable11.getSelectedRow();
        try {
            connectDB.setAutoCommit(false);
            
            
            
            java.sql.Statement ps1 = connectDB.createStatement();
            java.sql.ResultSet rst1 = ps1.executeQuery("SELECT quantity_instock FROM st_stock_item WHERE description ilike '"+jTextField1111.getText()+"%'");
            
            
            //   java.sql.ResultSet rst1 = ps1.executeQuery("select currval('receipt_no_seq')");
            while (rst1.next()){
                jTable11.setValueAt(rst1.getObject(1),i,3);
                //jTable11.setValueAt(rst1.getObject(2),i,4);
                
            }
            java.sql.Statement stmtTable = connectDB.createStatement();
            
            java.sql.ResultSet rsetTable = stmtTable.executeQuery("SELECT balance,requisition,units FROM st_stock_prices WHERE  department = '"+jComboBox11.getSelectedItem().toString()+"' and product ilike '"+jTextField1111.getText()+"%'");
            while (rsetTable.next()) {
                
                jTable11.setValueAt(rsetTable.getObject(1), i, 4);
                jTable11.setValueAt(rsetTable.getObject(3), i, 1);
                jTable11.setValueAt(rsetTable.getObject(2), i, 2);
                //  jTable1.setValueAt(rsetTable1.getObject(4), i, 4);
                //  jTable1.setValueAt(rsetTable1.getObject(5), i, 5);
                //   jTable1.setValueAt(rsetTable1.getObject(6), i, 6);
            }
        }catch(java.sql.SQLException sq){
            
            try {
                connectDB.rollback();
            }catch (java.sql.SQLException sql){
                javax.swing.JOptionPane.showMessageDialog(this,sql.getMessage(),"Error Message!",javax.swing.JOptionPane.ERROR_MESSAGE);
            }
            System.out.println(sq.getMessage());
            javax.swing.JOptionPane.showMessageDialog(this,sq.getMessage(), "Error",javax.swing.JOptionPane.ERROR_MESSAGE);
            
        }
        jSearchDialog1.dispose();
        // Add your handling code here:
    }//GEN-LAST:event_jSearchTable1MouseClicked
    
    private void jTable11MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable11MouseClicked
        if (jTable11.getSelectedColumn() == 0) {
            
            this.cmbox11MouseClicked();
        }           // Add your handling code here:
    }//GEN-LAST:event_jTable11MouseClicked
    private void cmbox11MouseClicked() {
        
        System.out.println("Showing dialog");
        java.awt.Point point = jScrollPane11.getLocationOnScreen();
        jSearchDialog1.setSize(400,200);
        jSearchDialog1.setLocation(point);
        jSearchDialog1.show();
    }
    private void jButton91ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton91ActionPerformed
        jSearchDialog1.dispose();        // Add your handling code here:
    }//GEN-LAST:event_jButton91ActionPerformed
    
    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        if (jTable1.getSelectedColumn() == 0) {
            
            this.cmbox1MouseClicked();
        }        // Add your handling code here:
    }//GEN-LAST:event_jTable1MouseClicked
    private void cmbox1MouseClicked() {
        
        System.out.println("Showing dialog");
        java.awt.Point point = jScrollPane1.getLocationOnScreen();
        jSearchDialog.setSize(400,200);
        jSearchDialog.setLocation(point);
        jSearchDialog.show();
    }
    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
        jSearchDialog.dispose();        // Add your handling code here:
    }//GEN-LAST:event_jButton9ActionPerformed
    
    private void jSearchTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jSearchTableMouseClicked
        jTable1.setValueAt(jSearchTable.getValueAt(jSearchTable.getSelectedRow(),0),jTable1.getSelectedRow(), 0);
        jTable1.setValueAt(jSearchTable.getValueAt(jSearchTable.getSelectedRow(),1),jTable1.getSelectedRow(), 1);
        jTable1.setValueAt(jSearchTable.getValueAt(jSearchTable.getSelectedRow(),2),jTable1.getSelectedRow(), 6);
        
        jSearchDialog.dispose();
        int i = jTable1.getSelectedRow();
        
        try {
            java.sql.Statement pstmt1 = connectDB.createStatement();
            java.sql.ResultSet rs1 = pstmt1.executeQuery("select quantity_instock,packaging from st_stock_item where description ILIKE '"+jTable1.getValueAt(jTable1.getSelectedRow(),0)+"%' AND department ilike '"+jComboBox1.getSelectedItem().toString()+"%'");
            java.sql.Statement pst = connectDB.createStatement();
            while (rs1.next()){
                
                jTable1.setValueAt(rs1.getObject(1),i,3);
                jTable1.setValueAt(rs1.getObject(2),i,2);
            }
                
            java.sql.Statement pstmt12 = connectDB.createStatement();
            java.sql.ResultSet rs12 = pstmt12.executeQuery("select balance from st_stock_prices where product ILIKE '"+jTable1.getValueAt(jTable1.getSelectedRow(),0)+"%' and department ILIKE '"+jComboBox11.getSelectedItem().toString()+"%'");
            
            while (rs12.next()){
                jTable1.setValueAt(rs12.getObject(1),i,4);
                
            }
            
        } catch(java.sql.SQLException sqlex){
            System.out.println(sqlex.getMessage());
        }
        // Add your handling code here:
    }//GEN-LAST:event_jSearchTableMouseClicked
    
    private void jTextField111CaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_jTextField111CaretUpdate
        if(jTextField111.getCaretPosition() > 2){
            try {
                searchRowSet.execute("select product,units,transfer_price FROM st_stock_prices WHERE product ILIKE '"+jTextField111.getText()+"%' AND department = '"+jComboBox11.getSelectedItem()+"' order by product");
                
                jSearchTable.setModel(new org.netbeans.lib.sql.models.TableModel(searchRowSet, new org.netbeans.lib.sql.models.TableModel.Column[] {
                    new org.netbeans.lib.sql.models.TableModel.Column("product", "Desc.", false),
                    new org.netbeans.lib.sql.models.TableModel.Column("units", "Units", false),
                    new org.netbeans.lib.sql.models.TableModel.Column("transfer_price", "Cost", false)
                }));
                jSearchScrollPane.setViewportView(jSearchTable);
                System.out.println("Cannot sort out");
            } catch(java.sql.SQLException sqlExec) {
                
                javax.swing.JOptionPane.showMessageDialog(this, sqlExec.getMessage());
                
            }
        }
        // Add your handling code here:
    }//GEN-LAST:event_jTextField111CaretUpdate
 /*   public void tableModelTableChanged2() {
        double resFloat = 0.00;
        for (int i = 0; i < jTable1.getRowCount(); i++) {
  
            if (jTable1.getModel().getValueAt(i, 5) != null) {
  
                if (jTable1.getSelectedColumn() == 5) {
  
                    float floatCol2 = java.lang.Float.parseFloat(jTable1.getValueAt(jTable1.getSelectedRow(), 6).toString());
  
                    float floatCol3 = java.lang.Float.parseFloat(jTable1.getValueAt(jTable1.getSelectedRow(), 5).toString());
                    float pack = java.lang.Float.parseFloat(jTable1.getValueAt(jTable1.getSelectedRow(), 2).toString());
  
                    float resVal = floatCol2 * floatCol3*pack;
  
                     resFloat = resVal;
  
                    if (jTable1.getSelectedColumn() == 5) {
  
                        jTable1.setValueAt(resFloat, jTable1.getSelectedRow(), 7);
  
                        double Total = java.lang.Double.parseDouble(jTextField2.getText().toString());
                        double tableSum = java.lang.Double.parseDouble(resFloat.toString());
                        double totalSum = Total + tableSum;
                        jTextField2.setText(""+totalSum+"");
  
                    }
  
                }else{
                    double Total = java.lang.Double.parseDouble(jTextField2.getText().toString());
                    double tableSum = java.lang.Double.parseDouble(resFloat.toString());
                    double totalSum = Total + tableSum;
                    jTextField2.setText(""+totalSum+"");
  
  
                }
            }
  
            //               jTextField31.setText(java.lang.String.valueOf(resFloat));
        }
    }*/
    private void jTable1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTable1KeyReleased
        if (jTable1.getModel().getValueAt(jTable1.getSelectedRow(), 5) != null) {
            float floatCol2 = java.lang.Float.parseFloat(jTable1.getValueAt(jTable1.getSelectedRow(), 6).toString());
            
            float floatCol3 = java.lang.Float.parseFloat(jTable1.getValueAt(jTable1.getSelectedRow(), 5).toString());
            float pack = java.lang.Float.parseFloat(jTable1.getValueAt(jTable1.getSelectedRow(), 2).toString());
            
            float resVal = floatCol2 * floatCol3*pack;
            
            java.lang.Float resFloat = new java.lang.Float(resVal);
            
            if (jTable1.getSelectedColumn() == 5) {
                
                jTable1.setValueAt(resFloat, jTable1.getSelectedRow(), 7);
                
                double Total = java.lang.Double.parseDouble(jTextField2.getText().toString());
                double tableSum = java.lang.Double.parseDouble(resFloat.toString());
                double totalSum = Total + tableSum;
                jTextField2.setText(""+totalSum+"");
                
            }
        }
        // Add your handling code here:
    }//GEN-LAST:event_jTable1KeyReleased
    private void populateTable1(java.lang.String patient_no) {
        int i = 0;
        try {
            
            //   for (int i = 0; i < jTable1.getRowCount(); i++ ) {
            //       if (jTable1.getModel().getValueAt(i,0) != null){
            
            java.sql.Statement stmtTable = connectDB.createStatement();
            
            java.sql.ResultSet rsetTable = stmtTable.executeQuery("SELECT product,balance,requisition,units FROM st_stock_prices WHERE requisition >0 AND department = '"+jComboBox11.getSelectedItem().toString()+"'");
            //  java.sql.ResultSet rsetTable111 = stmtTable111.executeQuery("SELECT sum(receiving-issuing) FROM st_sub_stores WHERE store_name = '"+jTextField1.getText().equalsIgnoreCase(jTextField1.getText())+"' and item = '"+jTable1.getValueAt(k,0).toString()+"'");
            
            while (rsetTable.next()) {
                
                jTable1.setValueAt(rsetTable.getObject(1), i, 0);
                jTable1.setValueAt(rsetTable.getObject(2), i, 4);
                jTable1.setValueAt(rsetTable.getObject(3), i, 2);
                jTable1.setValueAt(rsetTable.getObject(4), i, 1);
                //  jTable1.setValueAt(rsetTable1.getObject(5), i, 5);
                //   jTable1.setValueAt(rsetTable1.getObject(6), i, 6);
                
                i++;
                
            }
            //   }
            // }
        } catch(java.sql.SQLException sqlExec) {
            
            javax.swing.JOptionPane.showMessageDialog(this, sqlExec.getMessage());
            
        }
        
        
    }
    
    
    
    private void jComboBox11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox11ActionPerformed
        for (int k = 0; k < jTable1.getRowCount(); k++ ) {
            for (int r = 0; r < jTable1.getColumnCount(); r++ ) {
                jTable1.getModel().setValueAt(null,k,r);
            }
        }
        
        int k = 0;
        
        jButton1.setEnabled(true);
        
        // this.populateTable1(this.jComboBox11.getSelectedItem().toString());
        for (int j = 0; j < jTable1.getRowCount(); j++ ) {
            if (jTable1.getModel().getValueAt(j,0) != null){
                
                try {
                    java.sql.Statement stmtTable111 = connectDB.createStatement();
                    
                    // java.sql.ResultSet rsetTable111 = stmtTable111.executeQuery("SELECT sum(receiving-issuing) FROM st_sub_stores WHERE item = '"+jTable1.getValueAt(j,0).toString()+"' GROUP BY item");
                    //  java.sql.ResultSet rsetTable111 = stmtTable111.executeQuery("SELECT sum(receiving-issuing) FROM st_sub_stores WHERE store_name = '"+jTextField1.getText()+"' and item = '"+jTable1.getValueAt(j,0).toString()+"' GROUP BY item");
                    java.sql.ResultSet rsetTable111 = stmtTable111.executeQuery("SELECT sum(quantity_instock) FROM st_stock_item WHERE department = '"+jComboBox1.getSelectedItem().toString()+"' and description = '"+jTable1.getValueAt(j,0).toString()+"'");
                    
                    while (rsetTable111.next()) {
                        
                        jTable1.setValueAt(rsetTable111.getObject(1), j, 3);
                        //  jTable1.setValueAt(rsetTable1.getObject(3), i, 1);
                        //  jTable1.setValueAt(rsetTable1.getObject(2), i, 2);
                        //  jTable1.setValueAt(rsetTable1.getObject(4), i, 4);
                        //  jTable1.setValueAt(rsetTable1.getObject(5), i, 5);
                        //   jTable1.setValueAt(rsetTable1.getObject(6), i, 6);
                        
                        // i++;
                        
                    }
                    
                    
                    
                } catch(java.sql.SQLException sqlExec) {
                    
                    javax.swing.JOptionPane.showMessageDialog(this, sqlExec.getMessage());
                    
                }
            }
        }
/*        crset21.setCommand("select distinct product FROM st_stock_prices WHERE department = '"+jComboBox11.getSelectedItem()+"'");
        crset21.setConnectionSource(pConnDB);
 
        cmbox.setModel(new org.netbeans.lib.sql.models.ComboBoxModel(crset21, "product", null, null, null));
        javax.swing.table.TableColumn s = this.jTable1.getColumn("Item description");
        s.setCellEditor(new javax.swing.DefaultCellEditor(cmbox));
        cmbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmboxActionPerformed(evt);
            }
        });
        try {
            searchRowSet.execute("select product,units FROM st_stock_prices WHERE department = '"+jComboBox11.getSelectedItem().toString()+"' ORDER BY product");
            searchRowSet.setConnectionSource(pConnDB);
 
            searchRowSet.execute();
 
            jSearchTable.setModel(new org.netbeans.lib.sql.models.TableModel(searchRowSet, new org.netbeans.lib.sql.models.TableModel.Column[] {
                new org.netbeans.lib.sql.models.TableModel.Column("product", "Desc.", false),
                new org.netbeans.lib.sql.models.TableModel.Column("units", "Units", false)
                //  new org.netbeans.lib.sql.models.TableModel.Column("gl_code", "Gl code", false)
            }));
            jSearchScrollPane.setViewportView(jSearchTable);
            System.out.println("Cannot sort out");
        } catch(java.sql.SQLException sqlExec) {
 
            javax.swing.JOptionPane.showMessageDialog(this, sqlExec.getMessage());
 
        }
        jScrollPane1.setViewportView(jTable1);
 
 */
        // Add your handling code here:
    }//GEN-LAST:event_jComboBox11ActionPerformed
    
    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        setVisible(false);        // Add your handling code here:
    }//GEN-LAST:event_jButton4ActionPerformed
    
    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        
        int rows2Delete = jTable1.getSelectedRowCount();
        
        int[] selectedRows = jTable1.getSelectedRows();
        
        if (rows2Delete < 1) {
            
            java.awt.Toolkit.getDefaultToolkit().beep();
            
            javax.swing.JOptionPane.showMessageDialog(this, "There are no selected rows to delete!");
            
        } else {
            
            if (rows2Delete > 1) {
                
                for (int i = 0; i < selectedRows.length; i++) {
                    
                    
                    
                    javax.swing.table.DefaultTableModel defTableModel = (javax.swing.table.DefaultTableModel)jTable1.getModel();
                    
                    defTableModel.removeRow(selectedRows[i]);
                    
                }
                
                
                
            } else {
                
                javax.swing.table.DefaultTableModel defTableModel = (javax.swing.table.DefaultTableModel)jTable1.getModel();
                
                defTableModel.removeRow(jTable1.getSelectedRow());
                
                
            }
        }        // Add your handling code here:
    }//GEN-LAST:event_jButton5ActionPerformed
    
    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        for (int k = 0; k < jTable1.getRowCount(); k++ ) {
            for (int r = 0; r < jTable1.getColumnCount(); r++ ) {
                jTable1.getModel().setValueAt(null,k,r);
            }
        }
        
//        jTextField1.setText("");
        jComboBox11.setSelectedItem(null); // Add your handling code here:
    }//GEN-LAST:event_jButton3ActionPerformed
    
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        java.util.Calendar calendar = java.util.Calendar.getInstance();
        
        long dateNow = calendar.getTimeInMillis();
        
        java.sql.Date datenowSql= new java.sql.Date(dateNow);
        try {
        String Stock = null;
        String actCode = null;
        String transNo = null;
        String userName = null;
        String glCode = null;
        String glType = null;
        try {
            
            connectDB.setAutoCommit(false);
            java.sql.Statement pst21 = connectDB.createStatement();
            java.sql.ResultSet rs1 = pst21.executeQuery("select 'T'||nextval('transfer_seq')");
            while (rs1.next()){
                transNo = rs1.getObject(1).toString();
            }
            java.sql.Statement pst2 = connectDB.createStatement();
            java.sql.ResultSet rs = pst2.executeQuery("select code,activity,current_user from pb_activity where activity_category = 'S'");
            while (rs.next())
                actCode = rs.getObject(1).toString();
            Stock = rs.getObject(2).toString();
            userName = rs.getObject(3).toString();
            
            java.sql.Statement pst211 = connectDB.createStatement();
            java.sql.ResultSet rs11 = pst211.executeQuery("select code,activity from pb_activity where activity_category = 'CS'");
            while (rs11.next())
                glCode = rs11.getObject(1).toString();
            glType = rs11.getObject(2).toString();
            for (int i = 0; i< jTable1.getRowCount(); i++) {
                 //for (int i = 0; i< jTable1.getRowCount(); i++) {
                if (jTable1.getModel().getValueAt(i,5) != null){
                    double Qty = Double.parseDouble(jTable1.getModel().getValueAt(i, 5).toString());
                  if (Qty > 0){   
                    double quantity = Double.parseDouble(jTable1.getModel().getValueAt(i, 5).toString());
                    
                    double pack = Double.parseDouble(jTable1.getModel().getValueAt(i, 2).toString());
                    
                    java.sql.PreparedStatement pstmt1 = connectDB.prepareStatement("insert into st_sub_stores values(? , ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?,?)");
                    
                    pstmt1.setString(1,jComboBox1.getSelectedItem().toString());
                    pstmt1.setObject(2,jTable1.getValueAt(i,0));
                    pstmt1.setDouble(4,quantity);
                    pstmt1.setString(3,"00");
                    pstmt1.setObject(5,jTable1.getValueAt(i,6));
                    pstmt1.setObject(6,jTable1.getValueAt(i,7));
                    pstmt1.setObject(7,"00");
                    pstmt1.setString(8,transNo);
                    pstmt1.setString(9,"");
                    pstmt1.setString(10,datePicker1.getDate().toString());
                    pstmt1.setString(11,userName);
                    pstmt1.setObject(12,jTable1.getValueAt(i,1));
                    pstmt1.setString(13,jComboBox11.getSelectedItem().toString());
                    pstmt1.setString(14,jTextField9.getText());
                    pstmt1.executeUpdate();
                    
                    java.sql.PreparedStatement pstmt11 = connectDB.prepareStatement("insert into st_sub_stores values(? , ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?,?)");
                    
                    pstmt11.setString(1,jComboBox11.getSelectedItem().toString());
                    pstmt11.setObject(2,jTable1.getValueAt(i,0));
                    pstmt11.setDouble(3,quantity*pack);
                    pstmt11.setString(4,"00");
                    pstmt11.setObject(5,jTable1.getValueAt(i,6));
                    pstmt11.setObject(6,jTable1.getValueAt(i,7));
                    pstmt11.setObject(7,"00");
                    pstmt11.setString(8,transNo);
                    pstmt11.setString(9,"");
                    pstmt11.setString(10,datePicker1.getDate().toString());
                    pstmt11.setString(11,userName);
                    pstmt11.setObject(12,jTable1.getValueAt(i,1));
                    pstmt11.setString(13,jComboBox11.getSelectedItem().toString());
                    pstmt11.setString(14,jTextField9.getText());
                    pstmt11.executeUpdate();
                    
                    
                    
                    java.sql.PreparedStatement pstmt31 = connectDB.prepareStatement("UPDATE st_stock_prices SET balance = balance + "+new java.lang.Double(quantity*pack)+", requisition = requisition - "+new java.lang.Double(quantity*pack)+" WHERE product = '"+jTable1.getValueAt(i,0).toString()+"' AND department = '"+jComboBox11.getSelectedItem().toString()+"'");
                    pstmt31.executeUpdate();
                    
                    java.sql.PreparedStatement pstmt32 = connectDB.prepareStatement("UPDATE st_stock_item SET quantity_instock = quantity_instock - "+new java.lang.Double(quantity)+" WHERE description = '"+jTable1.getValueAt(i,0).toString()+"' AND department = '"+jComboBox1.getSelectedItem().toString()+"'");
                    pstmt32.executeUpdate();
                    java.sql.PreparedStatement pstmt321 = connectDB.prepareStatement("UPDATE st_receive_requisation SET qty_issued = qty_issued + "+new java.lang.Double(quantity*pack)+" WHERE requisition_no = '"+jTextField36.getText()+"' and item_description = '"+jTable1.getValueAt(i,0).toString()+"'");
                    pstmt321.executeUpdate();
                   
                }
                }
            }
            connectDB.commit();
            connectDB.setAutoCommit(true);
            
            javax.swing.JOptionPane.showMessageDialog(this, "Data Inserted Successfully","Confirmation Message!",javax.swing.JOptionPane.INFORMATION_MESSAGE);
            
            
            this.jButton1.setEnabled(false);
            for (int k = 0; k < jTable1.getRowCount(); k++ ) {
                for (int r = 0; r < jTable1.getColumnCount(); r++ ) {
                    jTable1.getModel().setValueAt(null,k,r);
                }
            }
            
            jTextField9.setText("");
           
        }   catch(java.sql.SQLException sq){
            javax.swing.JOptionPane.showMessageDialog(this, sq.getMessage(),"Error Message!",javax.swing.JOptionPane.ERROR_MESSAGE);
            
            try {
                connectDB.rollback();
            }catch (java.sql.SQLException sql){
                javax.swing.JOptionPane.showMessageDialog(this,sql.getMessage(),"Error Message!",javax.swing.JOptionPane.ERROR_MESSAGE);
            }
            // jLabel12.setForeground(java.awt.Color.red);
            // jLabel12.setText("Sorry. Another  Code already exists");
        }
        
         } catch(java.lang.Exception ex) {
            System.out.println(ex.getMessage());
            javax.swing.JOptionPane.showMessageDialog(this, "TRANSACTION ERROR : Please double check your entries.", "Error",javax.swing.JOptionPane.ERROR_MESSAGE);
            
            
        }
        // Add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed
    
    
    
    private void cmboxActionPerformed(java.awt.event.ActionEvent evt) {
/*        java.lang.Object selectedGuaran = cmbox.getSelectedItem();
        int i = jTable1.getSelectedRow();
        int j = 0;
        if (selectedGuaran != null) {
            try {
 
 
                java.sql.Statement pstmt1 = connectDB.createStatement();
                java.sql.ResultSet rs1 = pstmt1.executeQuery("select sum(quantity_received - sub_store_receiving) from st_stock_cardex where item = '"+selectedGuaran+"' GROUP BY item");
                java.sql.Statement pst = connectDB.createStatement();
                java.sql.ResultSet rst = pst.executeQuery("select count(item) from st_stock_cardex where item = '"+selectedGuaran+"' GROUP BY item");
                while (rst.next()) {
                    j = rst.getInt(1);
                    System.out.println(j);
                }
                if (j > 0){
 
                    while (rs1.next()){
 
                        jTable1.setValueAt(rs1.getObject(1),i,3);
                    }
                }else{
                    jTable1.setValueAt("0.00",i,3);
                }
                java.sql.Statement pstmt = connectDB.createStatement();
                java.sql.ResultSet rs = pstmt.executeQuery("select sum(quantity) from st_receive_requisation where item_description = '"+selectedGuaran+"' and issiued = false and cost_center = '"+jComboBox11.getSelectedItem().toString()+"' GROUP BY item_description");
 
                while (rs.next()){
                    jTable1.setValueAt(rs.getObject(1),i,2);
 
                }
 
                java.sql.Statement pstmt11 = connectDB.createStatement();
                java.sql.ResultSet rs11 = pstmt11.executeQuery("select sum(receiving - issuing ) from st_sub_stores where item = '"+selectedGuaran+"' and store_name = '"+jComboBox11.getSelectedItem().toString()+"'");
 
                while (rs11.next()){
                    jTable1.setValueAt(rs11.getObject(1),i,6);
 
                }
 
                java.sql.Statement pstmt12 = connectDB.createStatement();
                java.sql.ResultSet rs12 = pstmt12.executeQuery("select (sub_store_receiving) from st_stock_cardex where item = '"+selectedGuaran+"' and cost_center = '"+jComboBox11.getSelectedItem().toString()+"' AND transaction_type ='Stock Transfer'");
 
                while (rs12.next()){
                    jTable1.setValueAt(rs12.getObject(1),i,5);
 
                }
 
                java.sql.Statement pstmt121 = connectDB.createStatement();
                java.sql.ResultSet rs121 = pstmt121.executeQuery("select units from st_stock_cardex where item = '"+selectedGuaran+"'");
 
                while (rs121.next()){
                    jTable1.setValueAt(rs121.getObject(1),i,1);
 
                }
 
                java.sql.Statement pstmt7 = connectDB.createStatement();
                java.sql.ResultSet rs7 = pstmt7.executeQuery("select avg(price_per_item)::numeric(30,2) from st_stock_cardex where item = '"+selectedGuaran+"' and price_per_item > 0 limit 4");
 
                while (rs7.next()){
                    jTable1.setValueAt(rs7.getObject(1),i,7);
 
                }
 
            } catch(java.sql.SQLException sqlex){
                System.out.println(sqlex.getMessage());
            }
 
        }
 */
        // Add your handling code here:
    }
      /* private void cmbox2ActionPerformed(java.awt.event.ActionEvent evt){
      int i = jTable1.getSelectedRow();
       
 }
       */
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JDialog jSearchDialog;
    private javax.swing.JButton searchButton;
    private org.netbeans.lib.sql.NBCachedRowSet searchRowSet1;
    private javax.swing.JPanel jPanel61;
    private javax.swing.JLabel jLabel91;
    private javax.swing.JDialog jSearchDialog11;
    private javax.swing.JDialog jSearchDialog1;
    private javax.swing.JTextField jTextField5;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JButton jButton9;
    private javax.swing.JPanel jPanel111;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTable jSearchTable111;
    private javax.swing.JButton searchButton1;
    private javax.swing.JLabel jLabel21;
    private org.netbeans.lib.sql.NBCachedRowSet crset3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jSearchScrollPane;
    private org.netbeans.lib.sql.NBCachedRowSet crset2;
    private org.netbeans.lib.sql.NBCachedRowSet nBCachedRowSet2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JButton jButton1;
    private javax.swing.JPanel jSearchPanel1;
    private javax.swing.JTable jSearchTable11;
    private javax.swing.JTable jTable11;
    private javax.swing.JComboBox jComboBox11;
    private javax.swing.JTextField jTextField11;
    private javax.swing.JComboBox jComboBox111;
    private javax.swing.JTextField jTextField36;
    private javax.swing.JButton jButton5111;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton5;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JButton jButton41;
    private javax.swing.JPanel jPanel21;
    private javax.swing.JButton jButton511;
    private org.netbeans.lib.sql.NBCachedRowSet crset1;
    private javax.swing.JPanel jSearchPanel111;
    private javax.swing.JButton jButton91;
    private javax.swing.JTextField jTextField21;
    private com.afrisoftech.lib.DatePicker datePicker1;
    private org.netbeans.lib.sql.NBCachedRowSet crset31;
    private javax.swing.JTextField jTextField91;
    private javax.swing.JScrollPane jSearchScrollPane11;
    private javax.swing.JButton jButton7;
    private javax.swing.JTextField jTextField111111;
    private javax.swing.JScrollPane jSearchScrollPane111;
    private javax.swing.JButton jButton8;
    private javax.swing.JLabel jLabel131;
    private javax.swing.JButton jButton3;
    private javax.swing.JTextField jTextField361;
    private javax.swing.JPanel jPanel12;
    private org.netbeans.lib.sql.NBCachedRowSet searchRowSet;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel jLabel41;
    private org.netbeans.lib.sql.NBCachedRowSet nBCachedRowSet1;
    private javax.swing.JPanel jPanel6;
    private org.netbeans.lib.sql.NBCachedRowSet searchRowSet111;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JButton jButton71;
    private javax.swing.JTextField jTextField11111;
    private javax.swing.JTextField jTextField1111;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JTextField jTextField9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton jButton31;
    private org.netbeans.lib.sql.NBCachedRowSet crset21;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel13;
    private org.netbeans.lib.sql.NBCachedRowSet crset32;
    private javax.swing.JButton jButton81;
    private javax.swing.JPanel jSearchPanel;
    private javax.swing.JLabel jLabel51;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JButton jButton11;
    private javax.swing.JButton jButton61;
    private javax.swing.JTextField jTextField111;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JTable jSearchTable;
    private javax.swing.JScrollPane jScrollPane11;
    private javax.swing.JDialog jSearchDialog111;
    private org.netbeans.lib.sql.NBCachedRowSet searchRowSet11;
    private javax.swing.JButton jButton51;
    private javax.swing.JButton jButton4;
    private javax.swing.JTable jSearchTable1;
    private javax.swing.JPanel jSearchPanel11;
    private javax.swing.JTextField jTextField51;
    private javax.swing.JLabel jLabel121;
    private javax.swing.JScrollPane jSearchScrollPane1;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JTable jTable1;
    private com.afrisoftech.lib.DatePicker datePicker11;
    // End of variables declaration//GEN-END:variables
    
}
