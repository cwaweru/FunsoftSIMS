/*
 * companyprflintfr.java
 *
 * Created on August 13, 2002, 11:36 AM
 */

package com.afrisoftech.hospinventory;

/**
 *
 * @author  root
 */
public class SupplyReturnsintfr extends javax.swing.JInternalFrame {
    
    private  javax.swing.JComboBox cmbox = new javax.swing.JComboBox();
    
    
    
    private javax.swing.JComboBox cmbox2;
    /** Creates new form companyprflintfr */
    java.sql.Connection connectDB = null;
    
    org.netbeans.lib.sql.pool.PooledConnectionSource pConnDB = null;
    
    
    public SupplyReturnsintfr(java.sql.Connection connDb, org.netbeans.lib.sql.pool.PooledConnectionSource pconnDB) {
        
        connectDB = connDb;
        
        pConnDB = pconnDB;
        
        initComponents();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        java.awt.GridBagConstraints gridBagConstraints;

        try {
            crset1 = new org.netbeans.lib.sql.NBCachedRowSet();
        } catch (java.sql.SQLException e1) {
            e1.printStackTrace();
        }
        try {
            crset2 = new org.netbeans.lib.sql.NBCachedRowSet();
        } catch (java.sql.SQLException e1) {
            e1.printStackTrace();
        }
        jSearchDialog = new javax.swing.JDialog();
        jSearchPanel = new javax.swing.JPanel();
        jTextField111 = new javax.swing.JTextField();
        jSearchScrollPane = new javax.swing.JScrollPane();
        jSearchTable = new javax.swing.JTable();
        jButton9 = new javax.swing.JButton();
        try {
            searchRowSet = new org.netbeans.lib.sql.NBCachedRowSet();
        } catch (java.sql.SQLException e1) {
            e1.printStackTrace();
        }
        try {
            crset3 = new org.netbeans.lib.sql.NBCachedRowSet();
        } catch (java.sql.SQLException e1) {
            e1.printStackTrace();
        }
        jSeparator1 = new javax.swing.JSeparator();
        jButton1 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jLabel12 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox();
        jLabel8 = new javax.swing.JLabel();
        jTextField8 = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jComboBox2 = new javax.swing.JComboBox();
        jTextField2 = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jTextField3 = new javax.swing.JTextField();
        datePicker1 = new com.afrisoftech.lib.DatePicker();
        jLabel4 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel11 = new javax.swing.JLabel();
        jTextField11 = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jTextField5 = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();

        crset1.setCommand("select distinct invoice_no from st_stock_cardex where invoice_no !=''");
        crset1.setConnectionSource(pConnDB);
        crset2.setCommand("");
        crset2.setConnectionSource(pConnDB);
        jSearchDialog.getContentPane().setLayout(new java.awt.GridBagLayout());

        jSearchDialog.setModal(true);
        jSearchDialog.setUndecorated(true);
        jSearchPanel.setLayout(new java.awt.GridBagLayout());

        jSearchPanel.setBorder(new javax.swing.border.EtchedBorder());
        jTextField111.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                jTextField111CaretUpdate(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 10.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 100);
        jSearchPanel.add(jTextField111, gridBagConstraints);

        jSearchTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Description", "Price", "Buying Price"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Object.class, java.lang.Object.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jSearchTable.setShowHorizontalLines(false);
        jSearchTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jSearchTableMouseClicked(evt);
            }
        });

        jSearchScrollPane.setViewportView(jSearchTable);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 20.0;
        jSearchPanel.add(jSearchScrollPane, gridBagConstraints);

        jButton9.setText("Dispose");
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jSearchPanel.add(jButton9, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jSearchDialog.getContentPane().add(jSearchPanel, gridBagConstraints);

        searchRowSet.setConnectionSource(pConnDB);
        crset3.setCommand("SELECT store_name FROM st_main_stores ORDER BY store_name");
        crset3.setConnectionSource(pConnDB);
        crset3.setTransactionIsolation(1);

        getContentPane().setLayout(new java.awt.GridBagLayout());

        setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Credit Note");
        setToolTipText("");
        setDefaultCloseOperation(javax.swing.WindowConstants.HIDE_ON_CLOSE);
        setVisible(true);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 14;
        gridBagConstraints.gridwidth = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        getContentPane().add(jSeparator1, gridBagConstraints);

        jButton1.setMnemonic('O');
        jButton1.setText("Ok");
        jButton1.setToolTipText("click to store data");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton1MouseClicked(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 17;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(jButton1, gridBagConstraints);

        jButton3.setMnemonic('l');
        jButton3.setText("Clear");
        jButton3.setToolTipText("click to clear fields");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 17;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(jButton3, gridBagConstraints);

        jButton4.setMnemonic('C');
        jButton4.setText("Close");
        jButton4.setToolTipText("Click to close");
        jButton4.setSelected(true);
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 17;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(jButton4, gridBagConstraints);

        jLabel12.setFont(new java.awt.Font("Utopia", 3, 18));
        jLabel12.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 16;
        gridBagConstraints.gridwidth = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 30, 0, 0);
        getContentPane().add(jLabel12, gridBagConstraints);

        jPanel1.setLayout(new java.awt.GridBagLayout());

        jPanel1.setBorder(new javax.swing.border.TitledBorder("Select Delivery Note No. here"));
        jLabel3.setText("Invoice No.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 30, 0, 0);
        jPanel1.add(jLabel3, gridBagConstraints);

        jComboBox1.setModel(new org.netbeans.lib.sql.models.ComboBoxModel (crset1, "invoice_no", null, null, null));

        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 20);
        jPanel1.add(jComboBox1, gridBagConstraints);

        jLabel8.setText("Supplier");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 30, 0, 0);
        jPanel1.add(jLabel8, gridBagConstraints);

        jTextField8.setEditable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel1.add(jTextField8, gridBagConstraints);

        jLabel7.setText("Store");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel1.add(jLabel7, gridBagConstraints);

        jLabel9.setText("Date");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel1.add(jLabel9, gridBagConstraints);

        jComboBox2.setModel(new org.netbeans.lib.sql.models.ComboBoxModel (crset3, "store_name", null, null, null));
        jComboBox2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox2ActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        jPanel1.add(jComboBox2, gridBagConstraints);

        jTextField2.setEditable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        jPanel1.add(jTextField2, gridBagConstraints);

        jLabel2.setText("Credit Note No.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 30, 0, 0);
        jPanel1.add(jLabel2, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 20);
        jPanel1.add(jTextField3, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 20);
        jPanel1.add(datePicker1, gridBagConstraints);

        jLabel4.setText("Invoice Date");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel1.add(jLabel4, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 6;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        getContentPane().add(jPanel1, gridBagConstraints);

        jButton2.setMnemonic('R');
        jButton2.setText("Remove Row");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 17;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(jButton2, gridBagConstraints);

        jPanel2.setLayout(new java.awt.GridBagLayout());

        jPanel2.setBorder(new javax.swing.border.TitledBorder(null, "Enter items to return here", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 0, 14)));
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Item Desc.", "Unit", "Qty Supplied", "Qty To Return", "Price", "Disc%", "Vat%", "Value"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Object.class, java.lang.Double.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jTable1.setEditingRow(jTable1.getSelectedRow());
        jTable1.setGridColor(new java.awt.Color(204, 204, 255));
        jTable1.setSurrendersFocusOnKeystroke(true);
        /*
        cmbox.setModel(new org.netbeans.lib.sql.models.ComboBoxModel (crset2, "item_description", null, null, null));
        javax.swing.table.TableColumn s = this.jTable1.getColumn("Item description");
        s.setCellEditor(new javax.swing.DefaultCellEditor(cmbox));
        cmbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmboxActionPerformed(evt);
            }
        });
        */
        javax.swing.table.TableColumn column = null;
        for (int i = 0; i < 8; i++) {
            column = jTable1.getColumnModel().getColumn(i);
            if (i == 0) {

                column.setPreferredWidth(400); //sport column is bigger
            } else {
                //if (i == 2) {
                    column.setPreferredWidth(200);
                    // }  else
                //column.setPreferredWidth(50);

            }
        }

        jTable1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTable1KeyReleased(evt);
            }
        });

        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });

        jScrollPane1.setViewportView(jTable1);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 6;
        gridBagConstraints.gridheight = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 10.0;
        jPanel2.add(jScrollPane1, gridBagConstraints);

        jLabel11.setText("Received By");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 12;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel2.add(jLabel11, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 12;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 20);
        jPanel2.add(jTextField11, gridBagConstraints);

        jLabel5.setText("Delivered By");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 12;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel2.add(jLabel5, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 12;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        jPanel2.add(jTextField5, gridBagConstraints);

        jLabel1.setText("Total KShs");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel2.add(jLabel1, gridBagConstraints);

        jTextField1.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTextField1.setText("0.00");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        jPanel2.add(jTextField1, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 6;
        gridBagConstraints.gridheight = 9;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 20.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 5, 5);
        getContentPane().add(jPanel2, gridBagConstraints);

        setBounds(0, 0, 750, 459);
    }//GEN-END:initComponents
    
    private void jComboBox2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox2ActionPerformed
/*
        try {
            searchRowSet.execute("select product,units,transfer_price FROM st_stock_prices WHERE department =  '"+jComboBox2.getSelectedItem()+"' order by product");
            System.out.println("Cannot sort out");
            jSearchTable.setModel(new org.netbeans.lib.sql.models.TableModel(searchRowSet, new org.netbeans.lib.sql.models.TableModel.Column[] {
                new org.netbeans.lib.sql.models.TableModel.Column("product", "Description", false),
                new org.netbeans.lib.sql.models.TableModel.Column("units", "Price", false),
                new org.netbeans.lib.sql.models.TableModel.Column("transfer_price", "Buying Price", false)
            }));
            jSearchScrollPane.setViewportView(jSearchTable);
            System.out.println("Cannot sort out");
 
 
        } catch(java.sql.SQLException sqlex){
            javax.swing.JOptionPane.showMessageDialog(this,sqlex.getMessage(),"Error Message!",javax.swing.JOptionPane.ERROR_MESSAGE);
 
            System.out.println(sqlex.getMessage());
        }
//        jScrollPane1.setViewportView(jTable1);
 
 */   // Add your handling code here:
    }//GEN-LAST:event_jComboBox2ActionPerformed
    
    private void jSearchTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jSearchTableMouseClicked
        jTable1.setValueAt(jSearchTable.getValueAt(jSearchTable.getSelectedRow(),0),jTable1.getSelectedRow(), 0);
        jTable1.setValueAt(jSearchTable.getValueAt(jSearchTable.getSelectedRow(),1),jTable1.getSelectedRow(), 1);
        jTable1.setValueAt(jSearchTable.getValueAt(jSearchTable.getSelectedRow(),2),jTable1.getSelectedRow(), 4);
        
        jSearchDialog.dispose();         // Add your handling code here:
    }//GEN-LAST:event_jSearchTableMouseClicked
    
    private void jTextField111CaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_jTextField111CaretUpdate
        if(jTextField111.getCaretPosition() > 3){
            try {
                //  searchRowSet.execute("select trim(product) as product,units,transfer_price FROM st_stock_prices by product");
                
                searchRowSet.execute("select product,units,transfer_price FROM st_stock_prices WHERE product ILIKE '"+jTextField111.getText()+"%'");// AND department = '"+jComboBox2.getSelectedItem()+"' order by product");
                //   searchRowSet.setConnectionSource(pConnDB);
                
                //  searchRowSet.execute();
                
                jSearchTable.setModel(new org.netbeans.lib.sql.models.TableModel(searchRowSet, new org.netbeans.lib.sql.models.TableModel.Column[] {
                    new org.netbeans.lib.sql.models.TableModel.Column("product", "Description", false),
                    new org.netbeans.lib.sql.models.TableModel.Column("units", "Price", false),
                    new org.netbeans.lib.sql.models.TableModel.Column("transfer_price", "Buying Price", false)
                }));
                jSearchScrollPane.setViewportView(jSearchTable);
                System.out.println("Can sort out");
            } catch(java.sql.SQLException sqlExec) {
                
                javax.swing.JOptionPane.showMessageDialog(this, sqlExec.getMessage());
                
            }
        }else{
            System.out.println("Cannot sort out");
        }
        // Add your handling code here:
    }//GEN-LAST:event_jTextField111CaretUpdate
    
    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
        this.jSearchDialog.dispose();        // Add your handling code here:
    }//GEN-LAST:event_jButton9ActionPerformed
    
    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        
        if (jTable1.getSelectedColumn() == 0) {
            
            this.cmbox1MouseClicked();
        }        // Add your handling code here:
    }//GEN-LAST:event_jTable1MouseClicked
    private void cmbox1MouseClicked() {
        
        System.out.println("Showing dialog");
        java.awt.Point point = jTable1.getLocationOnScreen();
        jSearchDialog.setSize(400,200);
        jSearchDialog.setLocation(point);
        jSearchDialog.show();
        
        
    }
    private void jTable1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTable1KeyReleased
        double resFloat = 0.00;
        //  double totalSum = 0.00;
        double floatTotal = java.lang.Double.parseDouble(jTextField1.getText());
        //  if (jTable1.getModel().getSelectedColumn() != 3) {
        if (jTable1.getSelectedColumn() == 5) {
            double floatCol2 = java.lang.Float.parseFloat(jTable1.getValueAt(jTable1.getSelectedRow(), 3).toString());
            
            double floatCol3 = java.lang.Float.parseFloat(jTable1.getValueAt(jTable1.getSelectedRow(), 4).toString());
            
            double floatCol4 = java.lang.Float.parseFloat(jTable1.getValueAt(jTable1.getSelectedRow(), 5).toString());
            
            double resVal = (floatCol2 * floatCol3) - ((floatCol2 * floatCol3) * floatCol4/100);
            
            //  java.lang.Float resFloat =new java.lang.Float(resVal);
            jTable1.setValueAt(new java.lang.Float(resVal), jTable1.getSelectedRow(), 7);
            
            for (int i = 0; i < jTable1.getRowCount(); i++) {
                if (jTable1.getModel().getValueAt(i, 3) != null) {
                    //toString().compareToIgnoreCase(null) {
                    
                    resFloat = resFloat + Double.parseDouble(jTable1.getValueAt(i, 7).toString());
                    
                    
                    // totalSum = floatTotal + resFloat;
                    
                }
            }
            this.tableModelTableChanged();
            //   }
        }
        // Add your handling code here:
    }//GEN-LAST:event_jTable1KeyReleased
    
    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        this.setVisible(false);        // Add your handling code here:
    }//GEN-LAST:event_jButton4ActionPerformed
    
    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        this.getContentPane().removeAll();
        this.initComponents();
        this.jComboBox1.setSelectedItem(null);
        // Add your handling code here:
    }//GEN-LAST:event_jButton3ActionPerformed
    
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        int rows2Delete = jTable1.getSelectedRowCount();
        
        int[] selectedRows = jTable1.getSelectedRows();
        
        if (rows2Delete < 1) {
            
            java.awt.Toolkit.getDefaultToolkit().beep();
            
            javax.swing.JOptionPane.showMessageDialog(this, "There are no selected rows to delete!");
            
        } else {
            
            if (rows2Delete > 1) {
                
                for (int i = 0; i < selectedRows.length; i++) {
                    
                    
                    
                    javax.swing.table.DefaultTableModel defTableModel = (javax.swing.table.DefaultTableModel)jTable1.getModel();
                    
                    defTableModel.removeRow(selectedRows[i]);
                    
                }
                
                
                
            } else {
                
                javax.swing.table.DefaultTableModel defTableModel = (javax.swing.table.DefaultTableModel)jTable1.getModel();
                
                defTableModel.removeRow(jTable1.getSelectedRow());
            }
        }        // Add your handling code here:
    }//GEN-LAST:event_jButton2ActionPerformed
    
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        java.util.Calendar calendar = java.util.Calendar.getInstance();
        
        long dateNow = calendar.getTimeInMillis();
        
        java.sql.Date datenowSql= new java.sql.Date(dateNow);
        try{
        double quantity = 0.00;
        
        String ucer = null;
        String Stock = null;
        String actCode = null;
        String accountCode = null;
        String transNo = null;
        String glType = null;
        String VouchNo = null;
        try {
            connectDB.setAutoCommit(false);
          //     javax.swing.JOptionPane.showMessageDialog(this,"Starting to execute query","Comfirmation Message!",javax.swing.JOptionPane.INFORMATION_MESSAGE);
         
            java.sql.Statement pst2 = connectDB.createStatement();
            java.sql.ResultSet rs = pst2.executeQuery("select code,activity from pb_activity where activity_category ilike 'S'");
            while (rs.next()){
                actCode = rs.getObject(1).toString();
            Stock = rs.getObject(2).toString();
            }
          //     javax.swing.JOptionPane.showMessageDialog(this,"Passed stage 1","Comfirmation Message!",javax.swing.JOptionPane.INFORMATION_MESSAGE);
         
            java.sql.Statement pst1 = connectDB.createStatement();
            java.sql.ResultSet rs1 = pst1.executeQuery("select code,activity from pb_activity where activity_category ilike 'CP'");
            while (rs1.next()){
                accountCode = rs1.getObject(1).toString();
            glType = rs1.getObject(2).toString();
            }
          //     javax.swing.JOptionPane.showMessageDialog(this,"Passed stage 2","Comfirmation Message!",javax.swing.JOptionPane.INFORMATION_MESSAGE);
         
            java.sql.Statement ps = connectDB.createStatement();
            java.sql.ResultSet rs2 = ps.executeQuery("select 'CN'||lpad(nextval('creditnote_no_seq'),5,0),current_user");
            while (rs2.next()){
                transNo = rs2.getObject(1).toString();
            ucer = rs2.getObject(2).toString();
            }
           //   javax.swing.JOptionPane.showMessageDialog(this,"Passed stage 12","Comfirmation Message!",javax.swing.JOptionPane.INFORMATION_MESSAGE);
         
            java.sql.PreparedStatement pstmt = connectDB.prepareStatement("insert into st_stock_cardex values(?,?,?,?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?,?,?)");
            for (int i = 0; i< jTable1.getRowCount(); i++) {
                if (jTable1.getModel().getValueAt(i,3) != null){
                    pstmt.setString(1,"");
                    pstmt.setString(2,jComboBox2.getSelectedItem().toString());
                    pstmt.setObject(3,jTable1.getValueAt(i,0));
                    pstmt.setString(4,datePicker1.getDate().toString());
                    pstmt.setObject(22,"00");
                    pstmt.setObject(6,jTable1.getValueAt(i,4));
                    pstmt.setObject(7,jTable1.getValueAt(i,1));
                    pstmt.setString(8,jTextField11.getText());
                    pstmt.setString(9,jTextField5.getText());
                    pstmt.setString(10,"");
                    pstmt.setObject(12,jTable1.getValueAt(i,3));
                    pstmt.setString(11,"00");
                    pstmt.setString(13,"00");
                    pstmt.setString(14,"");
                    pstmt.setString(15,"");
                    pstmt.setString(16,jTextField8.getText());
                    pstmt.setString(17,"");
                    pstmt.setString(18,datePicker1.getDate().toString());
                    pstmt.setString(19,"");
                    pstmt.setString(20,"Stock Returns");
                    pstmt.setObject(5,jTable1.getValueAt(i,7));
                    pstmt.setString(21,"00");
                    pstmt.setString(23,actCode);
                    pstmt.setString(24,jTextField3.getText());
                    pstmt.setString(25,Stock);
                    pstmt.setString(26,transNo);
                    pstmt.setObject(27,jTable1.getValueAt(i,3));
                    pstmt.setString(28,ucer);
                    
                    pstmt.executeUpdate();
                    
                    java.sql.PreparedStatement pstmt8121 = connectDB.prepareStatement("UPDATE pb_activity SET ytd_credit = ytd_credit + '"+jTable1.getValueAt(i,7).toString()+"' where code = '"+actCode+"'");
                    pstmt8121.executeUpdate(); 
                  //  javax.swing.JOptionPane.showMessageDialog(this,"Passed stage 3","Comfirmation Message!",javax.swing.JOptionPane.INFORMATION_MESSAGE);
         
                    java.sql.PreparedStatement pstmt11 = connectDB.prepareStatement("insert into st_sub_stores values(? , ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)");
                    
                    pstmt11.setString(1,jComboBox2.getSelectedItem().toString());
                    pstmt11.setObject(2,jTable1.getValueAt(i,0));
                    pstmt11.setString(3,"00");
                    pstmt11.setObject(4,jTable1.getValueAt(i,3));
                    pstmt11.setObject(5,jTable1.getValueAt(i,4));
                    pstmt11.setObject(6,jTable1.getValueAt(i,7));
                    pstmt11.setString(7,"00");
                    pstmt11.setString(8,transNo);
                    pstmt11.setObject(9,null);
                    pstmt11.setString(10,datePicker1.getDate().toString());
                    pstmt11.setString(11,ucer);
                    pstmt11.setObject(12,jTable1.getValueAt(i,1));
                    pstmt11.executeUpdate();
                  //  javax.swing.JOptionPane.showMessageDialog(this,"Passed stage 4","Comfirmation Message!",javax.swing.JOptionPane.INFORMATION_MESSAGE);
         
                    quantity = Double.parseDouble(jTable1.getModel().getValueAt(i, 3).toString());
                    
                    
                    java.sql.PreparedStatement pstmt3 = connectDB.prepareStatement("UPDATE st_stock_item SET quantity_instock = quantity_instock - "+new java.lang.Double(quantity)+",quantity_toorder = quantity_toorder + "+new java.lang.Double(quantity)+"  WHERE description = '"+jTable1.getValueAt(i,0).toString()+"' AND department = '"+jComboBox2.getSelectedItem().toString()+"'");
                    pstmt3.executeUpdate();
                    
                    java.sql.PreparedStatement pstmt31 = connectDB.prepareStatement("UPDATE st_stock_prices SET balance = balance - "+new java.lang.Double(quantity)+"  WHERE product = '"+jTable1.getValueAt(i,0).toString()+"' AND department = '"+jComboBox2.getSelectedItem().toString()+"'");
                    pstmt31.executeUpdate();
                      javax.swing.JOptionPane.showMessageDialog(this,"Passed stage 5","Comfirmation Message!",javax.swing.JOptionPane.INFORMATION_MESSAGE);
         
                }
            }
            java.sql.PreparedStatement pstmt1 = connectDB.prepareStatement("insert into ac_accounts_payable values(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?,?,?,?,?,?,?)");
            pstmt1.setObject(1,accountCode);
            pstmt1.setString(2,jTextField8.getText());
            pstmt1.setObject(3,"Stock");
            pstmt1.setString(4,"");
            pstmt1.setString(5,"");
            pstmt1.setString(6,"");
            pstmt1.setString(7,"");
            pstmt1.setString(8,"");
            pstmt1.setString(9,"");
            pstmt1.setString(10,"");
            pstmt1.setString(11,transNo);
            pstmt1.setString(12,"Stock Returns");
            pstmt1.setString(14,"00");
            pstmt1.setObject(13,jTextField1.getText());
            pstmt1.setString(15,datePicker1.getDate().toString());
            pstmt1.setString(16,jTextField3.getText());
            pstmt1.setString(17,glType);
            pstmt1.setString(18,"false");
            pstmt1.setString(19,"false");
            pstmt1.setString(20,ucer);
            pstmt1.setString(21,"");
            pstmt1.setString(22,datePicker1.getDate().toString());
            pstmt1.setString(23,datePicker1.getDate().toString());
            pstmt1.setString(24,"00");
            pstmt1.setString(25,"00");
            pstmt1.setString(26,"00");
            pstmt1.executeUpdate();
            
            java.sql.PreparedStatement pstmt81121 = connectDB.prepareStatement("UPDATE pb_activity SET ytd_debit = ytd_debit + '"+jTextField1.getText()+"' where code = '"+accountCode+"'");
             pstmt81121.executeUpdate(); 
            
            connectDB.commit();
            connectDB.setAutoCommit(true);
            javax.swing.JOptionPane.showMessageDialog(this,"Insert Done Successfully","Comfirmation Message!",javax.swing.JOptionPane.INFORMATION_MESSAGE);
            for (int k = 0; k < jTable1.getRowCount(); k++ ) {
                for (int r = 0; r < jTable1.getColumnCount(); r++ ) {
                    jTable1.getModel().setValueAt(null,k,r);
                }
            }
            //jLabel12.setForeground(java.awt.Color.blue);
            //jLabel12.setText("Insert successful");
            
            //  javax.swing.JOptionPane.showMessageDialog(this, "Enter quantity received","Error Message!",javax.swing.JOptionPane.ERROR_MESSAGE);
            
        }   catch(java.sql.SQLException sq){
            javax.swing.JOptionPane.showMessageDialog(this, sq.getMessage(),"Error Message!",javax.swing.JOptionPane.ERROR_MESSAGE);
            
            System.out.println(sq.getMessage());
        } try {
            connectDB.rollback();
        }catch (java.sql.SQLException sql){
            javax.swing.JOptionPane.showMessageDialog(this,sql.getMessage(),"Error Message!",javax.swing.JOptionPane.ERROR_MESSAGE);
        }
        
      } catch(java.lang.Exception ex) {
            System.out.println(ex.getMessage());
            javax.swing.JOptionPane.showMessageDialog(this, "TRANSACTION ERROR : Please double check your entries.", "Error",javax.swing.JOptionPane.ERROR_MESSAGE);
            
            
        }   
        
        // Add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed
    
    
    
    
    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        
        for (int k = 0; k < jTable1.getRowCount(); k++ ) {
            for (int r = 0; r < jTable1.getColumnCount(); r++ ) {
                jTable1.getModel().setValueAt(null,k,r);
            }
        }
        //            cmbox.setModel(new org.netbeans.lib.sql.models.ComboBoxModel(crset2, "item_description", null, null, true));
        
        try {
            //  java.sql.Connection con = java.sql.DriverManager.getConnection("jdbc:postgresql://localhost:5432/hospital","postgres","pilsiner");
            java.sql.Statement pstmt = connectDB.createStatement();
            // pstmt.executeUpdate("insert into AAA values('"+jTable1.getValueAt(numRows,numCols)+"')");
            java.sql.ResultSet rs = pstmt.executeQuery("select distinct supplier,order_no,received_by,delivered_by,date from st_stock_cardex where invoice_no = '"+jComboBox1.getSelectedItem()+"'");
            while (rs.next()){
                jTextField8.setText(rs.getObject(1).toString());
                //   jTextField9.setText(rs.getObject(2).toString());
                jTextField11.setText(rs.getObject(3).toString());
                jTextField5.setText(rs.getObject(4).toString());
                jTextField2.setText(rs.getObject(5).toString());
            }
        } catch(java.sql.SQLException sqlex){
            System.out.println(sqlex.getMessage());
        }
        
        this.populateTable1(this.jComboBox1.getSelectedItem().toString());
      /*  try {
       
            crset2.setCommand("select DISTINCT item_description from order_details where order_no = '"+jComboBox1.getSelectedItem()+"'");
            crset2.setConnectionSource(pconn1);
            crset2.execute("select DISTINCT item_description from order_details where order_no = '"+jComboBox1.getSelectedItem()+"'");
       
            cmbox2.setModel(new org.netbeans.lib.sql.models.ComboBoxModel(crset2, "item_description", null, null,null));
       
            javax.swing.table.TableColumn seditor = this.jTable1.getColumn("Item description");
       
            seditor.setCellEditor(new javax.swing.DefaultCellEditor(cmbox2));
       
            cmbox2.addActionListener(new java.awt.event.ActionListener() {
       
            public void actionPerformed(java.awt.event.ActionEvent evt) {
       
                cmbox2ActionPerformed(evt);
            }
        });
        } catch(java.sql.SQLException sqlExec) {
       
            javax.swing.JOptionPane.showMessageDialog(this, sqlExec.getMessage());
       
        }
       
       
       
       */
        
        
/*        crset2.setCommand("select item,units,quantity_received::numeric as quantity_received,null::numeric(15,2) as quantity_returned,price_per_item::numeric(15,2) as price_per_item,null::numeric(15,2) as discount,null::numeric(15,2) as vat,null::numeric(15,2) as value from st_stock_cardex WHERE invoice_no ='"+jComboBox1.getSelectedItem()+"' AND quantity_received > 0");
        crset2.setConnectionSource(pConnDB);
 
        try {
            crset2.execute();
 
            // crset2.setExecuteOnLoad(true);
            jTable1.setModel(new org.netbeans.lib.sql.models.TableModel(crset2, new org.netbeans.lib.sql.models.TableModel.Column[] {
                new org.netbeans.lib.sql.models.TableModel.Column("item", "Item", false),
                new org.netbeans.lib.sql.models.TableModel.Column("units", "Unit", false),
                new org.netbeans.lib.sql.models.TableModel.Column("quantity_received", "Qty Received", false),
                new org.netbeans.lib.sql.models.TableModel.Column("quantity_returned", "Qty To Return", true),
                new org.netbeans.lib.sql.models.TableModel.Column("price_per_item", "Price", false),
                new org.netbeans.lib.sql.models.TableModel.Column("discount", "Disc%", true),
                new org.netbeans.lib.sql.models.TableModel.Column("vat", "Vat%", true),
                new org.netbeans.lib.sql.models.TableModel.Column("value", "Value", true)
            }));
            jScrollPane1.setViewportView(jTable1);
        }
 
        catch(java.sql.SQLException sqlex){
            System.out.println(sqlex.getMessage());
        }
 */
        // Add your handling code here:
    }//GEN-LAST:event_jComboBox1ActionPerformed
    private void populateTable1(java.lang.String patient_no) {
        
        int i = 0;
        
        try {
            
            java.sql.Statement stmtTable1 = connectDB.createStatement();
            
            java.sql.ResultSet rsetTable1 = stmtTable1.executeQuery("select item,units,quantity_received::numeric as quantity_received,null::numeric(15,2) as quantity_returned,price_per_item::numeric(15,2) as price_per_item,0::numeric(15,2) as discount,0::numeric(15,2) as vat,0::numeric(15,2) as value from st_stock_cardex WHERE invoice_no ='"+jComboBox1.getSelectedItem()+"' AND quantity_received > 0");
            
            while (rsetTable1.next()) {
                
                System.out.println("Working at table row "+i);
                jTable1.setValueAt(rsetTable1.getObject(1), i, 0);
                jTable1.setValueAt(rsetTable1.getObject(2), i, 1);
                jTable1.setValueAt(rsetTable1.getObject(3), i, 2);
                jTable1.setValueAt(rsetTable1.getObject(4), i, 3);
                jTable1.setValueAt(rsetTable1.getObject(5), i, 4);
                jTable1.setValueAt(rsetTable1.getObject(6), i, 5);
                jTable1.setValueAt(rsetTable1.getObject(7), i, 6);
                jTable1.setValueAt(rsetTable1.getObject(8), i, 7);
                //  jTable1.setValueAt(rsetTable1.getObject(5), i, 5);
                
                i++;
                
                //                i = i + i;
                //            jTable1.setValueAt(rsetTable1.getObject(1), i, 0);
            }
            
        } catch(java.sql.SQLException sqlExec) {
            
            javax.swing.JOptionPane.showMessageDialog(this, sqlExec.getMessage());
            
        }
    }
    
    public void tableModelTableChanged() {
        System.out.println("Calculating totals for table 11 and 2.");
        //        double resFloat = 0.00;
        double resFloat = 0.00;
        
        
        for (int i = 0; i < jTable1.getRowCount(); i++) {
            
            if (jTable1.getModel().getValueAt(i, 5) != null) {
                
                //     if (jTable11.getSelectedColumn() == 5) {
                
                resFloat = resFloat + Double.parseDouble(jTable1.getModel().getValueAt(i, 7).toString());
                
                //   }
                
                jTextField1.setText(java.lang.String.valueOf(resFloat));
                
            }
        }
        
        //               jTextField31.setText(java.lang.String.valueOf(resFloat));
    }
    
    public void tableModelTableChanged(javax.swing.event.TableModelEvent evt) {
        
        //        double resFloat = 0.00;
        double resFloat = 0.00;
        
        for (int i = 0; i < jTable1.getRowCount(); i++) {
            
            if (jTable1.getModel().getValueAt(i, 5) != null) {
                
                //  if (jTable11.getSelectedColumn() == 1) {
                
                resFloat = resFloat + Double.parseDouble(jTable1.getModel().getValueAt(i, 7).toString());
                
                //   }
                
                jTextField1.setText(java.lang.String.valueOf(resFloat));
                
            }
        }
        
        //               jTextField31.setText(java.lang.String.valueOf(resFloat));
    }
    
    //  private void cmboxActionPerformed(java.awt.event.ActionEvent evt) {
 /*    crset2.setCommand("select DISTINCT item_description from order_details where order_no = '"+jComboBox1.getSelectedItem()+"'");
     crset2.setConnectionSource(pconn1);
  
       int i = jTable1.getSelectedRow();
  
      try {
            java.lang.Class.forName("org.postgresql.Driver");
        } catch(java.lang.ClassNotFoundException nt) {
            System.out.println(nt.getMessage());
        }
  
       try {
            java.sql.Connection con = java.sql.DriverManager.getConnection("jdbc:postgresql://localhost:5432/hospital","postgres","pilsiner");
            java.sql.Statement pstmt = con.createStatement();
            java.sql.ResultSet rs = pstmt.executeQuery("select quantity,supplier from order_details where item_description = '"+cmbox.getSelectedItem()+"'");
  
          while (rs.next()){
            jTable1.setValueAt(rs.getObject(1),i,1);
          //  jTextField8.setText(rs.getObject(2).toString());
  
          }
    } catch(java.sql.SQLException sqlex){
        System.out.println(sqlex.getMessage());
 }
  */
    
    
     /*   try {
            java.sql.Connection con = java.sql.DriverManager.getConnection("jdbc:postgresql://localhost:5432/hospital","postgres","pilsiner");
            java.sql.Statement pstmt = con.createStatement();
            java.sql.ResultSet rs = pstmt.executeQuery("select quantity,supplier from order_details where item_description = '"+cmbox.getSelectedItem()+"'");
      
          while (rs.next())
            //jTable1.setValueAt(rs.getObject(1),i,1);
            jTextField8.setText(rs.getObject(2).toString());
      
      
    } catch(java.sql.SQLException sqlex){
        System.out.println(sqlex.getMessage());
 }
      */
    
    
        /*      crset2.setCommand("select item_description,quantity_received,quantity,undelivered_quantity,expiry_date from order_details");
         crset2.setConnectionSource(pconn1);
         
        try {
            crset2.execute();
         
       // crset2.setExecuteOnLoad(true);
        jTable1.setModel(new org.netbeans.lib.sql.models.TableModel(crset2, new org.netbeans.lib.sql.models.TableModel.Column[] {
            new org.netbeans.lib.sql.models.TableModel.Column("item_description", "ITEM DESCRIPTION", true),
            new org.netbeans.lib.sql.models.TableModel.Column("quantity_received", "QUANTITY RECEIVED", true),
            new org.netbeans.lib.sql.models.TableModel.Column("quantity", "QUANTITY ORDERED", true),
            new org.netbeans.lib.sql.models.TableModel.Column("undelivered_quantity", "UNDELIVERED QUANTITY", true),
            new org.netbeans.lib.sql.models.TableModel.Column("expiry_date", "EXPIRY DATE", true),
            // new org.netbeans.lib.sql.models.TableModel.Column("expiry_date", "EXPIARY DATE", true)
        }));
        jScrollPane1.setViewportView(jTable1);
        }
         
          catch(java.sql.SQLException sqlex){
        System.out.println(sqlex.getMessage());
}
         */
    // Add your handling code here:
    // }
    
    private void jButton1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton1MouseClicked
        
        // Add your handling code here:
    }//GEN-LAST:event_jButton1MouseClicked
    private void cmbox2ActionPerformed(java.awt.event.ActionEvent evt){
/*        int i = jTable1.getSelectedRow();
        java.lang.Object res_cmbox = cmbox.getSelectedItem();
 
        try {
            java.lang.Class.forName("org.postgresql.Driver");
        } catch(java.lang.ClassNotFoundException nt) {
            System.out.println(nt.getMessage());
        }
 
 
        try {
            java.sql.Connection con = java.sql.DriverManager.getConnection("jdbc:postgresql://localhost:5432/hospital","postgres","pilsiner");
            java.sql.Statement pstmt = connectDB.createStatement();
            // pstmt.executeUpdate("insert into AAA values('"+jTable1.getValueAt(numRows,numCols)+"')");
            java.sql.ResultSet rs = pstmt.executeQuery("select quantity from order_details where item_description = '"+cmbox2.getSelectedItem()+"'and order_no = '"+jComboBox1.getSelectedItem()+"'");
 
            //          javax.swing.JOptionPane.showMessageDialog(this, cmbox2.getSelectedItem().toString());
 
            while (rs.next())
                //jTextField4.setText(rs.getObject(1).toString());
                jTable1.setValueAt(rs.getObject(1),i,1);
        } catch(java.sql.SQLException sqlex){
            System.out.println(sqlex.getMessage());
        }
        //}
 
        try {
            java.sql.Statement pstmt = connectDB.createStatement();
            // pstmt.executeUpdate("insert into AAA values('"+jTable1.getValueAt(numRows,numCols)+"')");
            java.sql.ResultSet rs = pstmt.executeQuery("select quantity,supplier from order_details where item_description = '"+cmbox.getSelectedItem()+"'");
            while (rs.next())
                jTextField8.setText(rs.getObject(2).toString());
 
 
        } catch(java.sql.SQLException sqlex){
            System.out.println(sqlex.getMessage());
        }
 
/*   try {
            java.sql.Connection con = java.sql.DriverManager.getConnection("jdbc:postgresql://localhost:5432/hospital","postgres","pilsiner");
            java.sql.Statement pstmt = con.createStatement();
           // pstmt.executeUpdate("insert into AAA values('"+jTable1.getValueAt(numRows,numCols)+"')");
          java.sql.ResultSet rs = pstmt.executeQuery("select suppliers from print_quotations where description = '"+cmbox.getSelectedItem()+"' and quotation_no = '"+jComboBox1.getSelectedItem()+"'");
     while (rs.next())
            //jTextField4.setText(rs.getObject(1).toString());
            jTable1.setValueAt(rs.getObject(1),i,6);
 
 } catch(java.sql.SQLException sqlex){
        System.out.println(sqlex.getMessage());
 }*/
    }
    
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JDialog jSearchDialog;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel12;
    private org.netbeans.lib.sql.NBCachedRowSet crset3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JScrollPane jSearchScrollPane;
    private org.netbeans.lib.sql.NBCachedRowSet crset2;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jSearchPanel;
    private javax.swing.JButton jButton1;
    private javax.swing.JTextField jTextField8;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JButton jButton3;
    private javax.swing.JTextField jTextField5;
    private javax.swing.JTextField jTextField111;
    private javax.swing.JTextField jTextField11;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JButton jButton9;
    private javax.swing.JTable jSearchTable;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel7;
    private org.netbeans.lib.sql.NBCachedRowSet searchRowSet;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JPanel jPanel1;
    private org.netbeans.lib.sql.NBCachedRowSet crset1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JComboBox jComboBox2;
    private javax.swing.JButton jButton4;
    private com.afrisoftech.lib.DatePicker datePicker1;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTable jTable1;
    private javax.swing.JLabel jLabel5;
    // End of variables declaration//GEN-END:variables
    
}
