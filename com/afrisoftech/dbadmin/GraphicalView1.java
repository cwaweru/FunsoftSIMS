/*
 * TableView.java
 *
 * Created on March 23, 2004, 9:30 AM
 */

package com.afrisoftech.dbadmin;

/**
 *
 * @author  root
 */
public class GraphicalView1 extends javax.swing.JInternalFrame implements java.lang.Runnable {
    
    /** Creates new form TableView */
    public boolean pieChart = false;
    
    public boolean xyChart = false;
    
    public boolean barChart = false;
    
    javax.swing.JTable columnSelectorTable = null;
    
    java.lang.String tableName = null;
    
    boolean dateFilterBoolean = false;
    
    java.lang.String customQueryString = null;
    
    javax.swing.JTable exportTable;
    
    java.lang.String chartQueryString;
    
    boolean exportTableBoolean = true;
    
    java.lang.Thread threadExportTable = null;
    
    java.awt.GridBagConstraints gridBagConstraints;
    
    java.sql.Connection connectDB = null;
    
    javax.swing.JTable dataViewTable = null;
    
    java.util.Vector dataViewVector;
    
    java.util.Vector columnVector;
    
    com.afrisoftech.lib.DBObject dbObject;
    
    java.util.Vector childVector;
    
    java.lang.String[] dataViewTableHeader;
    
    org.netbeans.lib.sql.pool.PooledConnectionSource pConnDB = null;
    
    com.afrisoftech.dbadmin.XMLExport xmlExport;
    
    com.afrisoftech.dbadmin.ExcelExport excelExport;
    
    com.afrisoftech.dbadmin.HTMLExport htmlExport;
    
    com.afrisoftech.dbadmin.PDFExport pdfExport;
    
    com.afrisoftech.hospital.HospitalMain hospitalMain = null;
    
    public GraphicalView1(java.sql.Connection connDb, org.netbeans.lib.sql.pool.PooledConnectionSource pconnDB) {
        
        dbObject = new com.afrisoftech.lib.DBObject();
        
        connectDB = connDb;
        
        pConnDB = pconnDB;
        
        initComponents();
        
        datesPanel.setVisible(false);
        
/*        datePickerBegin.setVisible(false);
 
        datePickerEnd.setVisible(false);
 */
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        java.awt.GridBagConstraints gridBagConstraints;

        buttonPanel = new javax.swing.JPanel();
        fetchData = new javax.swing.JButton();
        fullData = new javax.swing.JButton();
        clearTable = new javax.swing.JButton();
        closeForm = new javax.swing.JButton();
        actionsPanel = new javax.swing.JPanel();
        rdchkPanel = new javax.swing.JPanel();
        partialFetchCheckBox = new javax.swing.JCheckBox();
        tempFileDelRadio = new javax.swing.JRadioButton();
        createTempFileRadio = new javax.swing.JCheckBox();
        tableActionsPanel = new javax.swing.JPanel();
        export2Excel = new javax.swing.JButton();
        export2Xml = new javax.swing.JButton();
        export2Html = new javax.swing.JButton();
        export2Pdf = new javax.swing.JButton();
        spacerPanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        customQuery = new javax.swing.JButton();
        viewPreferences = new javax.swing.JButton();
        tablePanel = new javax.swing.JPanel();
        jScrollPaneDBAdmin = new javax.swing.JScrollPane();
        jPanelTable = new javax.swing.JPanel();
        datesPanel = new javax.swing.JPanel();
        datePickerBegin = new com.afrisoftech.lib.DatePicker();
        datePickerEnd = new com.afrisoftech.lib.DatePicker();
        jLabelBeginDate = new javax.swing.JLabel();
        jLabelEndDate = new javax.swing.JLabel();
        helpPanel = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();

        getContentPane().setLayout(new java.awt.GridBagLayout());

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Database Graphical  Analyser");
        setVisible(true);
        buttonPanel.setLayout(new java.awt.GridBagLayout());

        buttonPanel.setBorder(new javax.swing.border.TitledBorder("General Actions"));
        fetchData.setMnemonic('r');
        fetchData.setText("Show Chart");
        fetchData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fetchDataActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 5);
        buttonPanel.add(fetchData, gridBagConstraints);

        fullData.setMnemonic('u');
        fullData.setText("3D<->2D");
        fullData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fullDataActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 5);
        buttonPanel.add(fullData, gridBagConstraints);

        clearTable.setMnemonic('C');
        clearTable.setText("Clear");
        clearTable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearTableActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 5);
        buttonPanel.add(clearTable, gridBagConstraints);

        closeForm.setMnemonic('s');
        closeForm.setText("Close");
        closeForm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeFormActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 5);
        buttonPanel.add(closeForm, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(buttonPanel, gridBagConstraints);

        actionsPanel.setLayout(new java.awt.GridBagLayout());

        rdchkPanel.setLayout(new java.awt.GridBagLayout());

        rdchkPanel.setBorder(new javax.swing.border.TitledBorder("Chart Actions"));
        partialFetchCheckBox.setText("Apply date filter");
        partialFetchCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                partialFetchCheckBoxActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        rdchkPanel.add(partialFetchCheckBox, gridBagConstraints);

        tempFileDelRadio.setText("Display as XY-Line chart");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        rdchkPanel.add(tempFileDelRadio, gridBagConstraints);

        createTempFileRadio.setText("Show chart as PIE-Chart");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        rdchkPanel.add(createTempFileRadio, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        actionsPanel.add(rdchkPanel, gridBagConstraints);

        tableActionsPanel.setLayout(new java.awt.GridBagLayout());

        tableActionsPanel.setBorder(new javax.swing.border.TitledBorder("Export Actions"));
        export2Excel.setMnemonic('P');
        export2Excel.setText("Print Chart");
        export2Excel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                export2ExcelActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        tableActionsPanel.add(export2Excel, gridBagConstraints);

        export2Xml.setMnemonic('l');
        export2Xml.setText("Save Chart as ..");
        export2Xml.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                export2XmlActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        tableActionsPanel.add(export2Xml, gridBagConstraints);

        export2Html.setMnemonic('M');
        export2Html.setText("Export to HTML");
        export2Html.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                export2HtmlActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        tableActionsPanel.add(export2Html, gridBagConstraints);

        export2Pdf.setMnemonic('D');
        export2Pdf.setText("Export to PDF");
        export2Pdf.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                export2PdfActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        tableActionsPanel.add(export2Pdf, gridBagConstraints);

        spacerPanel.setLayout(new java.awt.GridBagLayout());

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        spacerPanel.add(jLabel1, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 50.0;
        tableActionsPanel.add(spacerPanel, gridBagConstraints);

        customQuery.setMnemonic('Q');
        customQuery.setText("Custom Query");
        customQuery.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                customQueryActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(6, 6, 6, 6);
        tableActionsPanel.add(customQuery, gridBagConstraints);

        viewPreferences.setMnemonic('f');
        viewPreferences.setText("Chart View Preferences");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        tableActionsPanel.add(viewPreferences, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 3.0;
        actionsPanel.add(tableActionsPanel, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(actionsPanel, gridBagConstraints);

        tablePanel.setLayout(new java.awt.GridBagLayout());

        tablePanel.setBorder(new javax.swing.border.TitledBorder("Graphical Chart View"));
        jScrollPaneDBAdmin.setHorizontalScrollBarPolicy(javax.swing.JScrollPane.HORIZONTAL_SCROLLBAR_ALWAYS);
        jScrollPaneDBAdmin.setAutoscrolls(true);
        jPanelTable.setLayout(new java.awt.GridBagLayout());

        jScrollPaneDBAdmin.setViewportView(jPanelTable);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        tablePanel.add(jScrollPaneDBAdmin, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 5.0;
        gridBagConstraints.weighty = 100.0;
        getContentPane().add(tablePanel, gridBagConstraints);

        datesPanel.setLayout(new java.awt.GridBagLayout());

        datesPanel.setBorder(new javax.swing.border.TitledBorder("Date Picker"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 5);
        datesPanel.add(datePickerBegin, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 4, 0, 4);
        datesPanel.add(datePickerEnd, gridBagConstraints);

        jLabelBeginDate.setText("Begin Date");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        datesPanel.add(jLabelBeginDate, gridBagConstraints);

        jLabelEndDate.setText("End Date");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        datesPanel.add(jLabelEndDate, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(datesPanel, gridBagConstraints);

        helpPanel.setLayout(new java.awt.GridBagLayout());

        helpPanel.setBorder(new javax.swing.border.TitledBorder("Assistance"));
        jButton1.setMnemonic('H');
        jButton1.setText("Help");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        helpPanel.add(jButton1, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(helpPanel, gridBagConstraints);

        pack();
    }//GEN-END:initComponents
    
    private void partialFetchCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_partialFetchCheckBoxActionPerformed
        
        if (partialFetchCheckBox.isSelected()) {
            
            datesPanel.setVisible(true);
            
        } else {
            
            datesPanel.setVisible(false);
            
        }
        // Add your handling code here:
    }//GEN-LAST:event_partialFetchCheckBoxActionPerformed
    
    private void fetchDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fetchDataActionPerformed
        
        showChart(chartQueryString, tableName, hospitalMain);
        
        // Add your handling code here:
    }//GEN-LAST:event_fetchDataActionPerformed
    
    private void fullDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fullDataActionPerformed
        
        populateTableView(tableName);
        // Add your handling code here:
    }//GEN-LAST:event_fullDataActionPerformed
    
    private void clearTableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearTableActionPerformed
        
        dataViewTable = null;
        
        jScrollPaneDBAdmin.setViewportView(dataViewTable);
        
        // Add your handling code here:
    }//GEN-LAST:event_clearTableActionPerformed
    
    private void closeFormActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeFormActionPerformed
        
        this.dispose();
        
        // Add your handling code here:
    }//GEN-LAST:event_closeFormActionPerformed
    
    private void customQueryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_customQueryActionPerformed
        
//        com.afrisoftech.dbadmin.GraphicalQueryDialog queryDialog = new com.afrisoftech.dbadmin.GraphicalQueryDialog(new java.awt.Frame(), false, this, hospitalMain);
        
//        queryDialog.setVisible(true);
        
        // Add your handling code here:
    }//GEN-LAST:event_customQueryActionPerformed
    
    private void export2PdfActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_export2PdfActionPerformed
        
        threadExportTable = new java.lang.Thread(this, "Export2PDF");
        
        threadExportTable.start();
        
        // Add your handling code here:
    }//GEN-LAST:event_export2PdfActionPerformed
    
    private void export2HtmlActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_export2HtmlActionPerformed
        
        threadExportTable = new java.lang.Thread(this, "Export2HTML");
        
        threadExportTable.start();
        
        // Add your handling code here:
    }//GEN-LAST:event_export2HtmlActionPerformed
    
    private void export2ExcelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_export2ExcelActionPerformed
        
        threadExportTable = new java.lang.Thread(this, "Export2Excel");
        
        threadExportTable.start();
        
        // Add your handling code here:
    }//GEN-LAST:event_export2ExcelActionPerformed
    
    private void export2XmlActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_export2XmlActionPerformed
        
        threadExportTable = new java.lang.Thread(this, "Export2Xml");
        
        threadExportTable.start();
        
        // Add your handling code here:
    }//GEN-LAST:event_export2XmlActionPerformed
    
    public void populateTableView(java.lang.String selectedTable) {
        
        this.invalidate();
        
        createTableVectors(selectedTable);
        
        dataViewTable = new javax.swing.JTable(dataViewVector, columnVector) {
            
            
            
        };
        
        int columnCount = columnVector.capacity();
        
        for (int i = 0; i < columnCount; i++) {
            
            dataViewTable.getColumnModel().getColumn(i).setWidth(200);
            
        }
        
        gridBagConstraints = new java.awt.GridBagConstraints();
        
        gridBagConstraints.gridx = 0;
        
        gridBagConstraints.gridy = 1;
        
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        
        gridBagConstraints.weightx = 1.0;
        
        gridBagConstraints.weighty = 100.0;
        
        jPanelTable.removeAll();
        
        jPanelTable.add(dataViewTable, gridBagConstraints);
        
        gridBagConstraints = new java.awt.GridBagConstraints();
        
        gridBagConstraints.gridx = 0;
        
        gridBagConstraints.gridy = 0;
        
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        
        gridBagConstraints.weightx = 1.0;
        
        gridBagConstraints.weighty = 1.0;
        
        dataViewTable.getTableHeader().setBackground(java.awt.Color.GREEN);
        
        dataViewTable.getTableHeader().setForeground(java.awt.Color.BLUE);
        
        //        jScrollPaneDBAdmin.setRowHeaderView(jPanelTable);
        
        //        dataViewTable.getTableHeader().setOpaque(true);
        
        jPanelTable.add(dataViewTable.getTableHeader(), gridBagConstraints);
        
        jScrollPaneDBAdmin.setViewportView(jPanelTable);
        
        tablePanel.setBorder(new javax.swing.border.TitledBorder("Table View for table ["+tableName.toUpperCase()+"]"));
        
        //        jScrollPaneDBAdmin.setSize(5000,1000);
        
        //        jScrollPaneDBAdmin.setViewportView(dataViewTable);
        
        //        this.invalidate();
        
        exportTable = dataViewTable;
        
        this.validate();
        
        
    }
    
    public void createTableVectors(java.lang.String selectedTable) {
        
        dateFilterBoolean = false;
        
        tableName = selectedTable.toUpperCase();
        
        dataViewVector = new java.util.Vector(1,1);
        
        int rowCount = 0;
        
        try {
/*
            java.sql.PreparedStatement pstmtcountVector = connectDB.prepareStatement("SELECT COUNT(*) FROM "+selectedTable);
 
            java.sql.ResultSet rsetCountVector = pstmtcountVector.executeQuery();
 
            while(rsetCountVector.next()) {
 
                rowCount = rsetCountVector.getInt(1);
 
            }
 */
            customQueryString = "select * from "+selectedTable;
            
            java.sql.PreparedStatement pstmtVector = connectDB.prepareStatement(customQueryString);
            
            java.sql.ResultSet rsetVector = pstmtVector.executeQuery();
            
            java.sql.ResultSetMetaData rsetMetaData = rsetVector.getMetaData();
            
            pstmtVector.setCursorName("myCursor");
            
            String cursorName = rsetVector.getCursorName();
            
            System.out.println("Cursor name = ["+cursorName+"]");
            
            int columnCount = rsetMetaData.getColumnCount();
            
            //            System.out.println("Column count : ["+columnCount+"]");
            
            //            childVector = new java.util.Vector(columnCount);
            
            //            System.out.println("Done childVector");
            
            columnVector = new java.util.Vector(columnCount);
            
            //            System.out.println("Done columnVector");
            
            for (int i = 0; i < columnCount; i++) {
                //                System.out.println("Done with Headers"+rsetMetaData.getColumnName(i + 1).toUpperCase());
                columnVector.add(i,rsetMetaData.getColumnName(i + 1).toUpperCase());
                
                if (rsetMetaData.getColumnName(i + 1).matches("date") || rsetMetaData.getColumnName(i + 1).endsWith("date") || rsetMetaData.getColumnName(i + 1).startsWith("date")) {
                    
                    dateFilterBoolean = true;
                    
                    datesPanel.setVisible(true);
                    
                } else {
                    
                    if (!dateFilterBoolean) {
                        
                        datesPanel.setVisible(false);
                        
                    }
                }
                
                //                System.out.println("Done with Headers"+rsetMetaData.getColumnName(i + 1).toUpperCase());
                
            }
            
            //            int i = 0;
            
            while (rsetVector.next()) {
                childVector = new java.util.Vector(columnCount);
                //                childVector.removeAllElements();
                
                for (int j = 0; j < columnCount; j++) {
                    
                    childVector.addElement(dbObject.getDBObject(rsetVector.getString(j + 1), "-"));
                    
                }
                
                dataViewVector.add(childVector);
                
            }
            
        } catch(java.sql.SQLException sqlExec) {
            
            javax.swing.JOptionPane.showMessageDialog(new java.awt.Frame(), sqlExec.getMessage());
            
        }
        
    }
    
    public javax.swing.JTable getExportTable() {
        
        javax.swing.JTable table2Export = null;
        
        if (exportTable != null) {
            
            table2Export = exportTable;
            
        }
        
        return table2Export;
        
    }
    
    public void run() {
        
        if (exportTableBoolean == false) {
            
            exportTableBoolean = true;
            
        }
        
        while (exportTableBoolean) {
            
            System.out.println("Export process started for thread ["+Thread.currentThread().getName()+"]");
            
            if (Thread.currentThread().getName().matches("Export2Excel")) {
                
                System.out.println("Exporting Export2Excel");
                
                excelExport = new com.afrisoftech.dbadmin.ExcelExport(this.getExportTable(), tableName);
                
            } else if (Thread.currentThread().getName().matches("Export2Xml")) {
                
                xmlExport = new com.afrisoftech.dbadmin.XMLExport(this.getExportTable(), tableName);
                
            } else if (Thread.currentThread().getName().matches("Export2HTML")) {
                
                htmlExport = new com.afrisoftech.dbadmin.HTMLExport(this.getExportTable(), tableName);
                
            } else if (Thread.currentThread().getName().matches("Export2PDF")) {
                
                pdfExport = new com.afrisoftech.dbadmin.PDFExport(this.getExportTable(), tableName);
                
            }
            
            
            try {
                
                Thread.currentThread().sleep(100);
                
            } catch(java.lang.InterruptedException IntExec){ System.out.println(IntExec.getMessage());}
            
            exportTableBoolean = false;
            
        }
        
        
    }
    
    protected void setQueryString(java.lang.String queryString) {
        
        customQueryString = queryString;
        
    }
    
    protected void populateCustomQueryTable() {
        
        this.invalidate();
        
        createCustomTableVectors(null);//tableName);
        
        dataViewTable = new javax.swing.JTable(dataViewVector, columnVector);
        
        int columnCount = columnVector.capacity();
        
        for (int i = 0; i < columnCount; i++) {
            
            dataViewTable.getColumnModel().getColumn(i).setWidth(200);
            
        }
        
        gridBagConstraints = new java.awt.GridBagConstraints();
        
        gridBagConstraints.gridx = 0;
        
        gridBagConstraints.gridy = 1;
        
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        
        gridBagConstraints.weightx = 1.0;
        
        gridBagConstraints.weighty = 100.0;
        
        jPanelTable.removeAll();
        
        jPanelTable.add(dataViewTable, gridBagConstraints);
        
        gridBagConstraints = new java.awt.GridBagConstraints();
        
        gridBagConstraints.gridx = 0;
        
        gridBagConstraints.gridy = 0;
        
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        
        gridBagConstraints.weightx = 1.0;
        
        gridBagConstraints.weighty = 1.0;
        
        dataViewTable.getTableHeader().setBackground(java.awt.Color.GREEN);
        
        dataViewTable.getTableHeader().setForeground(java.awt.Color.BLUE);
        
        //        jScrollPaneDBAdmin.setRowHeaderView(jPanelTable);
        
        //        dataViewTable.getTableHeader().setOpaque(true);
        
        jPanelTable.add(dataViewTable.getTableHeader(), gridBagConstraints);
        
        jScrollPaneDBAdmin.setViewportView(jPanelTable);
        
        tablePanel.setBorder(new javax.swing.border.TitledBorder("Table View for ["+tableName.toUpperCase()+"]"));
        
        
        
        //        jScrollPaneDBAdmin.setSize(5000,1000);
        
        //        jScrollPaneDBAdmin.setViewportView(dataViewTable);
        
        //        this.invalidate();
        
        exportTable = dataViewTable;
        
        this.validate();
        
        
        
    }
    
    protected void createCustomTableVectors(java.lang.String queryString) {
        
        dateFilterBoolean = false;
        
        boolean pastFrom = false;
        //        tableName = selectedTable.toUpperCase();
        
        dataViewVector = new java.util.Vector(1,1);
        
        int rowCount = 0;
        
        try {
/*
            java.sql.PreparedStatement pstmtcountVector = connectDB.prepareStatement("SELECT COUNT(*) FROM "+selectedTable);
 
            java.sql.ResultSet rsetCountVector = pstmtcountVector.executeQuery();
 
            while(rsetCountVector.next()) {
 
                rowCount = rsetCountVector.getInt(1);
 
            }
 */
            java.util.StringTokenizer sqlTokenizer = new java.util.StringTokenizer(customQueryString);
            
            while (sqlTokenizer.hasMoreTokens()) {
                
                if (pastFrom) {
                    
                    tableName = sqlTokenizer.nextToken();
                    
                    pastFrom = false;
                    
                }
                
                if (sqlTokenizer.nextToken() == "from") {
                    
                    pastFrom = true;
                    
                }
                
            }
            
/*            int tableFrom = customQueryString.indexOf("from");
 
            tableName = customQueryString.substring(tableFrom + 5);
 */
            java.sql.PreparedStatement pstmtVector = connectDB.prepareStatement(customQueryString);
            
            java.sql.ResultSet rsetVector = pstmtVector.executeQuery();
            
            java.sql.ResultSetMetaData rsetMetaData = rsetVector.getMetaData();
            
            //    tableName = rsetMetaData.getTableName(1);
            
            int columnCount = rsetMetaData.getColumnCount();
            
            //            System.out.println("Column count : ["+columnCount+"]");
            
            //            childVector = new java.util.Vector(columnCount);
            
            //            System.out.println("Done childVector");
            
            columnVector = new java.util.Vector(columnCount);
            
            //            System.out.println("Done columnVector");
            
            for (int i = 0; i < columnCount; i++) {
                //                System.out.println("Done with Headers"+rsetMetaData.getColumnName(i + 1).toUpperCase());
                columnVector.add(i,rsetMetaData.getColumnName(i + 1).toUpperCase());
                
                if (rsetMetaData.getColumnName(i + 1).matches("date") || rsetMetaData.getColumnName(i + 1).endsWith("date") || rsetMetaData.getColumnName(i + 1).startsWith("date")) {
                    
                    dateFilterBoolean = true;
                    
                    datesPanel.setVisible(true);
                    
                } else {
                    
                    if (!dateFilterBoolean) {
                        
                        datesPanel.setVisible(false);
                        
                    }
                    
                }
                
                //                System.out.println("Done with Headers"+rsetMetaData.getColumnName(i + 1).toUpperCase());
                
            }
            
            //            int i = 0;
            
            while (rsetVector.next()) {
                childVector = new java.util.Vector(columnCount);
                //                childVector.removeAllElements();
                
                for (int j = 0; j < columnCount; j++) {
                    
                    childVector.addElement(dbObject.getDBObject(rsetVector.getString(j + 1), "-"));
                    
                }
                
                dataViewVector.add(childVector);
                
            }
            
        } catch(java.sql.SQLException sqlExec) {
            
            javax.swing.JOptionPane.showMessageDialog(new java.awt.Frame(), sqlExec.getMessage());
            
        }
        
    }
    
    protected java.lang.String createDateFilter() {
        
        java.lang.String dateFilter = " ";
        
        if ((datePickerBegin.getDate().equals(null)) && (datePickerEnd.getDate().equals(null))) {
            
            dateFilter = dateFilter + "where date between '"+datePickerBegin.getDate().toString()+"' and '"+datePickerEnd.getDate().toString()+"'";
            
        } else if (datePickerEnd.getDate().equals(null)) {
            
            dateFilter = dateFilter + "where date > '"+datePickerBegin.getDate().toString()+"'";
            
        } else if (datePickerEnd.getDate().equals(null)){
            
            dateFilter = dateFilter + "where date < '"+datePickerEnd.getDate().toString()+"'";
            
        }
        
        return dateFilter;
        
    }
/*
    protected class TableViewModel extends javax.swing.table.DefaultTableModel {
 
        java.util.Vector tableDataVector = dataViewVector;
 
        java.util.Vector tableColumnVector = columnVector;
 
        public int getRowCount() {
 
            return tableDataVector.toArray().length;
 
        }
 
        public int getColumnCount() {
 
            return tableColumnVector.toArray().length;
 
        }
 
        public java.lang.Object getValueAt(int row, int column) {
 
            return
 
        }
 
    }
 */
    private org.jfree.data.JDBCCategoryDataset getJDBCXYDataset() {
        
        org.jfree.data.JDBCCategoryDataset jdbcXYDataset = null;
        
        try {
            
            jdbcXYDataset =  new org.jfree.data.JDBCCategoryDataset(connectDB, chartQueryString);//"SELECT * FROM "+tableName);
            
        } catch (java.sql.SQLException sqlExec) {
            
            sqlExec.printStackTrace();
            
            javax.swing.JOptionPane.showMessageDialog(new java.awt.Frame(), sqlExec.getMessage());
            
        }
        
        return jdbcXYDataset;
    }
    private org.jfree.data.JDBCXYDataset getJDBCXYZDataset() {
        
        org.jfree.data.JDBCXYDataset jdbcXYDataset = null;
        
        try {
            
            jdbcXYDataset =  new org.jfree.data.JDBCXYDataset(connectDB, chartQueryString);//"SELECT * FROM "+tableName);
            
        } catch (java.sql.SQLException sqlExec) {
            
            sqlExec.printStackTrace();
            
            javax.swing.JOptionPane.showMessageDialog(new java.awt.Frame(), sqlExec.getMessage());
            
        }
        
        return jdbcXYDataset;
    }
    
    private org.jfree.data.JDBCPieDataset getJDBCPIEDataset() {
        
        org.jfree.data.JDBCPieDataset jdbcPIEDataset = null;
        
        try {
            
            jdbcPIEDataset =  new org.jfree.data.JDBCPieDataset(connectDB, chartQueryString);//"SELECT * FROM "+tableName);
            
        } catch (java.sql.SQLException sqlExec) {
            
            sqlExec.printStackTrace();
            
            javax.swing.JOptionPane.showMessageDialog(new java.awt.Frame(), sqlExec.getMessage());
            
        }
        
        return jdbcPIEDataset;
    }    
    
    private org.jfree.chart.ChartPanel getChartPanel() {
        
        org.jfree.chart.ChartPanel chartPanel = new org.jfree.chart.ChartPanel(getJFreeChart(), true, true, true, true, true);
        //        org.jfree.chart.ChartPanel chartPanel = new org.jfree.chart.ChartPanel(getJFreeChart());
        return chartPanel;
    }
    
    private org.jfree.chart.JFreeChart getJFreeChart() {
        
        org.jfree.chart.JFreeChart jfreeChart = null;
        
        if (barChart) {
        
        jfreeChart = org.jfree.chart.ChartFactory.createBarChart3D("Chart for Table ["+tableName.toUpperCase()+"]", "X-Axis", "Y-Axis", getJDBCXYDataset(), org.jfree.chart.plot.PlotOrientation.VERTICAL, true, true, true);
        
        } else if (pieChart) {
         
            jfreeChart = org.jfree.chart.ChartFactory.createPie3DChart("Chart for Table ["+tableName.toUpperCase()+"]", getJDBCPIEDataset(), true, true, true);
            
            org.jfree.chart.plot.Pie3DPlot piePlot = (org.jfree.chart.plot.Pie3DPlot)jfreeChart.getPlot();
            
            piePlot.setSectionLabelType(org.jfree.chart.plot.Pie3DPlot.NAME_AND_PERCENT_LABELS);
            
            piePlot.setExplodePercent(1, 1.00);
            
        } else {
            
            jfreeChart = org.jfree.chart.ChartFactory.createLineChart("Chart for Table ["+tableName.toUpperCase()+"]", "X-Axis", "Y-Axis", getJDBCXYDataset(), org.jfree.chart.plot.PlotOrientation.VERTICAL, true, true, true);
        }
        return jfreeChart;
    }

     
    private org.jfree.chart.JFreeChart getPIEJFreeChart() {
        
        org.jfree.chart.JFreeChart jfreeChart = null;
        
        jfreeChart = org.jfree.chart.ChartFactory.createPieChart3D("Chart for Table ["+tableName.toUpperCase()+"]", getJDBCPIEDataset(), true, true, true);
        
        return jfreeChart;
    }
    
    
    private org.jfree.chart.JFreeChart getXYJFreeChart() {
        
        org.jfree.chart.JFreeChart jfreeChart = null;
        
        jfreeChart = org.jfree.chart.ChartFactory.createLineXYChart("Chart for Table ["+tableName.toUpperCase()+"]", "X-Axis", "Y-Axis", getJDBCXYZDataset(), org.jfree.chart.plot.PlotOrientation.VERTICAL, true, true, true);
        
        return jfreeChart;
    }    
    
    public void showChart(java.lang.String chartqueryString, java.lang.String selectedTableName, com.afrisoftech.hospital.HospitalMain hospitalmain) {
        
        hospitalMain = hospitalmain;
        
        chartQueryString = chartqueryString;
        
        tableName = selectedTableName;
        
        this.invalidate();
        
/*        createCustomTableVectors(null);//tableName);
 
        dataViewTable = new javax.swing.JTable(dataViewVector, columnVector);
 
        int columnCount = columnVector.capacity();
 
        for (int i = 0; i < columnCount; i++) {
 
            dataViewTable.getColumnModel().getColumn(i).setWidth(200);
 
        }
 */
        gridBagConstraints = new java.awt.GridBagConstraints();
        
        gridBagConstraints.gridx = 0;
        
        gridBagConstraints.gridy = 1;
        
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        
        gridBagConstraints.weightx = 1.0;
        
        gridBagConstraints.weighty = 100.0;
        
        jPanelTable.removeAll();
        
        jPanelTable.add(getChartPanel(), gridBagConstraints);
        
        gridBagConstraints = new java.awt.GridBagConstraints();
        
        gridBagConstraints.gridx = 0;
        
        gridBagConstraints.gridy = 0;
        
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        
        gridBagConstraints.weightx = 1.0;
        
        gridBagConstraints.weighty = 1.0;
        
        //        dataViewTable.getTableHeader().setBackground(java.awt.Color.GREEN);
        
        //        dataViewTable.getTableHeader().setForeground(java.awt.Color.BLUE);
        
        //        jScrollPaneDBAdmin.setRowHeaderView(jPanelTable);
        
        //        dataViewTable.getTableHeader().setOpaque(true);
        
        //        jPanelTable.add(dataViewTable.getTableHeader(), gridBagConstraints);
        
        jScrollPaneDBAdmin.setViewportView(jPanelTable);
        
        tablePanel.setBorder(new javax.swing.border.TitledBorder("Graphical View for ["+tableName.toUpperCase()+"]"));
        
        
        
        //        jScrollPaneDBAdmin.setSize(5000,1000);
        
        //        jScrollPaneDBAdmin.setViewportView(dataViewTable);
        
        //        this.invalidate();
        
        exportTable = dataViewTable;
        
        this.validate();
        
        
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPaneDBAdmin;
    private javax.swing.JCheckBox partialFetchCheckBox;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JRadioButton tempFileDelRadio;
    private javax.swing.JButton export2Pdf;
    private javax.swing.JPanel tablePanel;
    private javax.swing.JButton clearTable;
    private javax.swing.JPanel actionsPanel;
    private javax.swing.JButton jButton1;
    private javax.swing.JPanel spacerPanel;
    private javax.swing.JButton export2Excel;
    private javax.swing.JCheckBox createTempFileRadio;
    private javax.swing.JLabel jLabelEndDate;
    private javax.swing.JButton viewPreferences;
    private javax.swing.JButton export2Xml;
    private com.afrisoftech.lib.DatePicker datePickerEnd;
    private javax.swing.JPanel jPanelTable;
    private javax.swing.JButton export2Html;
    private javax.swing.JPanel helpPanel;
    private com.afrisoftech.lib.DatePicker datePickerBegin;
    private javax.swing.JButton fetchData;
    private javax.swing.JPanel rdchkPanel;
    private javax.swing.JPanel buttonPanel;
    private javax.swing.JButton fullData;
    private javax.swing.JPanel tableActionsPanel;
    private javax.swing.JLabel jLabelBeginDate;
    private javax.swing.JPanel datesPanel;
    private javax.swing.JButton customQuery;
    private javax.swing.JButton closeForm;
    // End of variables declaration//GEN-END:variables
    
}
