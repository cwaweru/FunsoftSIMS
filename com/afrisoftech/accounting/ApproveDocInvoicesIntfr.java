/*
 * loanpymntintfr.java
 *
 * Created on August 13, 2002, 1:09 PM
 */

package com.afrisoftech.accounting;

/**
 *
 * @author  root
 */
public class ApproveDocInvoicesIntfr extends javax.swing.JInternalFrame {
    
    /** Creates new form loanpymntintfr */
    javax.swing.table.TableModel tableModel = null;
    
    java.sql.Connection connectDB = null;
    
    org.netbeans.lib.sql.pool.PooledConnectionSource pConnDB = null;
    
    
    public ApproveDocInvoicesIntfr(java.sql.Connection connDb, org.netbeans.lib.sql.pool.PooledConnectionSource pconnDB) {
        
        connectDB = connDb;
        
        pConnDB = pconnDB;
        
        initComponents();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        java.awt.GridBagConstraints gridBagConstraints;

        jSearchDialog11 = new javax.swing.JDialog();
        jSearchPanel11 = new javax.swing.JPanel();
        jTextField1111 = new javax.swing.JTextField();
        jSearchScrollPane11 = new javax.swing.JScrollPane();
        jSearchTable11 = new javax.swing.JTable();
        dispose11 = new javax.swing.JButton();
        try {
            searchRowSet11 = new org.netbeans.lib.sql.NBCachedRowSet();
        } catch (java.sql.SQLException e1) {
            e1.printStackTrace();
        }
        jSearchDialog1 = new javax.swing.JDialog();
        jSearchPanel1 = new javax.swing.JPanel();
        jTextField11111 = new javax.swing.JTextField();
        jSearchScrollPane1 = new javax.swing.JScrollPane();
        jSearchTable1 = new javax.swing.JTable();
        jButton511 = new javax.swing.JButton();
        try {
            searchRowSet1 = new org.netbeans.lib.sql.NBCachedRowSet();
        } catch (java.sql.SQLException e1) {
            e1.printStackTrace();
        }
        try {
            java.lang.Class.forName("org.postgresql.Driver");
        }catch (java.lang.ClassNotFoundException sl){
            System.out.println(sl.getMessage());
        }

        jButton1 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel7 = new javax.swing.JLabel();
        jTextField6 = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        jPanel21 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel4 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jButton6 = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jPanel641 = new javax.swing.JPanel();
        searchButton2 = new javax.swing.JButton();
        jTextField7 = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        jLabel71 = new javax.swing.JLabel();
        jPanel221 = new javax.swing.JPanel();
        jTextField361 = new javax.swing.JTextField();
        searchButton1 = new javax.swing.JButton();
        jTextField1 = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jTextField3 = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jTextField4 = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        datePicker1 = new com.afrisoftech.lib.DatePicker();
        jLabel9 = new javax.swing.JLabel();
        datePicker2 = new com.afrisoftech.lib.DatePicker();
        jCheckBox1 = new javax.swing.JCheckBox();

        jSearchDialog11.getContentPane().setLayout(new java.awt.GridBagLayout());

        jSearchDialog11.setModal(true);
        jSearchDialog11.setUndecorated(true);
        jSearchPanel11.setLayout(new java.awt.GridBagLayout());

        jSearchPanel11.setBorder(new javax.swing.border.EtchedBorder());
        jTextField1111.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                jTextField1111CaretUpdate(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 300.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        jSearchPanel11.add(jTextField1111, gridBagConstraints);

        jSearchTable11.setToolTipText("Click on the target row to select the patient from the search.");
        jSearchTable11.setShowHorizontalLines(false);
        /*int rowsNo = 0;
        //try {

            crset1.setCommand("SELECT patient_no, (upper(first_name||' '||second_name||' '||last_name)) as name, year_of_birth, residence from hp_patient_register order by name");

            crset1.setConnectionSource(pConnDB);

            // try {
                //crset1.execute();

                // crset2.setExecuteOnLoad(true);
                jSearchTable.setModel(new org.netbeans.lib.sql.models.TableModel(crset1, new org.netbeans.lib.sql.models.TableModel.Column[] {
                    new org.netbeans.lib.sql.models.TableModel.Column("patient_no", "Patient No.", false),
                    new org.netbeans.lib.sql.models.TableModel.Column("name", "Name", false),

                    new org.netbeans.lib.sql.models.TableModel.Column("year_of_birth", "Birth date", true),
                    new org.netbeans.lib.sql.models.TableModel.Column("residence", "Residence", true)

                }));

                tableModel = jSearchTable.getModel();

                jSearchScrollPane.setViewportView(jSearchTable);

                /*   }catch(java.sql.SQLException sqlex){
                javax.swing.JOptionPane.showMessageDialog(this,sqlex.getMessage(),"Error Message!",javax.swing.JOptionPane.ERROR_MESSAGE);

                System.out.println(sqlex.getMessage());

            }

            javax.swing.table.TableColumn column = null;

            for (int i = 0; i < 4; i++) {

                column = jSearchTable.getColumnModel().getColumn(i);

                if (i == 1) {

                    column.setPreferredWidth(400);
                    //sport column is bigger
                } else {

                    column.setPreferredWidth(200);

                }
            }*/
            jSearchTable11.addMouseListener(new java.awt.event.MouseAdapter() {
                public void mouseClicked(java.awt.event.MouseEvent evt) {
                    jSearchTable11MouseClicked(evt);
                }
            });

            jSearchScrollPane11.setViewportView(jSearchTable11);

            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 1;
            gridBagConstraints.gridwidth = 3;
            gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 20.0;
            jSearchPanel11.add(jSearchScrollPane11, gridBagConstraints);

            dispose11.setMnemonic('l');
            dispose11.setText("Close");
            dispose11.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    dispose11ActionPerformed(evt);
                }
            });

            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 2;
            gridBagConstraints.gridy = 0;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            jSearchPanel11.add(dispose11, gridBagConstraints);

            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 1;
            gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            jSearchDialog11.getContentPane().add(jSearchPanel11, gridBagConstraints);

            searchRowSet11.setConnectionSource(pConnDB);
            jSearchDialog1.getContentPane().setLayout(new java.awt.GridBagLayout());

            jSearchDialog1.setModal(true);
            jSearchDialog1.setUndecorated(true);
            jSearchPanel1.setLayout(new java.awt.GridBagLayout());

            jSearchPanel1.setBorder(new javax.swing.border.EtchedBorder());
            jTextField11111.addCaretListener(new javax.swing.event.CaretListener() {
                public void caretUpdate(javax.swing.event.CaretEvent evt) {
                    jTextField11111CaretUpdate(evt);
                }
            });

            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 0;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 300.0;
            gridBagConstraints.weighty = 1.0;
            gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
            jSearchPanel1.add(jTextField11111, gridBagConstraints);

            jSearchTable1.setModel(new javax.swing.table.DefaultTableModel(
                new Object [][] {

                },
                new String [] {
                    "Title 1"
                }
            ));
            jSearchTable1.setToolTipText("Click on the target row to select the patient from the search.");
            jSearchTable1.setShowHorizontalLines(false);
            /*javax.swing.table.TableColumn column = null;

            for (int i = 0; i < 4; i++) {

                column = jSearchTable.getColumnModel().getColumn(i);

                if (i == 1) {

                    column.setPreferredWidth(400);
                    //sport column is bigger
                } else {

                    column.setPreferredWidth(200);

                }
            }
            */
            jSearchTable1.addMouseListener(new java.awt.event.MouseAdapter() {
                public void mouseClicked(java.awt.event.MouseEvent evt) {
                    jSearchTable1MouseClicked(evt);
                }
            });

            jSearchScrollPane1.setViewportView(jSearchTable1);

            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 1;
            gridBagConstraints.gridwidth = 3;
            gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 20.0;
            jSearchPanel1.add(jSearchScrollPane1, gridBagConstraints);

            jButton511.setText("Dispose");
            jButton511.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    jButton511ActionPerformed(evt);
                }
            });

            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 2;
            gridBagConstraints.gridy = 0;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            jSearchPanel1.add(jButton511, gridBagConstraints);

            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 1;
            gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            jSearchDialog1.getContentPane().add(jSearchPanel1, gridBagConstraints);

            searchRowSet1.setConnectionSource(pConnDB);

            getContentPane().setLayout(new java.awt.GridBagLayout());

            setClosable(true);
            setIconifiable(true);
            setMaximizable(true);
            setResizable(true);
            setTitle("Allocate Doctors Invoices");
            setDefaultCloseOperation(javax.swing.WindowConstants.HIDE_ON_CLOSE);
            setFrameIcon(new javax.swing.ImageIcon(getClass().getResource("/ColorPreview.gif")));
            try {
                setSelected(true);
            } catch (java.beans.PropertyVetoException e1) {
                e1.printStackTrace();
            }
            setVisible(true);
            jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/check.gif")));
            jButton1.setMnemonic('A');
            jButton1.setText("Allocate");
            jButton1.setToolTipText("Click here enter data");
            jButton1.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    jButton1ActionPerformed(evt);
                }
            });

            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 14;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            getContentPane().add(jButton1, gridBagConstraints);

            jButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/minusarm.gif")));
            jButton3.setMnemonic('l');
            jButton3.setText("Clear");
            jButton3.setToolTipText("Click here to clear textfields");
            jButton3.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    jButton3ActionPerformed(evt);
                }
            });

            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 3;
            gridBagConstraints.gridy = 14;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            getContentPane().add(jButton3, gridBagConstraints);

            jButton4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/BD14755_.GIF")));
            jButton4.setMnemonic('C');
            jButton4.setText("Close");
            jButton4.setToolTipText("Click here to close window");
            jButton4.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    jButton4ActionPerformed(evt);
                }
            });

            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 5;
            gridBagConstraints.gridy = 14;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            getContentPane().add(jButton4, gridBagConstraints);

            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 12;
            gridBagConstraints.gridwidth = 6;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTH;
            gridBagConstraints.weightx = 1.0;
            getContentPane().add(jSeparator1, gridBagConstraints);

            jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 13;
            gridBagConstraints.gridwidth = 6;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 1.0;
            getContentPane().add(jLabel7, gridBagConstraints);

            jTextField6.setEditable(false);
            jTextField6.setMinimumSize(new java.awt.Dimension(0, 0));
            jTextField6.setPreferredSize(new java.awt.Dimension(0, 0));
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 11;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            getContentPane().add(jTextField6, gridBagConstraints);

            jPanel2.setLayout(new java.awt.GridBagLayout());

            jPanel2.setBorder(new javax.swing.border.TitledBorder(""));
            jPanel21.setLayout(new java.awt.GridBagLayout());

            jScrollPane1.setAutoscrolls(true);
            tableModel = jTable1.getModel();

            tableModel.addTableModelListener(new javax.swing.event.TableModelListener() {

                public void tableChanged(javax.swing.event.TableModelEvent evt) {

                    tableModelTableChanged(evt);

                }

            });
            jTable1.setModel(new javax.swing.table.DefaultTableModel(
                new Object [][] {
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null}
                },
                new String [] {
                    "Date", "Invoice No.", "Patient No.& Name", "Orig. Amt", "Amt. To All.", "Doctor's Fee", "Allocate"
                }
            ) {
                Class[] types = new Class [] {
                    java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Boolean.class
                };
                boolean[] canEdit = new boolean [] {
                    false, false, false, false, true, false, true
                };

                public Class getColumnClass(int columnIndex) {
                    return types [columnIndex];
                }

                public boolean isCellEditable(int rowIndex, int columnIndex) {
                    return canEdit [columnIndex];
                }
            });
            tableModel = jTable1.getModel();

            tableModel.addTableModelListener(new javax.swing.event.TableModelListener() {

                public void tableChanged(javax.swing.event.TableModelEvent evt) {

                    tableModelTableChanged(evt);

                }

            });
            jTable1.setEditingRow(jTable1.getSelectedRow());
            jTable1.setMinimumSize(new java.awt.Dimension(300, 800));
            jTable1.setPreferredScrollableViewportSize(new java.awt.Dimension(400, 400));
            jTable1.setPreferredSize(new java.awt.Dimension(700, 800));
            jTable1.setShowHorizontalLines(false);
            jTable1.setSurrendersFocusOnKeystroke(true);
            jTable1.addKeyListener(new java.awt.event.KeyAdapter() {
                public void keyReleased(java.awt.event.KeyEvent evt) {
                    jTable1KeyReleased(evt);
                }
            });

            jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
                public void mouseClicked(java.awt.event.MouseEvent evt) {
                    jTable1MouseClicked(evt);
                }
            });

            jScrollPane1.setViewportView(jTable1);

            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            jPanel21.add(jScrollPane1, gridBagConstraints);

            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 4;
            gridBagConstraints.gridwidth = 5;
            gridBagConstraints.gridheight = 3;
            gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 3.0;
            jPanel2.add(jPanel21, gridBagConstraints);

            jLabel4.setText("Allocatable Balance");
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 3;
            gridBagConstraints.gridy = 11;
            gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            jPanel2.add(jLabel4, gridBagConstraints);

            jTextField2.setEditable(false);
            jTextField2.setForeground(new java.awt.Color(0, 0, 0));
            jTextField2.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
            jTextField2.setText("0.00");
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 4;
            gridBagConstraints.gridy = 11;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            gridBagConstraints.insets = new java.awt.Insets(0, 30, 0, 10);
            jPanel2.add(jTextField2, gridBagConstraints);

            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 6;
            gridBagConstraints.gridwidth = 6;
            gridBagConstraints.gridheight = 4;
            gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 20.0;
            gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
            getContentPane().add(jPanel2, gridBagConstraints);

            jButton6.setMnemonic('C');
            jButton6.setText("Cancel All");
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 4;
            gridBagConstraints.gridy = 14;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            getContentPane().add(jButton6, gridBagConstraints);

            jPanel1.setLayout(new java.awt.GridBagLayout());

            jPanel641.setLayout(new java.awt.GridBagLayout());

            jPanel641.setBorder(new javax.swing.border.EtchedBorder());
            jPanel641.setMinimumSize(new java.awt.Dimension(82, 37));
            searchButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/kiwi/images/date.gif")));
            searchButton2.setToolTipText("Search");
            searchButton2.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
            searchButton2.setMaximumSize(new java.awt.Dimension(74, 53));
            searchButton2.setMinimumSize(new java.awt.Dimension(74, 53));
            searchButton2.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
            searchButton2.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    searchButton2ActionPerformed(evt);
                }
            });

            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 2;
            gridBagConstraints.gridy = 1;
            jPanel641.add(searchButton2, gridBagConstraints);

            jTextField7.setEditable(false);
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 1;
            gridBagConstraints.gridy = 1;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            jPanel641.add(jTextField7, gridBagConstraints);

            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 1;
            gridBagConstraints.gridy = 1;
            gridBagConstraints.gridwidth = 4;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 1.0;
            jPanel1.add(jPanel641, gridBagConstraints);

            jLabel11.setText("Doctor Name");
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 1;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            jPanel1.add(jLabel11, gridBagConstraints);

            jLabel71.setText("Doctor's No.");
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 3;
            gridBagConstraints.gridy = 3;
            jPanel1.add(jLabel71, gridBagConstraints);

            jPanel221.setLayout(new java.awt.GridBagLayout());

            jPanel221.setBorder(new javax.swing.border.EtchedBorder());
            jTextField361.setEditable(false);
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 1;
            gridBagConstraints.gridy = 1;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            jPanel221.add(jTextField361, gridBagConstraints);

            searchButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/kiwi/images/date.gif")));
            searchButton1.setToolTipText("Search");
            searchButton1.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
            searchButton1.setMaximumSize(new java.awt.Dimension(74, 53));
            searchButton1.setMinimumSize(new java.awt.Dimension(74, 53));
            searchButton1.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
            searchButton1.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    searchButton1ActionPerformed(evt);
                }
            });

            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 2;
            gridBagConstraints.gridy = 1;
            gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
            jPanel221.add(searchButton1, gridBagConstraints);

            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 1;
            gridBagConstraints.gridy = 3;
            gridBagConstraints.gridwidth = 2;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            jPanel1.add(jPanel221, gridBagConstraints);

            jTextField1.setEditable(false);
            jTextField1.setText("0.00");
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 4;
            gridBagConstraints.gridy = 4;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
            jPanel1.add(jTextField1, gridBagConstraints);

            jLabel2.setText("Amount");
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 3;
            gridBagConstraints.gridy = 4;
            gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.insets = new java.awt.Insets(0, 40, 0, 0);
            jPanel1.add(jLabel2, gridBagConstraints);

            jTextField3.setEditable(false);
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 1;
            gridBagConstraints.gridy = 4;
            gridBagConstraints.gridwidth = 2;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            jPanel1.add(jTextField3, gridBagConstraints);

            jLabel3.setText("Cheque No");
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 4;
            gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            gridBagConstraints.insets = new java.awt.Insets(0, 40, 0, 0);
            jPanel1.add(jLabel3, gridBagConstraints);

            jLabel6.setText("Voucher No");
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 3;
            gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
            gridBagConstraints.insets = new java.awt.Insets(0, 40, 0, 0);
            jPanel1.add(jLabel6, gridBagConstraints);

            jTextField4.setEditable(false);
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 4;
            gridBagConstraints.gridy = 3;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            jPanel1.add(jTextField4, gridBagConstraints);

            jLabel8.setText("Period From");
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 2;
            gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.insets = new java.awt.Insets(0, 40, 0, 0);
            jPanel1.add(jLabel8, gridBagConstraints);

            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 1;
            gridBagConstraints.gridy = 2;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            jPanel1.add(datePicker1, gridBagConstraints);

            jLabel9.setText("Period To");
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 3;
            gridBagConstraints.gridy = 2;
            gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.insets = new java.awt.Insets(0, 40, 0, 0);
            jPanel1.add(jLabel9, gridBagConstraints);

            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 4;
            gridBagConstraints.gridy = 2;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            jPanel1.add(datePicker2, gridBagConstraints);

            jCheckBox1.setText("Confirm Period");
            jCheckBox1.setToolTipText("Click To View Invoices");
            jCheckBox1.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
            jCheckBox1.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
            jCheckBox1.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    jCheckBox1ActionPerformed(evt);
                }
            });

            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 5;
            gridBagConstraints.gridy = 2;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
            jPanel1.add(jCheckBox1, gridBagConstraints);

            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 1;
            gridBagConstraints.gridwidth = 6;
            gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            getContentPane().add(jPanel1, gridBagConstraints);

            setBounds(0, 0, 697, 428);
        }//GEN-END:initComponents

    private void jTable1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTable1KeyReleased
        double resFloat = 0.00;
        //  double totalSum = 0.00;
        double floatTotal = java.lang.Double.parseDouble(jTextField1.getText());
        
        if (jTable1.getModel().getValueAt(jTable1.getSelectedRow(), 4) != null) {
            double amtToalloc = java.lang.Double.parseDouble(jTextField2.getText());
            double floatCol2 = java.lang.Double.parseDouble(jTable1.getValueAt(jTable1.getSelectedRow(), 3).toString());
            
            double floatCol3 = java.lang.Double.parseDouble(jTable1.getValueAt(jTable1.getSelectedRow(), 4).toString());
            double balance = java.lang.Double.parseDouble(jTable1.getValueAt(jTable1.getSelectedRow(), 5).toString());
            
            
           /* if (floatCol2 < amtToalloc){
            double resVal = floatCol2 - floatCol3;
            
            
            jTable1.setValueAt(new java.lang.Float(resVal), jTable1.getSelectedRow(), 5);
          }else*/
            //  if (floatCol2 > amtToalloc && amtToalloc > 0){
            if (floatCol3 <= amtToalloc && amtToalloc >= 0){
                
                double resVal =floatCol2 - floatCol3;
                
                
                jTable1.setValueAt(new java.lang.Float(resVal), jTable1.getSelectedRow(), 5);
            }
            else
                if (floatCol3 > amtToalloc && amtToalloc > 0){
                    javax.swing.JOptionPane.showMessageDialog(this,"You cannot allocate amount higher than the amount to allocate","Comfirmation Message!",javax.swing.JOptionPane.INFORMATION_MESSAGE);
                }
            
            
     /*       for (int i = 0; i < jTable1.getRowCount(); i++) {
      
                if (jTable1.getModel().getValueAt(i, 0) != null) {//toString().compareToIgnoreCase(null) {
      
                    resFloat = resFloat + Double.parseDouble(jTable1.getValueAt(i, 3).toString());
      
      
                    // totalSum = floatTotal + resFloat;
      
                }
            }*/
            this.tableModelTableChanged();
        }else
            if (jTable1.getModel().getValueAt(jTable1.getSelectedRow(), 4) == null) {
                jTable1.setValueAt(new java.lang.Double(jTable1.getValueAt(jTable1.getSelectedRow(), 3).toString()), jTable1.getSelectedRow(), 5);
                this.tableModelTableChanged();
            }        // Add your handling code here:
    }//GEN-LAST:event_jTable1KeyReleased

    private void jCheckBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox1ActionPerformed
        for (int k = 0; k < jTable1.getRowCount(); k++ ) {
            for (int r = 0; r < jTable1.getColumnCount(); r++ ) {
                jTable1.getModel().setValueAt(null,k,r);
            }
        }
        
        /*  try{
   java.sql.Statement stmt = connectDB.createStatement();
         
            java.sql.ResultSet rset = stmt.executeQuery("SELECT sum(credit_bal) FROM ac_doctors_ledger WHERE acc_no = '"+this.jTextField4.getText()+"' and credit_bal > 0 and paid = true");// and revenue_code = '"+jTextField5.getText()+"' AND paid = false");
         
            while (rset.next()) {
                jTextField1.setText(rset.getObject(1).toString());
            }
         
         
        } catch(java.sql.SQLException sqlExec) {
         
            javax.swing.JOptionPane.showMessageDialog(this, sqlExec.getMessage());
         
        }
         */
        this.jButton1.setEnabled(true);
        this.populateTable1(this.jTextField4.getText());   // Add your handling code here:
    }//GEN-LAST:event_jCheckBox1ActionPerformed
    
    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
         if (jTable1.getSelectedColumn() == 6) {
            if (Boolean.valueOf(jTable1.getModel().getValueAt(jTable1.getSelectedRow(), 6).toString()) == java.lang.Boolean.TRUE) {
                
                if(this.jTextField2.getText().equalsIgnoreCase("0.0")){
                    
                    javax.swing.JOptionPane.showMessageDialog(this,"Amount to allocate has been EXHAUSTED !","Information Message!",javax.swing.JOptionPane.INFORMATION_MESSAGE);
                    
                }else{
                    if (jTable1.getValueAt(jTable1.getSelectedRow(), jTable1.getSelectedColumn()) != null) {
                        if (jTable1.getValueAt(jTable1.getSelectedRow(), 5) != null){
                            this.tableModelTableChanged1();
                        }
                    }
                }
            }else{
                if (jTable1.getValueAt(jTable1.getSelectedRow(), jTable1.getSelectedColumn()) != null) {
                    if (jTable1.getValueAt(jTable1.getSelectedRow(), 5) != null){
                        this.tableModelTableChanged1();
                    }
                }
            }
            this.tableModelTableChanged();
        }
        
        
        /*       double floatCol2 = java.lang.Double.parseDouble(jTable1.getValueAt(jTable1.getSelectedRow(), 5).toString());
        double floatCol21 = 00;
        double Total = java.lang.Double.parseDouble(this.jTextField1.getText());
        double Balance = java.lang.Double.parseDouble(this.jTextField2.getText());
        // double Total = new com.afrisoftech.sys.Format2Number().Format2Number(jTextField3.getText()).doubleValue();
        
        double totals = 0.00;
        double resFloat = 0.00;
        double amt = java.lang.Double.parseDouble(this.jTextField1.getText());
        
        double amt1 = java.lang.Double.parseDouble(this.jTextField2.getText());
        
        // double total_amount = java.lang.Double.parseDouble(this.jTextField2.getText());
        //       double floatCol2 = java.lang.Double.parseDouble(jTable1.getValueAt(jTable1.getSelectedRow(), 5).toString());
        double bal = java.lang.Double.parseDouble(jTable1.getValueAt(jTable1.getSelectedRow(), 5).toString());
        double orig = java.lang.Double.parseDouble(jTable1.getValueAt(jTable1.getSelectedRow(), 3).toString());
        //        double amtAlloc = java.lang.Double.parseDouble(jTable1.getValueAt(jTable1.getSelectedRow(), 4).toString());
        
        int i = 0;
        if(amt > 0){
            for (int j = 0; j < jTable1.getRowCount(); j++) {
                if(this.jTable1.getModel().getValueAt(j,6) != null){
                    //  if (jTable1.getModel().getValueAt(j, 5).toString().equalsIgnoreCase("TRUE")){// == java.lang.Boolean.TRUE) {
                    if (Boolean.valueOf(jTable1.getModel().getValueAt(j, 6).toString()) == java.lang.Boolean.TRUE) {
                        
                        System.out.println("\n"+jTable1.getModel().getValueAt(j, 6).toString());
                        // amt = amt - Double.parseDouble(jTable1.getModel().getValueAt(j, 3).toString());
                        
                        jTable1.getModel().removeTableModelListener(new javax.swing.event.TableModelListener() {
                            
                            public void tableChanged(javax.swing.event.TableModelEvent evt) {
                                
                                //   tableModelTableChanged(evt);
                                
                            }
                            
                        });
                        if(this.jTable1.getModel().getValueAt(j,6) != null){
                            
                            
                            jTextField2.setForeground(java.awt.Color.BLACK);
                            
                            
                            if(amt1 >= floatCol2) {
                                
                                //           jTable1.getModel().setValueAt((Object)java.lang.String.valueOf(0.00), jTable1.getSelectedRow(), 4);
                                jTable1.setValueAt(new java.lang.Double(resFloat), jTable1.getSelectedRow(), 5);
                                
                                double balance = java.lang.Double.parseDouble(jTable1.getValueAt(jTable1.getSelectedRow(), 5).toString());
                                
                              //  jTable1.setValueAt(new java.lang.Double(orig-balance), jTable1.getSelectedRow(), 4);
                                 jTable1.setValueAt(new java.lang.Double(bal), jTable1.getSelectedRow(), 4);
                               
                            }else{
                                
                                
                                if (amt1 <= floatCol2 && amt1 >= 0){
                                    
                                    jTable1.setValueAt(new java.lang.Double(java.lang.Math.round(floatCol2-amt1)),jTable1.getSelectedRow(),5);
                                    double balance = java.lang.Double.parseDouble(jTable1.getValueAt(jTable1.getSelectedRow(), 5).toString());
                                    
                                    jTable1.setValueAt(new java.lang.Double(amt1), jTable1.getSelectedRow(), 4);
                                    
                                    jTextField2.setForeground(java.awt.Color.RED);
                                    
                                }
                            }
                            
                            
                            amt = amt - Double.parseDouble(jTable1.getModel().getValueAt(j, 3).toString());
                            
                            i++;
                            
                            
                            
                        }
                        if (amt > 0){
                            jTextField2.setText(Double.toString(amt));
                        }else{
                            jTextField2.setText(Double.toString(0.00));
                            
                        }
                    }else{
                        
                        if (Boolean.valueOf(jTable1.getModel().getValueAt(jTable1.getSelectedRow(), 6).toString()) == java.lang.Boolean.FALSE) {
                            
                            if(this.jTable1.getModel().getValueAt(jTable1.getSelectedRow(),6) != null){
                                
                                
                                jTextField2.setForeground(java.awt.Color.BLACK);
                                
                                 double allocatable = java.lang.Double.parseDouble(jTable1.getValueAt(jTable1.getSelectedRow(), 4).toString());
                                 double balalloc = java.lang.Double.parseDouble(jTable1.getValueAt(jTable1.getSelectedRow(), 5).toString());
       
                                // if(amt > floatCol2) {
                                
                                //           jTable1.getModel().setValueAt((Object)java.lang.String.valueOf(0.00), jTable1.getSelectedRow(), 4);
                                jTable1.setValueAt(new java.lang.Double(allocatable+balalloc), jTable1.getSelectedRow(), 5);
                                jTable1.setValueAt(new java.lang.Double(0), jTable1.getSelectedRow(), 4);
                                
                            }
                            if (amt1 > 0) {
                                jTextField2.setText(Double.toString(amt1+java.lang.Double.parseDouble(jTable1.getValueAt(jTable1.getSelectedRow(), 3).toString())));
                            }else{
                                if (amt1 == 0) {
                                    
                                    jTextField2.setText(Double.toString(java.lang.Double.parseDouble(jTable1.getValueAt(jTable1.getSelectedRow(), 3).toString())-bal));
                                }
                            }
                        }
                    }
                }
            }
            
        }else{
            
            jTable1.setValueAt(new java.lang.Double(floatCol2),jTable1.getSelectedRow(),5);
            
        }
        */

        // Add your handling code here:
    }//GEN-LAST:event_jTable1MouseClicked
   public void tableModelTableChanged() {
        System.out.println("Calculating totals for table 11 and 2.");
        double zeros = 0.00;
        double resFloat = java.lang.Double.parseDouble(jTextField1.getText());;
        double resFloat1 = java.lang.Double.parseDouble(jTextField2.getText());;
        
        
        for (int i = 0; i < jTable1.getRowCount(); i++) {
            
            if (jTable1.getModel().getValueAt(i, 4) != null) {
                
                //    if (jTable11.getSelectedColumn() == 1) {
                
                resFloat = resFloat - Double.parseDouble(jTable1.getModel().getValueAt(i, 4).toString());
                
             /*  if (resFloat > 0){
                    jTextField2.setText(java.lang.String.valueOf(resFloat));
                } else
                    if (resFloat < 0){
                        javax.swing.JOptionPane.showMessageDialog(this,"You cannot allocate amount higher than the Allocatable Balance","Comfirmation Message!",javax.swing.JOptionPane.INFORMATION_MESSAGE);
                        jTable1.setValueAt(new java.lang.Double(0), jTable1.getSelectedRow(), 4);
                    }
              */
            }
        }
        
        if (resFloat > 0){
            jTextField2.setText(java.lang.String.valueOf(resFloat));
        } else
            if (resFloat < 0){
                javax.swing.JOptionPane.showMessageDialog(this,"You cannot allocate amount higher than the Allocatable Balance","Comfirmation Message!",javax.swing.JOptionPane.INFORMATION_MESSAGE);
                jTable1.setValueAt(new java.lang.Double(0), jTable1.getSelectedRow(), 4);
            }
        
        //               jTextField31.setText(java.lang.String.valueOf(resFloat));
    }
    
    public void tableModelTableChanged(javax.swing.event.TableModelEvent evt) {
        
        //        double resFloat = 0.00;
        double resFloat = java.lang.Double.parseDouble(jTextField1.getText());
        double resFloat1 = java.lang.Double.parseDouble(jTextField2.getText());;
        
        for (int i = 0; i < jTable1.getRowCount(); i++) {
            
            if (jTable1.getModel().getValueAt(i, 4) != null) {
                
                //   if (jTable11.getSelectedColumn() == 1) {
                
                resFloat = resFloat - Double.parseDouble(jTable1.getModel().getValueAt(i, 4).toString());
                
                //   }
             /*   if (resFloat1> 0){
                    jTextField2.setText(java.lang.String.valueOf(resFloat));
                } else
                    if (resFloat < 0){
                        javax.swing.JOptionPane.showMessageDialog(this,"You cannot allocate amount higher than the amount to allocate","Comfirmation Message!",javax.swing.JOptionPane.INFORMATION_MESSAGE);
                        jTable1.setValueAt(new java.lang.Double(0), jTable1.getSelectedRow(), 4);
              
                    }*/
                
            }
        }
        if (resFloat1> 0){
            jTextField2.setText(java.lang.String.valueOf(resFloat));
        } else
            if (resFloat < 0){
                javax.swing.JOptionPane.showMessageDialog(this,"You cannot allocate amount higher than the amount to allocate","Comfirmation Message!",javax.swing.JOptionPane.INFORMATION_MESSAGE);
                jTable1.setValueAt(new java.lang.Double(0), jTable1.getSelectedRow(), 4);
                
            }
        
        //               jTextField31.setText(java.lang.String.valueOf(resFloat));
    }   
    private void jButton511ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton511ActionPerformed
        jSearchDialog1.dispose();   // Add your handling code here:
    }//GEN-LAST:event_jButton511ActionPerformed
    
    private void jSearchTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jSearchTable1MouseClicked
        this.jButton1.setEnabled(true);
        jTextField3.setText("00");
        jTextField1.setText("0.00");
        //jTextField2.setText("0.00");
        jTextField361.setText(jSearchTable1.getValueAt(jSearchTable1.getSelectedRow(), 0).toString());
        jTextField1.setText(jSearchTable1.getValueAt(jSearchTable1.getSelectedRow(), 1).toString());
        jTextField3.setText(jSearchTable1.getValueAt(jSearchTable1.getSelectedRow(), 2).toString());
        jTextField2.setText(jSearchTable1.getValueAt(jSearchTable1.getSelectedRow(), 1).toString());
        
        jSearchDialog1.dispose();
        
       /* try {
            java.sql.Statement stmt = connectDB.createStatement();
            java.sql.Statement stmt1 = connectDB.createStatement();
            java.sql.ResultSet rset = stmt.executeQuery("select rc.cheque_no from ac_debtors db,ac_cash_collection rc where db.account_no = '"+jTextField4.getText()+"' AND db.receipt_no = '"+this.jTextField361.getText()+"' and db.receipt_no = rc.receipt_no");
            //  java.sql.ResultSet rset1 = stmt1.executeQuery("select count(debit) from ac_cash_collection where cash_point ='"+jComboBox2.getSelectedItem()+"' and shift_no = '"+jTextField9.getText()+"'");
        
        
            while (rset.next()){
        
                jTextField3.setText(rset.getObject(1).toString());
                //  jTextField1.setText(rset.getObject(2).toString());
            }
        
        } catch(java.sql.SQLException sqlExec) {
        
            javax.swing.JOptionPane.showMessageDialog(this, sqlExec.getMessage());
        
        }
        */// Add your handling code here:
    }//GEN-LAST:event_jSearchTable1MouseClicked
    
    private void jTextField11111CaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_jTextField11111CaretUpdate
        try {
            // searchRowSet.execute("select scheme_manager as scheme from ac_schemes");
            
            searchRowSet1.execute("select voucher_no,debit_bal,reference from ac_doctors_ledger where debit_bal > 0 and voucher_no ILIKE '"+jTextField11111.getText().toString()+"%' and acc_no ='"+jTextField4.getText()+"'");
            //   searchRowSet.execute();
            //     searchRowSet.execute("SELECT patient_no, (upper(first_name||' '||second_name||' '||last_name)) as name, year_of_birth, residence from hp_patient_register where first_name '~ '~"+jTextField11.getText()+"' order by name");
            
            jSearchTable1.setModel(new org.netbeans.lib.sql.models.TableModel(searchRowSet1, new org.netbeans.lib.sql.models.TableModel.Column[] {
                new org.netbeans.lib.sql.models.TableModel.Column("voucher_no", "Voucher No.", false),
                new org.netbeans.lib.sql.models.TableModel.Column("debit_bal", "Amount", false),
                new org.netbeans.lib.sql.models.TableModel.Column("reference", "Cheque no", false)
            }));
            jSearchTable1.setShowHorizontalLines(false);
            jSearchScrollPane1.setViewportView(jSearchTable1);
            
            
        } catch(java.sql.SQLException sqlExec) {
            
            javax.swing.JOptionPane.showMessageDialog(this, sqlExec.getMessage());
            
        }        // Add your handling code here:
    }//GEN-LAST:event_jTextField11111CaretUpdate
    
    private void searchButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButton1ActionPerformed
        searchButton1Clicked();  // Add your handling code here:
    }//GEN-LAST:event_searchButton1ActionPerformed
    private void searchButton1Clicked() {
        
        System.out.println("Showing dialog");
        
        java.awt.Point point = this.jTextField361.getLocationOnScreen();
        
        jSearchDialog1.setSize(400,200);
        
        jSearchDialog1.setLocation(point);
        
        jSearchDialog1.show();
        
    }
    private void searchButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButton2ActionPerformed
        searchButtonClicked();        // Add your handling code here:
    }//GEN-LAST:event_searchButton2ActionPerformed
    private void searchButtonClicked() {
        
        System.out.println("Showing dialog");
        
        java.awt.Point point = this.jTextField7.getLocationOnScreen();
        
        jSearchDialog11.setSize(400,200);
        
        jSearchDialog11.setLocation(point);
        
        jSearchDialog11.show();
        
    }
    private void dispose11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dispose11ActionPerformed
        jSearchDialog11.dispose();   // Add your handling code here:
    }//GEN-LAST:event_dispose11ActionPerformed
    
    private void jSearchTable11MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jSearchTable11MouseClicked
        jTextField7.setText(jSearchTable11.getValueAt(jSearchTable11.getSelectedRow(), 0).toString());
        jTextField4.setText(jSearchTable11.getValueAt(jSearchTable11.getSelectedRow(), 1).toString());
        jSearchDialog11.dispose();
        
        
        // Add your handling code here:
    }//GEN-LAST:event_jSearchTable11MouseClicked
    
    private void jTextField1111CaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_jTextField1111CaretUpdate
 /*   if(jTextField1111.getCaretPosition() < 3){
  
            System.out.println("Nothing");
        }else{
  
  
            try {
  
                searchRowSet11.execute("SELECT account_no,scheme_name,payer_name from ac_schemes where scheme_name ILIKE '"+jTextField1111.getText()+"%' order by scheme_name");
                //     searchRowSet.execute("SELECT patient_no, (upper(first_name||' '||second_name)) as name, year_of_birth, residence from hp_patient_register where (upper(first_name||' '||second_name)) ILIKE '"+jTextField11.getText()+"%' order by first_name");
  
                jSearchTable11.setModel(new org.netbeans.lib.sql.models.TableModel(searchRowSet11, new org.netbeans.lib.sql.models.TableModel.Column[] {
                    new org.netbeans.lib.sql.models.TableModel.Column("account_no", "Account no", false),
                    new org.netbeans.lib.sql.models.TableModel.Column("scheme_name", "Name", false),
                    new org.netbeans.lib.sql.models.TableModel.Column("payer_name", "Payer", false)
  
                }));
                jSearchTable11.setShowHorizontalLines(false);
                jSearchScrollPane11.setViewportView(jSearchTable11);
  
  
            } catch(java.sql.SQLException sqlExec) {
  
                javax.swing.JOptionPane.showMessageDialog(this, sqlExec.getMessage());
  
            }
        }
  */
        
        if(this.jTextField1111.getCaretPosition() < 3){
            System.out.print("Nothing");
        }else{
            try {
                searchRowSet11.execute("select distinct first_name as name,staff_no from pb_doctors_list where first_name ILIKE '"+jTextField1111.getText()+"%' order by first_name");
                //   searchRowSet2.execute("select code,supplier_name as name from st_suppliers where supplier_name ILIKE '"+jTextField113.getText()+"%' order by supplier_name");
                
                jSearchTable11.setModel(new org.netbeans.lib.sql.models.TableModel(searchRowSet11, new org.netbeans.lib.sql.models.TableModel.Column[] {
                    // new org.netbeans.lib.sql.models.TableModel.Column("code", "Acc.No", false),
                    new org.netbeans.lib.sql.models.TableModel.Column("name", "Name", false),
                    new org.netbeans.lib.sql.models.TableModel.Column("staff_no", "Member No.", false)
                    // new org.netbeans.lib.sql.models.TableModel.Column("description", "Scheme", false)
                }));
                jSearchScrollPane11.setViewportView(jSearchTable11);
                System.out.println("Cannot sort out");
            } catch(java.sql.SQLException sqlExec) {
                
                javax.swing.JOptionPane.showMessageDialog(this, sqlExec.getMessage());
                
            }
        }
        // Add your handling code here:
    }//GEN-LAST:event_jTextField1111CaretUpdate
    
    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        this.setVisible(false);   // Add your handling code here:
    }//GEN-LAST:event_jButton4ActionPerformed
    
    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        for (int k = 0; k < jTable1.getRowCount(); k++ ) {
            for (int r = 0; r < jTable1.getColumnCount(); r++ ) {
                jTable1.getModel().setValueAt(null,k,r);
            }
        }
        
        // Add your handling code here:
    }//GEN-LAST:event_jButton3ActionPerformed
    
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        java.util.Calendar calendar = java.util.Calendar.getInstance();
        
        long dateNow = calendar.getTimeInMillis();
        
        java.sql.Date datenowSql= new java.sql.Date(dateNow);
        
        System.out.println(datenowSql.toString());
        try{
        int j = jTable1.getRowCount();
        
        String User = null;
        double amt1 = java.lang.Double.parseDouble(this.jTextField2.getText());
        double amt2 = java.lang.Double.parseDouble(this.jTextField1.getText());
        
        
        if(amt1 >= 0.00 && amt2 > 0.00){
            try {
                connectDB.setAutoCommit(false);
                java.sql.Statement pss1 = connectDB.createStatement();
                java.sql.ResultSet rsts = pss1.executeQuery("select current_user");
                while (rsts.next())
                    
                    User = rsts.getObject(1).toString();
                if (Boolean.valueOf(jTable1.getModel().getValueAt(jTable1.getSelectedRow(), 6).toString()) == java.lang.Boolean.TRUE) {
                    for (int i = 0; i < jTable1.getRowCount(); i++){
                        if (jTable1.getModel().getValueAt(i,4) != null){
                            
                            java.sql.PreparedStatement pstmt = connectDB.prepareStatement("insert into dr_allocation values(?,?,?,?,?,?,?,?,?,?,?,?)");
                            pstmt.setObject(1,jTextField4.getText());
                            pstmt.setObject(2,"'now'");
                            pstmt.setObject(3,"Allocation");
                            pstmt.setObject(4,jTextField361.getText());
                            pstmt.setObject(5,"");
                            if(jTextField3.getText().equals(null) || jTextField3.getText().equals("")){
                                pstmt.setObject(6,"00");
                            }else{
                                pstmt.setObject(6,jTextField3.getText());
                            }
                            pstmt.setObject(7,jTextField1.getText());
                            pstmt.setObject(8,jTable1.getValueAt(i,4).toString());
                            pstmt.setObject(9,jTable1.getValueAt(i,1).toString());
                            pstmt.setObject(10,User);
                            pstmt.setObject(11,jTable1.getValueAt(i,2).toString());
                            pstmt.setObject(12,jTable1.getValueAt(i,0).toString());
                            pstmt.executeUpdate();
                            
                            java.sql.PreparedStatement pstmt2 = connectDB.prepareStatement("UPDATE ac_doctors_ledger set credit_bal = (credit_bal - '"+jTable1.getModel().getValueAt(i,4).toString()+"') WHERE pat_inv = '"+jTable1.getModel().getValueAt(i,1).toString()+"' and acc_no ='"+this.jTextField4.getText()+"' AND input_date = '"+jTable1.getValueAt(i,0).toString()+"'");
                            pstmt2.executeUpdate();
                        }
                    }
                }
                
                java.sql.PreparedStatement pstmt4 = connectDB.prepareStatement("UPDATE ac_doctors_ledger set debit_bal = '"+jTextField2.getText()+"' WHERE voucher_no = '"+this.jTextField361.getText()+"' and acc_no = '"+this.jTextField4.getText()+"'");
                pstmt4.executeUpdate();
                connectDB.commit();
                connectDB.setAutoCommit(true);
                
                
                // nBCachedRowSet1.execute();
                javax.swing.JOptionPane.showMessageDialog(this,"Insert Done Successfully","Comfirmation Message!",javax.swing.JOptionPane.INFORMATION_MESSAGE);
                jButton1.setEnabled(false);
                for (int k = 0; k < jTable1.getRowCount(); k++ ) {
                    for (int r = 0; r < jTable1.getColumnCount(); r++ ) {
                        jTable1.getModel().setValueAt(null,k,r);
                    }
                }
                // this.populateTable1(this.jTextField4.getText());
                jTextField2.setText("00");
                jTextField1.setText("0.00");
            }   catch(java.sql.SQLException sq){
                javax.swing.JOptionPane.showMessageDialog(this,sq.getMessage(),"Error Message!",javax.swing.JOptionPane.ERROR_MESSAGE);
                try {
                    connectDB.rollback();
                }catch (java.sql.SQLException sql){
                    javax.swing.JOptionPane.showMessageDialog(this,sql.getMessage(),"Error Message!",javax.swing.JOptionPane.ERROR_MESSAGE);
                }
                System.out.println(sq.getMessage());
                jLabel7.setForeground(java.awt.Color.red);
                jLabel7.setText("Sorry. Please Check The Fields");
            }
        }else{
            javax.swing.JOptionPane.showMessageDialog(this,"Balance less than the allocatable amount","Comfirmation Message!",javax.swing.JOptionPane.INFORMATION_MESSAGE);
        }
        
         } catch(java.lang.Exception ex) {
            System.out.println(ex.getMessage());
            javax.swing.JOptionPane.showMessageDialog(this, "TRANSACTION ERROR : Please double check your entries.", "Error",javax.swing.JOptionPane.ERROR_MESSAGE);
            
            
        }
        // Add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    
    private void populateTable1(java.lang.String patient_no) {
        
        int i = 0;
        int j = 0;
        try {
            java.sql.Statement stmt = connectDB.createStatement();
            
            java.sql.ResultSet rset = stmt.executeQuery("SELECT count(acc_no) FROM ac_doctors_ledger WHERE acc_no = '"+patient_no+"' and credit_bal > 0 and paid = true and input_date between '"+this.datePicker1.getDate().toString()+"' and '"+this.datePicker2.getDate().toString()+"'");// and revenue_code = '"+jTextField5.getText()+"' AND paid = false");
            
            while (rset.next()) {
                j = rset.getInt(1);
            }
            if (j > 0){
                java.sql.Statement stmtTable1 = connectDB.createStatement();
                
                // java.sql.ResultSet rsetTable1 = stmtTable1.executeQuery("SELECT input_date , pat_inv, patient_no||' '||patient_name,sum(credit),sum(credit_bal)::numeric,null as boolean FROM ac_doctors_ledger WHERE acc_no = '"+patient_no+"' and credit_bal > 0 and paid = true and input_date between '"+this.datePicker1.getDate().toString()+"' and '"+this.datePicker2.getDate().toString()+"' group by  pat_inv, patient_no||' '||patient_name,input_date order by input_date");// and revenue_code = '"+jTextField5.getText()+"' AND paid = false");
                java.sql.ResultSet rsetTable1 = stmtTable1.executeQuery("SELECT input_date , pat_inv, patient_no||' '||patient_name,sum(credit),sum(credit_bal)::numeric,null as boolean FROM ac_doctors_ledger WHERE acc_no = '"+patient_no+"' and credit_bal > 0 and input_date between '"+this.datePicker1.getDate().toString()+"' and '"+this.datePicker2.getDate().toString()+"' group by  pat_inv, patient_no||' '||patient_name,input_date order by input_date");// and revenue_code = '"+jTextField5.getText()+"' AND paid = false");
                
                while (rsetTable1.next()) {
                    
                    System.out.println("Working at table row "+i);
                    jTable1.setValueAt(rsetTable1.getObject(1), i, 0);
                    jTable1.setValueAt(rsetTable1.getObject(2), i, 1);
                    jTable1.setValueAt(rsetTable1.getObject(3), i, 2);
                    jTable1.setValueAt(rsetTable1.getObject(4), i, 3);
                    jTable1.setValueAt(null, i, 4);
                    jTable1.setValueAt(rsetTable1.getObject(5), i, 5);
                    jTable1.setValueAt(rsetTable1.getObject(6), i, 6);
                    // jTable1.setValueAt(rsetTable1.getObject(6), i, 5);
                    //jTable1.setValueAt(rsetTable1.getObject(7), i, 6);
                    
                    i++;
                    
                    //                i = i + i;
                    //            jTable1.setValueAt(rsetTable1.getObject(1), i, 0);
                }
            }
        } catch(java.sql.SQLException sqlExec) {
            
            javax.swing.JOptionPane.showMessageDialog(this, sqlExec.getMessage());
            
        }
        
        
    }
    
        public void tableModelTableChanged1() {
        double totals = 0.00;
        double resFloat = 0.00;
        double amt = java.lang.Double.parseDouble(this.jTextField1.getText());
        
        double amt1 = java.lang.Double.parseDouble(this.jTextField2.getText());
        
        // double total_amount = java.lang.Double.parseDouble(this.jTextField2.getText());
        double floatCol2 = java.lang.Double.parseDouble(jTable1.getValueAt(jTable1.getSelectedRow(), 5).toString());
        double bal = java.lang.Double.parseDouble(jTable1.getValueAt(jTable1.getSelectedRow(), 5).toString());
        double orig = java.lang.Double.parseDouble(jTable1.getValueAt(jTable1.getSelectedRow(), 3).toString());
        //        double amtAlloc = java.lang.Double.parseDouble(jTable1.getValueAt(jTable1.getSelectedRow(), 4).toString());
        
        int i = 0;
        if(amt > 0){
            for (int j = 0; j < jTable1.getRowCount(); j++) {
                if(this.jTable1.getModel().getValueAt(j,6) != null){
                    //  if (jTable1.getModel().getValueAt(j, 5).toString().equalsIgnoreCase("TRUE")){// == java.lang.Boolean.TRUE) {
                    if (Boolean.valueOf(jTable1.getModel().getValueAt(j, 6).toString()) == java.lang.Boolean.TRUE) {
                        
                        System.out.println("\n"+jTable1.getModel().getValueAt(j, 6).toString());
                        // amt = amt - Double.parseDouble(jTable1.getModel().getValueAt(j, 3).toString());
                        
                        jTable1.getModel().removeTableModelListener(new javax.swing.event.TableModelListener() {
                            
                            public void tableChanged(javax.swing.event.TableModelEvent evt) {
                                
                                //   tableModelTableChanged(evt);
                                
                            }
                            
                        });
                        if(this.jTable1.getModel().getValueAt(j,6) != null){
                            
                            
                            jTextField2.setForeground(java.awt.Color.BLACK);
                            
                            
                            if(amt1 > floatCol2) {
                                
                                //           jTable1.getModel().setValueAt((Object)java.lang.String.valueOf(0.00), jTable1.getSelectedRow(), 4);
                                jTable1.setValueAt(new java.lang.Double(resFloat), jTable1.getSelectedRow(), 5);
                                
                                double balance = java.lang.Double.parseDouble(jTable1.getValueAt(jTable1.getSelectedRow(), 5).toString());
                                
                                jTable1.setValueAt(new java.lang.Double(orig-balance), jTable1.getSelectedRow(), 4);
                                
                            }else{
                                
                                
                                if (amt1 <= floatCol2 && amt1 >= 0){
                                    
                                    jTable1.setValueAt(new java.lang.Double(java.lang.Math.round(floatCol2-amt1)),jTable1.getSelectedRow(),5);
                                    double balance = java.lang.Double.parseDouble(jTable1.getValueAt(jTable1.getSelectedRow(), 5).toString());
                                    
                                    jTable1.setValueAt(new java.lang.Double(amt1), jTable1.getSelectedRow(), 4);
                                    
                                    jTextField2.setForeground(java.awt.Color.RED);
                                    
                                }
                            }
                            
                            
                            amt = amt - Double.parseDouble(jTable1.getModel().getValueAt(j, 3).toString());
                            
                            i++;
                            
                            
                            
                        }
                        if (amt > 0){
                            jTextField2.setText(Double.toString(amt));
                        }else{
                            jTextField2.setText(Double.toString(0.00));
                            
                        }
                    }else{
                        
                        if (Boolean.valueOf(jTable1.getModel().getValueAt(jTable1.getSelectedRow(), 6).toString()) == java.lang.Boolean.FALSE) {
                            
                            if(this.jTable1.getModel().getValueAt(jTable1.getSelectedRow(),6) != null){
                                
                                
                                jTextField2.setForeground(java.awt.Color.BLACK);
                                
                                
                                // if(amt > floatCol2) {
                                
                                //           jTable1.getModel().setValueAt((Object)java.lang.String.valueOf(0.00), jTable1.getSelectedRow(), 4);
                                jTable1.setValueAt(jTable1.getValueAt(jTable1.getSelectedRow(),3), jTable1.getSelectedRow(), 5);
                                jTable1.setValueAt(new java.lang.Double(0), jTable1.getSelectedRow(), 4);
                                
                            }
                            if (amt1 > 0) {
                                jTextField2.setText(Double.toString(amt1+java.lang.Double.parseDouble(jTable1.getValueAt(jTable1.getSelectedRow(), 3).toString())));
                            }else{
                                if (amt1 == 0) {
                                    
                                    jTextField2.setText(Double.toString(java.lang.Double.parseDouble(jTable1.getValueAt(jTable1.getSelectedRow(), 3).toString())-bal));
                                }
                            }
                        }
                    }
                }
            }
            
        }else{
            
            jTable1.setValueAt(new java.lang.Double(floatCol2),jTable1.getSelectedRow(),5);
            
        }
    }
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.afrisoftech.lib.DatePicker datePicker2;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JTextField jTextField6;
    private javax.swing.JButton searchButton1;
    private javax.swing.JLabel jLabel71;
    private javax.swing.JTextField jTextField11111;
    private javax.swing.JTextField jTextField1111;
    private javax.swing.JScrollPane jScrollPane1;
    private org.netbeans.lib.sql.NBCachedRowSet searchRowSet1;
    private javax.swing.JTextField jTextField7;
    private javax.swing.JScrollPane jSearchScrollPane11;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JDialog jSearchDialog11;
    private javax.swing.JButton jButton1;
    private javax.swing.JPanel jSearchPanel1;
    private javax.swing.JPanel jPanel641;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JButton jButton3;
    private javax.swing.JDialog jSearchDialog1;
    private javax.swing.JTable jSearchTable11;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel221;
    private javax.swing.JTextField jTextField361;
    private javax.swing.JButton jButton6;
    private javax.swing.JLabel jLabel11;
    private org.netbeans.lib.sql.NBCachedRowSet searchRowSet11;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JPanel jPanel21;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JButton jButton511;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JTable jSearchTable1;
    private javax.swing.JPanel jSearchPanel11;
    private com.afrisoftech.lib.DatePicker datePicker1;
    private javax.swing.JButton searchButton2;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JScrollPane jSearchScrollPane1;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JButton dispose11;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
    
}
