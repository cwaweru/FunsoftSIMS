/*
 * stockprices.java
 *
 * Created on November 5, 2002, 11:47 AM
 */

package com.afrisoftech.hospital;

/**
 *
 * @author  root
 */
public class CashJourAppintfr extends javax.swing.JInternalFrame implements java.lang.Runnable {
    javax.swing.JComboBox cmbox2 = null;
    java.sql.Connection connectDB = null;
    javax.swing.table.TableModel tableModel = null;
    
    org.netbeans.lib.sql.pool.PooledConnectionSource pConnDB = null;
    
    java.lang.Thread getListThread;
    
    boolean getList;
    
    public CashJourAppintfr(java.sql.Connection connDb, org.netbeans.lib.sql.pool.PooledConnectionSource pconnDB) {
        
        connectDB = connDb;
        
        pConnDB = pconnDB;
        
        getListThread = new java.lang.Thread(this, "Update_petty_cash");
        
        initComponents();
        
        getList = true;
        
        getListThread.start();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        try  {
            java.lang.Class.forName("org.postgresql.Driver");
            System.out.println("Found driver");
        } catch(java.lang.ClassNotFoundException cnf){
            System.out.println("driver not found");
        }
        jButton1 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new com.afrisoftech.dbadmin.JTable(){
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Double.class, java.lang.Object.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        };
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jTextField4 = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jTextField5 = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jTextField6 = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jTextField7 = new javax.swing.JTextField();
        /*float debit = 0;
        float credit = 0;
        float total = 0;
        int j = 0;
        int k = 0;
        try {
            java.sql.Statement stmt = connectDB.createStatement();
            java.sql.ResultSet rset = stmt.executeQuery("select sum(debit) from ac_petty_cash where paid = true AND description = 'Petty Cash'");
            while (rset.next()){

                jTextField1.setText(rset.getObject(1).toString());

            }

            java.sql.Statement stmts = connectDB.createStatement();
            java.sql.ResultSet rsets = stmts.executeQuery("select count(description) from ac_petty_cash where paid = true AND description !='Petty Cash'");
            while (rsets.next()){
                j = rsets.getInt(1);

            }

            if (j > 0){
                java.sql.Statement stmta = connectDB.createStatement();
                java.sql.ResultSet rseta = stmta.executeQuery("select sum(credit - debit) from ac_petty_cash where paid = true AND description !='Petty Cash'");
                while (rseta.next()){

                    jTextField4.setText(rseta.getObject(1).toString());
                    debit = rseta.getFloat(1);
                    // jTextField11.setText(rset.getObject(3).toString());
                }
            }else{
                jTextField4.setText("0.00");
                debit = 0;
            }

            java.sql.Statement stmts1 = connectDB.createStatement();
            java.sql.ResultSet rsets1 = stmts1.executeQuery("select count(description) from ac_petty_cash where paid = false");
            while (rsets1.next()){
                k = rsets1.getInt(1);

            }

            if (k > 0){
                java.sql.Statement stmt1 = connectDB.createStatement();
                java.sql.ResultSet rset1 = stmt1.executeQuery("select sum(credit) from ac_petty_cash where paid = false");
                while (rset1.next()){

                    jTextField5.setText(rset1.getObject(1).toString());
                    credit = rset1.getFloat(1);
                }
            }else{
                jTextField5.setText("0.00");
                credit = 0;
            }

            total = debit+credit;
            jTextField6.setText(""+total+"");

            java.sql.Statement stmt2 = connectDB.createStatement();
            java.sql.ResultSet rset2 = stmt2.executeQuery("select sum(debit - credit) from ac_petty_cash");
            while (rset2.next()){

                jTextField7.setText(rset2.getObject(1).toString());

            }
        } catch (java.sql.SQLException sqe) {
            sqe.printStackTrace();
            //  System.out.println("Insert not successful");
        }
        */
        jButton31 = new javax.swing.JButton();

        getContentPane().setLayout(new java.awt.GridBagLayout());

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Petty Cash Approval");
        setPreferredSize(new java.awt.Dimension(650, 700));
        setVisible(true);
        jButton1.setMnemonic('O');
        jButton1.setText("Ok");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(jButton1, gridBagConstraints);

        jButton3.setMnemonic('l');
        jButton3.setText("Clear");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(jButton3, gridBagConstraints);

        jButton4.setMnemonic('C');
        jButton4.setText("Close");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(jButton4, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        getContentPane().add(jSeparator1, gridBagConstraints);

        jPanel1.setLayout(new java.awt.GridBagLayout());

        jPanel1.setBackground(new java.awt.Color(225, 240, 240));
        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Tick payments to be approved"));
        tableModel = jTable1.getModel();

        tableModel.addTableModelListener(new javax.swing.event.TableModelListener() {

            public void tableChanged(javax.swing.event.TableModelEvent evt) {

                tableModelTableChanged(evt);

            }

        });
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Req No.", "Department", "Requisitioner", "Payee", "Purpose", "Date Required", "Amount", "Status", "Approve"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Double.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Double.class, java.lang.Object.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.setShowHorizontalLines(false);
        /*try {
            crset4.setCommand("select requisition_no,department,requisitioner,payee,reason,date_required,credit as amount,status,approved::boolean from ac_petty_cash_requisition WHERE approved = false");
            crset4.setConnectionSource(pConnDB);

            crset4.execute();

            // crset2.setExecuteOnLoad(true);
            jTable1.setModel(new org.netbeans.lib.sql.models.TableModel(crset4, new org.netbeans.lib.sql.models.TableModel.Column[] {
                new org.netbeans.lib.sql.models.TableModel.Column("requisition_no", "Req. No.", false),
                new org.netbeans.lib.sql.models.TableModel.Column("department", "Department", false),
                new org.netbeans.lib.sql.models.TableModel.Column("requisitioner", "Requisitioner", false),
                new org.netbeans.lib.sql.models.TableModel.Column("payee", "Payee", false),
                new org.netbeans.lib.sql.models.TableModel.Column("reason", "Purpose", false),
                new org.netbeans.lib.sql.models.TableModel.Column("date_required", "Date Required", false),
                new org.netbeans.lib.sql.models.TableModel.Column("amount", "Amount", true),
                new org.netbeans.lib.sql.models.TableModel.Column("status", "Status", false),
                new org.netbeans.lib.sql.models.TableModel.Column("approved", "Approve?", true)

            }));

            jScrollPane1.setViewportView(jTable1);
            // }
        // }

    } catch(java.sql.SQLException sqlex){
        javax.swing.JOptionPane.showMessageDialog(this,sqlex.getMessage(),"Error Message!",javax.swing.JOptionPane.ERROR_MESSAGE);

        System.out.println(sqlex.getMessage());

    }

    /*       cmbox2 = new javax.swing.JComboBox();

    try {

        crset1.setConnectionSource(pConnDB);
        crset1.execute("select description from stock_item");

        cmbox2.setModel(new org.netbeans.lib.sql.models.ComboBoxModel(crset1, "description", null, null,null));

        javax.swing.table.TableColumn seditor = this.jTable1.getColumn("Product");

        seditor.setCellEditor(new javax.swing.DefaultCellEditor(cmbox2));

        cmbox2.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {

                cmbox2ActionPerformed(evt);
            }
        });
    } catch(java.sql.SQLException sqlExec) {

        javax.swing.JOptionPane.showMessageDialog(this, sqlExec.getMessage());

    }

    javax.swing.table.TableColumn column = null;
    for (int i = 0; i < 4; i++) {
        column = jTable1.getColumnModel().getColumn(i);
        if (i == 0) {

            column.setPreferredWidth(300); //sport column is bigger
        } else {
            if (i == 1) {
                column.setPreferredWidth(200);
            } else {
                if (i == 2) {
                    column.setPreferredWidth(50);
                }  else
                column.setPreferredWidth(50);

            }
        }
    }
    */
    jScrollPane1.setViewportView(jTable1);

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 3;
    gridBagConstraints.gridwidth = 5;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.weighty = 10.0;
    jPanel1.add(jScrollPane1, gridBagConstraints);

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 4;
    gridBagConstraints.gridwidth = 4;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.weighty = 25.0;
    gridBagConstraints.insets = new java.awt.Insets(5, 2, 5, 2);
    getContentPane().add(jPanel1, gridBagConstraints);

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 5;
    gridBagConstraints.gridwidth = 2;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    getContentPane().add(jLabel1, gridBagConstraints);

    jLabel2.setText("Balance B/F");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.weighty = 1.0;
    getContentPane().add(jLabel2, gridBagConstraints);

    jTextField1.setEditable(false);
    jTextField1.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.weighty = 1.0;
    getContentPane().add(jTextField1, gridBagConstraints);

    jLabel5.setText("Expensed Amt.");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.weighty = 1.0;
    getContentPane().add(jLabel5, gridBagConstraints);

    jTextField4.setEditable(false);
    jTextField4.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.weighty = 1.0;
    getContentPane().add(jTextField4, gridBagConstraints);

    jLabel6.setText("Advances Amt.");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 2;
    getContentPane().add(jLabel6, gridBagConstraints);

    jTextField5.setEditable(false);
    jTextField5.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 2;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.weighty = 1.0;
    getContentPane().add(jTextField5, gridBagConstraints);

    jLabel7.setText("Total Commited Amt.");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 2;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.weighty = 1.0;
    getContentPane().add(jLabel7, gridBagConstraints);

    jTextField6.setEditable(false);
    jTextField6.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 3;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.weighty = 1.0;
    gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
    getContentPane().add(jTextField6, gridBagConstraints);

    jLabel8.setText("Balance Available");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 2;
    gridBagConstraints.gridy = 2;
    getContentPane().add(jLabel8, gridBagConstraints);

    jTextField7.setEditable(false);
    jTextField7.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 3;
    gridBagConstraints.gridy = 2;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.weighty = 1.0;
    gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
    getContentPane().add(jTextField7, gridBagConstraints);

    jButton31.setMnemonic('R');
    jButton31.setText("Refresh");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 2;
    gridBagConstraints.gridy = 7;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.weighty = 1.0;
    getContentPane().add(jButton31, gridBagConstraints);

    setBounds(0, 0, 701, 337);
    }// </editor-fold>//GEN-END:initComponents
    
    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        for (int k = 0; k < jTable1.getRowCount(); k++ ) {
            for (int r = 0; r < jTable1.getColumnCount(); r++ ) {
                jTable1.getModel().setValueAt(null,k,r);
            }
        }
      
        // jComboBox1.setSelectedItem(null);
        //  jTextField1.setText("");
        // this.jTextField11.setText("");// Add your handling code here:
    }//GEN-LAST:event_jButton3ActionPerformed
    private void cmbox2ActionPerformed(java.awt.event.ActionEvent evt){
 /*     int i = jTable1.getSelectedRow();
      java.lang.Object res_cmbox2 = cmbox2.getSelectedItem();
  
      try {
             java.sql.Statement pstmt = connectDB.createStatement();
          java.sql.ResultSet rs = pstmt.executeQuery("select item_code from stock_item where description = '"+cmbox2.getSelectedItem()+"'");
          while (rs.next())
            jTable1.setValueAt(rs.getObject(1),i,1);
  
      } catch(java.sql.SQLException sqlex){
        System.out.println(sqlex.getMessage());
 }*/
    }
    
    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        setVisible(false); // Add your handling code here:
    }//GEN-LAST:event_jButton4ActionPerformed
        
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        java.util.Calendar calendar = java.util.Calendar.getInstance();
        
        long dateNow = calendar.getTimeInMillis();
        
        java.sql.Date datenowSql1= new java.sql.Date(dateNow);
        
        System.out.println(datenowSql1.toString());
        
        java.sql.Timestamp datenowSql= new java.sql.Timestamp(dateNow);
        
        System.out.println(datenowSql.toString());
        
        String glAcc = null;
        String Activity = null;
        String usern = null;
        try{
            connectDB.setAutoCommit(false);
 
            for (int i = 0; i < jTable1.getRowCount(); i++){
                if ((jTable1.getModel().getValueAt(i,8)  == java.lang.Boolean.TRUE)){
   
                    java.sql.PreparedStatement pstmt2 = connectDB.prepareStatement("UPDATE ac_petty_cash_requisition SET approved = 'true',credit = '"+jTable1.getValueAt(i,6).toString()+"' WHERE requisition_no = '"+jTable1.getValueAt(i,0).toString()+"' AND reason = '"+jTable1.getValueAt(i,4).toString()+"'");
                    pstmt2.executeUpdate();
           
                }
                
            }
            
            connectDB.commit();
            connectDB.setAutoCommit(true);
            javax.swing.JOptionPane.showMessageDialog(this, "Insert Done Successfully","Comfirmation Message",javax.swing.JOptionPane.INFORMATION_MESSAGE);
            
            
           // crset4.execute();
        }   catch(java.sql.SQLException sq){
            try {
                connectDB.rollback();
            }catch (java.sql.SQLException sql){
                javax.swing.JOptionPane.showMessageDialog(this,sql.getMessage(),"Error Message!",javax.swing.JOptionPane.ERROR_MESSAGE);
            }
            javax.swing.JOptionPane.showMessageDialog(this, sq.getMessage(),"Error Message!",javax.swing.JOptionPane.ERROR_MESSAGE);
            System.out.println(sq.getMessage());
        }
        // Add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed
    
    public void tableModelTableChanged(javax.swing.event.TableModelEvent evt) {
        
        double totals = java.lang.Double.parseDouble(jTextField7.getText());;
        
        int i = 0;
        
        for (int j = 0; j < jTable1.getRowCount(); j++) {
            
            System.out.println(jTable1.getModel().getValueAt(j, 8).toString());
            
            if (Boolean.valueOf(jTable1.getModel().getValueAt(j, 8).toString()) == java.lang.Boolean.FALSE) {
                
                totals = totals - Double.parseDouble(jTable1.getModel().getValueAt(j, 6).toString());
                
                i++;
            }
        }
        
        jTextField7.setText(Double.toString(totals));
        
        // jTextField2.setText(Integer.toString(i));
        
        System.out.println(totals);
        
        System.out.println(i);
        
        System.out.println("This table has changed");
        
    }
    
    
    public void run() {
        
        while(getList) {
            
            runGetListThread();
            
            try {
                
                Thread.currentThread().sleep(30000);
                
            } catch(java.lang.InterruptedException IntExec){
                
                javax.swing.JOptionPane.showMessageDialog(this, IntExec.getMessage(), "Interruption Error!", javax.swing.JOptionPane.ERROR_MESSAGE);
                
            }
            
            // getList = false;
            
        }
        
    }
    
    public void runGetListThread() {
        
        int j = 0;
        int i = 0;
        int n = 0;
        
        
        float debit = 0;
        float credit = 0;
        float total = 0;
        float balance = 0;
        float bd = 0;
        int x = 0;
        int b = 0;
        try {
            java.sql.Statement stmt = connectDB.createStatement();
            java.sql.ResultSet rset = stmt.executeQuery("select sum(debit-credit) from ac_petty_cash");
            while (rset.next()){

                jTextField1.setText(rset.getObject(1).toString());
                balance = rset.getFloat(1);    
            }

            java.sql.Statement stmts = connectDB.createStatement();
            java.sql.ResultSet rsets = stmts.executeQuery("select count(purpose) from ac_petty_cash_requisition where approved = true AND paid = false and status ilike 'reim%'");
            while (rsets.next()){
                x = rsets.getInt(1);

            }

            if (x > 0){
                java.sql.Statement stmta = connectDB.createStatement();
                java.sql.ResultSet rseta = stmta.executeQuery("select sum(credit) from ac_petty_cash_requisition where approved = true AND paid = false and status ilike 'reim%'");
                while (rseta.next()){

                    jTextField4.setText(rseta.getObject(1).toString());
                    debit = rseta.getFloat(1);
                    // jTextField11.setText(rset.getObject(3).toString());
                }
            }else{
                jTextField4.setText("0.00");
                debit = 0;
            }

            java.sql.Statement stmts1 = connectDB.createStatement();
            java.sql.ResultSet rsets1 = stmts1.executeQuery("select count(purpose) from ac_petty_cash_requisition where approved = true AND paid = false and status ilike 'adva%'");
            while (rsets1.next()){
                b = rsets1.getInt(1);

            }

            if (b > 0){
                java.sql.Statement stmt1 = connectDB.createStatement();
                java.sql.ResultSet rset1 = stmt1.executeQuery("select sum(credit) from ac_petty_cash_requisition where approved = true AND paid = false and status ilike 'adva%'");
                while (rset1.next()){

                    jTextField5.setText(rset1.getObject(1).toString());
                    credit = rset1.getFloat(1);
                }
            }else{
                jTextField5.setText("0.00");
                credit = 0;
            }

            total = debit+credit;
            bd = balance-total;
            jTextField6.setText(""+total+"");
            
            jTextField7.setText(""+bd+"");

           /* java.sql.Statement stmt2 = connectDB.createStatement();
            java.sql.ResultSet rset2 = stmt2.executeQuery("select sum(debit - credit) from ac_petty_cash");
            while (rset2.next()){

                jTextField7.setText(rset2.getObject(1).toString());

            }
            */
        } catch (java.sql.SQLException sqe) {
            sqe.printStackTrace();
            //  System.out.println("Insert not successful");
        }
        jButton31 = new javax.swing.JButton();

      /*  crset1.setCommand("select sum(debit) as amount from  ac_petty_cash");
        crset1.setConnectionSource(pConnDB);
        crset4.setCommand("");
        crset4.setConnectionSource(pConnDB);

        */
        try {
            
           for (int k = 0; k < jTable1.getRowCount(); k++ ) {
            for (int r = 0; r < jTable1.getColumnCount(); r++ ) {
                jTable1.getModel().setValueAt(null,k,r);
            }
        }
           
           
            
            java.sql.Statement stmtTable1 = connectDB.createStatement();
            
            java.sql.ResultSet rsetTable1 = stmtTable1.executeQuery("select requisition_no,department,requisitioner,payee,reason,date_required,credit as amount,status,approved::boolean from ac_petty_cash_requisition WHERE approved = false ORDER BY date_required");
            
            
            while (rsetTable1.next()) {
                
                jTable1.setValueAt(rsetTable1.getObject(1), i, 0);
                jTable1.setValueAt(rsetTable1.getObject(2), i, 1);
                jTable1.setValueAt(rsetTable1.getObject(3), i, 2);
                jTable1.setValueAt(rsetTable1.getObject(4), i, 3);
                jTable1.setValueAt(rsetTable1.getObject(5), i, 4);
                jTable1.setValueAt(rsetTable1.getObject(6), i, 5);
                jTable1.setValueAt(rsetTable1.getObject(7), i, 6);
                jTable1.setValueAt(rsetTable1.getObject(8), i, 7);
                jTable1.setValueAt(rsetTable1.getObject(9), i, 8);
                
                i++;
                
            }
            
        } catch(java.sql.SQLException sqlExec) {
            
            sqlExec.printStackTrace();
            
            javax.swing.JOptionPane.showMessageDialog(this, sqlExec.getMessage());
            
        }
        
        
        
    }
    
    
    
    
    
    
    
    
     /*try {
            crset4.setCommand("select requisition_no,department,requisitioner,payee,reason,date_required,credit as amount,status,approved::boolean from ac_petty_cash_requisition WHERE approved = false");
            crset4.setConnectionSource(pConnDB);
      
            crset4.execute();
      
            // crset2.setExecuteOnLoad(true);
            jTable1.setModel(new org.netbeans.lib.sql.models.TableModel(crset4, new org.netbeans.lib.sql.models.TableModel.Column[] {
                new org.netbeans.lib.sql.models.TableModel.Column("requisition_no", "Req. No.", false),
                new org.netbeans.lib.sql.models.TableModel.Column("department", "Department", false),
                new org.netbeans.lib.sql.models.TableModel.Column("requisitioner", "Requisitioner", false),
                new org.netbeans.lib.sql.models.TableModel.Column("payee", "Payee", false),
                new org.netbeans.lib.sql.models.TableModel.Column("reason", "Purpose", false),
                new org.netbeans.lib.sql.models.TableModel.Column("date_required", "Date Required", false),
                new org.netbeans.lib.sql.models.TableModel.Column("amount", "Amount", true),
                new org.netbeans.lib.sql.models.TableModel.Column("status", "Status", false),
                new org.netbeans.lib.sql.models.TableModel.Column("approved", "Approve?", true)
      
            }));
      
            jScrollPane1.setViewportView(jTable1);
            // }
        // }
      
    } catch(java.sql.SQLException sqlex){
        javax.swing.JOptionPane.showMessageDialog(this,sqlex.getMessage(),"Error Message!",javax.swing.JOptionPane.ERROR_MESSAGE);
      
        System.out.println(sqlex.getMessage());
      
    }
      */
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton31;
    public javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JTextField jTextField5;
    private javax.swing.JTextField jTextField6;
    private javax.swing.JTextField jTextField7;
    // End of variables declaration//GEN-END:variables
    
}
