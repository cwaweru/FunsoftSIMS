/*
 * offintfr.java
 *
 * Created on August 13, 2002, 1:55 AM
 */

package com.afrisoftech.hospital;

/**
 *
 * @author  root
 */
public class BedsChargesintfr extends javax.swing.JInternalFrame {
    
    /** Creates new form offintfr */
    private javax.swing.JComboBox cmbox;
    
    com.afrisoftech.lib.DBObject dbObject;
    
    java.sql.Connection connectDB = null;
    javax.swing.table.TableModel tableModel = null;
    
    org.netbeans.lib.sql.pool.PooledConnectionSource pConnDB = null;
    
    
    public BedsChargesintfr(java.sql.Connection connDb, org.netbeans.lib.sql.pool.PooledConnectionSource pconnDB) {
        
        dbObject = new com.afrisoftech.lib.DBObject();
        
        connectDB = connDb;
        
        pConnDB = pconnDB;
        
        initComponents();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jSeparator1 = new javax.swing.JSeparator();
        jLabel4 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jPanel21 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new com.afrisoftech.dbadmin.JTable();
        datePicker1 = new com.afrisoftech.lib.DatePicker();
        jLabel1 = new javax.swing.JLabel();
        jCheckBox1 = new javax.swing.JCheckBox();
        try {
            java.lang.Class.forName("org.postgresql.Driver");
        }catch (java.lang.ClassNotFoundException sl){
            System.out.println(sl.getMessage());
        }

        jButton1 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();

        getContentPane().setLayout(new java.awt.GridBagLayout());

        setClosable(true);
        setDefaultCloseOperation(javax.swing.WindowConstants.HIDE_ON_CLOSE);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Bed Charges");
        setVisible(true);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(jSeparator1, gridBagConstraints);

        jLabel4.setFont(new java.awt.Font("Utopia", 3, 18));
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        getContentPane().add(jLabel4, gridBagConstraints);

        jPanel2.setLayout(new java.awt.GridBagLayout());

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        jPanel21.setLayout(new java.awt.GridBagLayout());

        jPanel21.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        tableModel = jTable1.getModel();

        tableModel.addTableModelListener(new javax.swing.event.TableModelListener() {

            public void tableChanged(javax.swing.event.TableModelEvent evt) {

                tableModelTableChanged(evt);

            }

        });
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Admission No.", "Name", "Ward", "Bed No.", "Amount", "Nursing"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTable1);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel21.add(jScrollPane1, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.gridheight = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 10.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 5, 5);
        jPanel2.add(jPanel21, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 20);
        jPanel2.add(datePicker1, gridBagConstraints);

        jLabel1.setText("Date");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel2.add(jLabel1, gridBagConstraints);

        jCheckBox1.setText("View patient to be charged bed charges");
        jCheckBox1.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        jCheckBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox1ActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        jPanel2.add(jCheckBox1, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 6;
        gridBagConstraints.gridheight = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 50.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 2, 2);
        getContentPane().add(jPanel2, gridBagConstraints);

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/check.gif")));
        jButton1.setMnemonic('O');
        jButton1.setText("Ok");
        jButton1.setToolTipText("Click here enter data");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 14;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(jButton1, gridBagConstraints);

        jButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/minusarm.gif")));
        jButton3.setMnemonic('l');
        jButton3.setText("Clear");
        jButton3.setToolTipText("Click here to clear textfields");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 14;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(jButton3, gridBagConstraints);

        jButton4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/BD14755_.GIF")));
        jButton4.setMnemonic('C');
        jButton4.setText("Close");
        jButton4.setToolTipText("Click here to close window");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 14;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(jButton4, gridBagConstraints);

        jButton2.setText("Remove");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 14;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(jButton2, gridBagConstraints);

        setBounds(0, 0, 600, 502);
    }// </editor-fold>//GEN-END:initComponents
    
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        
        int rows2Delete = jTable1.getSelectedRowCount();
        
        int[] selectedRows = jTable1.getSelectedRows();
        
        if (rows2Delete < 1) {
            
            java.awt.Toolkit.getDefaultToolkit().beep();
            
            javax.swing.JOptionPane.showMessageDialog(this, "There are no selected rows to delete!");
            
        } else {
            
            if (rows2Delete > 1) {
                
                for (int i = 0; i < selectedRows.length; i++) {
                    
                    
                    
                    javax.swing.table.DefaultTableModel defTableModel = (javax.swing.table.DefaultTableModel)jTable1.getModel();
                    
                    defTableModel.removeRow(selectedRows[i]);
                    
                }
                
                
                
            } else {
                
                javax.swing.table.DefaultTableModel defTableModel = (javax.swing.table.DefaultTableModel)jTable1.getModel();
                
                defTableModel.removeRow(jTable1.getSelectedRow());
            }
        }        // Add your handling code here:
    }//GEN-LAST:event_jButton2ActionPerformed
    public void tableModelTableChanged(javax.swing.event.TableModelEvent evt) {
        
        
    }
    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        this.setVisible(false); // Add your handling code here:
    }//GEN-LAST:event_jButton4ActionPerformed
    
    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // Add your handling code here:
    }//GEN-LAST:event_jButton3ActionPerformed
    
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        
        try{
            String billNo = null;
            String transNo = null;
            String payMode = null;
            String patientAcc = null;
            String cardNo = null;
            String AccDesc = null;
            String scheme = null;
            String cardName = null;
            String isurer = null;
            String expDate = null;
            String staffNo = null;
            String glAcc = null;
            String mainAcc = null;
            String user = null;
            String patientCat = "";
            String mainService = null;
            String service = null;
            double rate = 0.00;
            String visitid = null;
            String glcodesc = null;
            int patno = 0;
            
            try {
                
                connectDB.setAutoCommit(false);
                
                java.sql.Statement stm12q1 = connectDB.createStatement();
                java.sql.ResultSet rse12q1 = stm12q1.executeQuery("select current_user");
                while (rse12q1.next()){
                    user = rse12q1.getString(1);
                }
                
                
                java.sql.Statement stm12 = connectDB.createStatement();
                java.sql.ResultSet rse12 = stm12.executeQuery("select code,activity from pb_activity where activity_category = 'PR'");
                while (rse12.next()){
                    
                    patientAcc = rse12.getObject(1).toString();
                    AccDesc = rse12.getObject(2).toString();
                }
                
                java.sql.Statement stm121 = connectDB.createStatement();
                java.sql.ResultSet rse121 = stm121.executeQuery("select gl_account,main_service from pb_operating_parameters where category  ilike 'WP'");
                while (rse121.next()){
                    
                    glAcc = rse121.getObject(1).toString();
                    mainAcc = rse121.getObject(2).toString();
                }
                java.sql.Statement ps = connectDB.createStatement();
                java.sql.ResultSet rst = ps.executeQuery("select nextval('transaction_no_seq')");
                while (rst.next()){
                    rst.getObject(1).toString();
                    
                    transNo = rst.getObject(1).toString();
                    
                }
                for (int i = 0; i < jTable1.getRowCount(); i++){
                    if (jTable1.getModel().getValueAt(i,0) != null){
                        java.sql.Statement stm12q = connectDB.createStatement();
                        java.sql.ResultSet rse12q = stm12q.executeQuery("select count(description) from hp_patient_card where date::date = '"+datePicker1.getDate().toString()+"' AND service ilike 'BED CHARGES%' AND patient_no =  '"+jTable1.getValueAt(i,0).toString()+"'");
                        while (rse12q.next()){
                            patno = rse12q.getInt(1);
                        }
                        
                        if (patno > 0){
                            javax.swing.JOptionPane.showMessageDialog(this, "Beds have been Charged for '"+datePicker1.getDate().toString()+"'","Comfirmation Message",javax.swing.JOptionPane.INFORMATION_MESSAGE);
                            
                        }else{
                            java.sql.Statement stmtz = connectDB.createStatement();
                            java.sql.ResultSet rset = stmtz.executeQuery("select visit_id  from hp_admission where patient_no = '"+jTable1.getValueAt(i,0).toString()+"' and discharge = false AND visit_id IS NOT NULL");
                            while (rset.next()){
                                
                                visitid = rset.getObject(1).toString();
                            }
                            java.sql.Statement stm1 = connectDB.createStatement();
                            java.sql.ResultSet rse1 = stm1.executeQuery("select pay_mode,account_no,description,payer,payer,expiry_date,account_no from hp_inpatient_register where patient_no ='"+jTable1.getValueAt(i,0).toString()+"'");
                            
                            //java.sql.ResultSet rse1 = stm1.executeQuery("select pay_mode,payer,account_no,description,category,expiry_date from hp_inpatient_register where patient_no = '"+jTable1.getValueAt(i,0).toString()+"'");
                            java.sql.Statement stm11 = connectDB.createStatement();
                            java.sql.ResultSet rse11 = stm11.executeQuery("select gl_account,main_service,service_type,rate from pb_operating_parameters where category ILIKE 'NP'");
                            
                            while (rse11.next()){
                                mainService = rse11.getObject(2).toString();
                                service = rse11.getObject(3).toString();
                                rate = rse11.getDouble(4);
                                glcodesc = rse11.getObject(1).toString();
                            }
                            while (rse1.next()){
                                payMode = dbObject.getDBObject(rse1.getObject(1), "-");
                                cardNo = dbObject.getDBObject(rse1.getObject(2), "-");
                                scheme = dbObject.getDBObject(rse1.getObject(3), "-");
                                cardName = dbObject.getDBObject(rse1.getObject(4), "-");
                                isurer = dbObject.getDBObject(rse1.getObject(5), "-");
                                expDate = dbObject.getDBObject(rse1.getObject(6), "'now'");
                                staffNo = dbObject.getDBObject(rse1.getObject(7), "-");
                            }
                            
                            java.sql.PreparedStatement pstmt = connectDB.prepareStatement("insert into hp_patient_card values(?,?,?,?,?,?,?,?,?, ?,?,?,?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?,?,?,?,?)");
                            
                            pstmt.setObject(1,jTable1.getValueAt(i,0).toString());
                            pstmt.setObject(2,"BED CHARGES");
                            pstmt.setString(3,patientCat);
                            pstmt.setString(4,payMode);
                            pstmt.setString(5,transNo);
                            pstmt.setString(7,scheme);
                            pstmt.setString(6,cardNo);
                            pstmt.setString(8,cardName);
                            pstmt.setString(9,isurer);
                            pstmt.setDate(10,null);
                            pstmt.setString(11,"");
                            pstmt.setDouble(12,java.lang.Double.valueOf(jTable1.getValueAt(i,4).toString()));
                            pstmt.setDouble(13,0.00);
                            pstmt.setDate(14,com.afrisoftech.lib.SQLDateFormat.getSQLDate(datePicker1.getDate()));
                            pstmt.setObject(15,patientAcc);
                            pstmt.setString(16,"BED CHARGES");
                            pstmt.setDouble(17,1);
                            pstmt.setObject(18,staffNo);
                            pstmt.setBoolean(19,false);
                            pstmt.setString(20,"Billing");
                            pstmt.setBoolean(21,false);
                            pstmt.setString(22,AccDesc);
                            pstmt.setString(23,visitid);
                            pstmt.setString(24,user);
                            pstmt.setString(25,billNo);
                            pstmt.setString(26,"IP");
                            pstmt.setTimestamp(27,new java.sql.Timestamp(java.util.Calendar.getInstance().getTimeInMillis()));
                            pstmt.setString(28,visitid);
                            pstmt.executeUpdate();
                            
                            
                            java.sql.PreparedStatement pstmt2 = connectDB.prepareStatement("insert into ac_ledger values(?,?,?,?,?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?)");
                            pstmt2.setObject(2,mainAcc);
                            pstmt2.setString(1,glAcc);
                            pstmt2.setObject(3,jTable1.getValueAt(i,0).toString());
                            pstmt2.setObject(4,jTable1.getValueAt(i,1).toString());
                            pstmt2.setString(5,"");
                            pstmt2.setString(6,"");
                            pstmt2.setString(7,"");
                            pstmt2.setString(8,"IP");
                            pstmt2.setString(9,"");
                            pstmt2.setString(10,payMode);
                            pstmt2.setString(11,"");
                            pstmt2.setString(12,"");
                            pstmt2.setString(13,"");
                            pstmt2.setString(14,"BED CHARGES");
                            pstmt2.setString(15,"Billing");
                            pstmt2.setDouble(16,0.00);
                            pstmt2.setDouble(17,java.lang.Double.valueOf(jTable1.getValueAt(i,4).toString()));
                            pstmt2.setDate(18,com.afrisoftech.lib.SQLDateFormat.getSQLDate(datePicker1.getDate()));
                            pstmt2.setString(19,transNo);
                            pstmt2.setBoolean(20,false);
                            pstmt2.setBoolean(21,false);
                            pstmt2.setBoolean(22,false);
                            pstmt2.setString(23,user);
                            pstmt2.executeUpdate();
                            
                            if (rate > 0){
                                java.sql.PreparedStatement pstmtr = connectDB.prepareStatement("insert into hp_patient_card values(?,?,?,?,?,?,?,?,?, ?,?,?,?, ?, ?, ?,?, ?, ?, ?, ?, ?,?,?,?,?,?,?)");
                                pstmtr.setObject(1,jTable1.getValueAt(i,0).toString());
                                pstmtr.setObject(2,service);
                                pstmtr.setString(3,patientCat);
                                pstmtr.setString(4,payMode);
                                pstmtr.setString(5,transNo);
                                pstmtr.setString(7,scheme);
                                pstmtr.setString(6,cardNo);
                                pstmtr.setString(8,cardName);
                                pstmtr.setString(9,isurer);
                                pstmtr.setDate(10,null);
                                pstmtr.setString(11,"");
                                pstmtr.setObject(12,jTable1.getValueAt(i,5).toString());
                                pstmtr.setDouble(13,0.00);
                                pstmtr.setDate(14,com.afrisoftech.lib.SQLDateFormat.getSQLDate(datePicker1.getDate()));
                                pstmtr.setObject(15,patientAcc);
                                pstmtr.setString(16,mainService);
                                pstmtr.setDouble(17,1);
                                pstmtr.setObject(18,staffNo);
                                pstmtr.setBoolean(19,false);
                                pstmtr.setString(20,"Billing");
                                pstmtr.setBoolean(21,false);
                                pstmtr.setString(22,AccDesc);
                                pstmtr.setString(23,visitid);
                                pstmtr.setString(24,user);
                                pstmtr.setString(25,billNo);
                                pstmtr.setString(26,"IP");
                                pstmtr.setTimestamp(27,new java.sql.Timestamp(java.util.Calendar.getInstance().getTimeInMillis()));
                                pstmtr.setString(28,visitid);
                                pstmtr.executeUpdate();
                                
                                
                                java.sql.PreparedStatement pstmt2r = connectDB.prepareStatement("insert into ac_ledger values(?,?,?,?,?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?)");
                                pstmt2r.setObject(2,mainService);
                                pstmt2r.setString(1,glcodesc);
                                pstmt2r.setObject(3,jTable1.getValueAt(i,0).toString());
                                pstmt2r.setString(4,jTable1.getValueAt(i,1).toString());
                                pstmt2r.setString(5,"");
                                pstmt2r.setString(6,"");
                                pstmt2r.setString(7,"");
                                pstmt2r.setString(8,"IP");
                                pstmt2r.setString(9,"");
                                pstmt2r.setString(10,payMode);
                                pstmt2r.setString(11,"");
                                pstmt2r.setString(12,"");
                                pstmt2r.setString(13,"");
                                pstmt2r.setString(14,service);
                                pstmt2r.setString(15,"Billing");
                                pstmt2r.setDouble(16,0.00);
                                pstmt2r.setObject(17,jTable1.getValueAt(i,5).toString());
                                pstmt2r.setDate(18,com.afrisoftech.lib.SQLDateFormat.getSQLDate(datePicker1.getDate()));
                                pstmt2r.setString(19,transNo);
                                pstmt2r.setBoolean(20,false);
                                pstmt2r.setBoolean(21,false);
                                pstmt2r.setBoolean(22,false);
                                pstmt2r.setString(23,user);
                                pstmt2r.executeUpdate();
                                
                            }
                        }
                    }
                }
                
                connectDB.commit();
                connectDB.setAutoCommit(true);
                
                
                
                javax.swing.JOptionPane.showMessageDialog(this, "Insert Done Successfully","Comfirmation Message",javax.swing.JOptionPane.INFORMATION_MESSAGE);
                
                for (int k = 0; k < jTable1.getRowCount(); k++ ) {
                    for (int r = 0; r < jTable1.getColumnCount(); r++ ) {
                        jTable1.getModel().setValueAt(null,k,r);
                    }
                }
                
            }catch(java.sql.SQLException sq){
                
                try {
                    connectDB.rollback();
                }catch (java.sql.SQLException sql){
                    javax.swing.JOptionPane.showMessageDialog(this,sql.getMessage(),"Error Message!",javax.swing.JOptionPane.ERROR_MESSAGE);
                }
                System.out.println(sq.getMessage());
                javax.swing.JOptionPane.showMessageDialog(this,sq.getMessage(), "Error",javax.swing.JOptionPane.ERROR_MESSAGE);
                
            }
            
        } catch(java.lang.Exception ex) {
            System.out.println(ex.getMessage());
            javax.swing.JOptionPane.showMessageDialog(this, "TRANSACTION ERROR : Please double check your entries.", "Error",javax.swing.JOptionPane.ERROR_MESSAGE);
            
            
        }
        // Add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed
    
    private void jCheckBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox1ActionPerformed
        int j = 0;
        int i = 0;
        /*     try {
         
            crset2.setCommand("select adno ,ward,bedno,charges,upper(name) as name from bed_charges_view");
            //  crset2.setCommand("select description,units,sum(quantity_in_stock) as quantity_in_stock,reorder_level,sum(quantity) as quantity,sum(reorder_level-quantity_in_stock) as min_order,sum(min_order) AS min_order from ungroup_analyse_requisation group by description,units,reorder_level");
            // crset2.setCommand("select description,units,stock,reorder_level,quantity,min_order AS quantity,reorder_level-stock as min_order,reorder_level-stock as min_order from analysed_requisation where reorder_level-stock > 0 order by description");
         
            crset2.setConnectionSource(pConnDB);
         
         
            crset2.execute();
            jTable1.setModel(new org.netbeans.lib.sql.models.TableModel(crset2, new org.netbeans.lib.sql.models.TableModel.Column[] {
         
                new org.netbeans.lib.sql.models.TableModel.Column("adno", "Admission No.", false),
                new org.netbeans.lib.sql.models.TableModel.Column("ward", "Ward", false),
                new org.netbeans.lib.sql.models.TableModel.Column("bedno", "Bed No", false),
                new org.netbeans.lib.sql.models.TableModel.Column("charges", "Charges", false),
                new org.netbeans.lib.sql.models.TableModel.Column("name", "name", false)
                // new org.netbeans.lib.sql.models.TableModel.Column("min_order", "Min.Order", false),
                // new org.netbeans.lib.sql.models.TableModel.Column("min_order", "Qty to Order", true)
         
            }));
         
         
            jScrollPane1.setViewportView(jTable1);
        } catch(java.sql.SQLException sqlex){
            javax.swing.JOptionPane.showMessageDialog(this,sqlex.getMessage(),"Error Message!",javax.swing.JOptionPane.ERROR_MESSAGE);
         
            System.out.println(sqlex.getMessage());
         
        }*/
        try {
            
            java.sql.Statement stmtTable1 = connectDB.createStatement();
            
            //  java.sql.ResultSet rsetTable1 = stmtTable1.executeQuery("SELECT description, quantity,(amount/quantity)::numeric(10,2),amount,gl_code  FROM hp_pharmacy WHERE patient_no = '"+patient_no+"' AND paid = false UNION SELECT service, quantity,(amount/quantity)::numeric(10,2),amount,gl_code  FROM hp_patient_billing WHERE patient_no = '"+patient_no+"' AND paid = false");
            // java.sql.ResultSet rsetTable1 = stmtTable1.executeQuery("select adno ,ward,bedno,charges,upper(name) as name from bed_charges_view");
            java.sql.ResultSet rsetTable1 = stmtTable1.executeQuery("select patient_no,upper(patient_name) as name ,ward,bed_no,deposit,nursing from hp_admission  where discharge = false order by patient_no");
            
            while (rsetTable1.next()) {
                
                System.out.println("Working at table row "+i);
                jTable1.setValueAt(rsetTable1.getObject(1), i, 0);
                jTable1.setValueAt(rsetTable1.getObject(2), i, 1);
                jTable1.setValueAt(rsetTable1.getObject(3), i, 2);
                jTable1.setValueAt(rsetTable1.getObject(4), i, 3);
                jTable1.setValueAt(rsetTable1.getObject(5), i, 4);
                jTable1.setValueAt(rsetTable1.getObject(6), i, 5);
                
                i++;
                
            }
            
            
        } catch(java.sql.SQLException sqlExec) {
            
            javax.swing.JOptionPane.showMessageDialog(this, sqlExec.getMessage());
            
        }
        
        // Add your handling code here:
    }//GEN-LAST:event_jCheckBox1ActionPerformed
    private void cmboxActionPerformed(java.awt.event.ActionEvent evt){
        int i = jTable1.getSelectedRow();
        
        
        
    /*  try {
          //java.sql.Connection con = java.sql.DriverManager.getConnection("jdbc:postgresql://localhost:5432/hospital","postgres","pilsiner");
          java.sql.Statement pstmt = connectDB.createStatement();
          java.sql.ResultSet rs = pstmt.executeQuery("select first_name||' '||middle_name||' '||last_name from member where m_number = '"+cmbox.getSelectedItem()+"'");
          while (rs.next()){
              //jTextField4.setText(rs.getObject(1).toString());
              jTable1.setValueAt(rs.getObject(1),i,1);
          }
      } catch(java.sql.SQLException sqlex){
          System.out.println(sqlex.getMessage());
      }
     */
        
        
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.afrisoftech.lib.DatePicker datePicker1;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    public javax.swing.JButton jButton4;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel21;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
    
}
